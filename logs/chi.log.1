[2010-01-24 16:26:40,715] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Test { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = []

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['foo','bar','created','lastUpdated',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        foo(nullable : false,)
        bar(nullable : false,)
        created(nullable : false,)
        lastUpdated(nullable : false,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <foo nullable ="false"/>
            <bar nullable ="false"/>
            <created nullable ="false"/>
            <lastUpdated nullable ="false"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String foo
    String bar
    Date created
    Date lastUpdated


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Test".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:40,843] DEBUG - DomainObjectLoader.injectIdProperty() : adding property [id] to class [Test]
[2010-01-24 16:26:40,844] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Test]
[2010-01-24 16:26:40,844] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Test]
[2010-01-24 16:26:40,845] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:40,903] DEBUG - PersistenceLoader.addBaseClass() : load Test
[2010-01-24 16:26:41,133] INFO  - Hibernate 3.2.1
[2010-01-24 16:26:41,137] INFO  - hibernate.properties not found
[2010-01-24 16:26:41,138] INFO  - Bytecode provider name : cglib
[2010-01-24 16:26:41,141] INFO  - using JDK 1.4 java.sql.Timestamp handling
[2010-01-24 16:26:41,195] INFO  - configuring from url: file:/Users/rgrey/Work/persistence/etc/hibernate.cfg.xml
[2010-01-24 16:26:41,275] INFO  - Configured SessionFactory: null
[2010-01-24 16:26:41,302] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:41,351] INFO  - Running hbm2ddl schema update
[2010-01-24 16:26:41,351] INFO  - fetching database metadata
[2010-01-24 16:26:41,354] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:41,354] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:41,355] INFO  - autocommit mode: false
[2010-01-24 16:26:41,664] INFO  - MLog clients using log4j logging.
[2010-01-24 16:26:41,686] INFO  - Initializing c3p0-0.9.0 [built 11-July-2005 00:43:29 -0400; debug? true; trace: 10]
[2010-01-24 16:26:41,956] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@a7014d [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@f712df [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> f712df, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@235ed5 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 235ed5, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> a7014d, numHelperThreads -> 3 ]
[2010-01-24 16:26:42,962] INFO  - updating schema
[2010-01-24 16:26:43,143] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:43,144] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:43,144] INFO  - autocommit mode: false
[2010-01-24 16:26:43,234] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@2bafe4 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@1c6c59 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1c6c59, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@3b44b7 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 3b44b7, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 2bafe4, numHelperThreads -> 3 ]
[2010-01-24 16:26:43,236] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:43,236] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:43,240] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:43,243] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:43,245] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:43,245] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:43,245] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:43,245] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:43,245] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:43,245] INFO  - Connection release mode: auto
[2010-01-24 16:26:43,246] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:43,246] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:43,246] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:43,246] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:43,246] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:43,248] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:43,248] INFO  - Query language substitutions: {}
[2010-01-24 16:26:43,248] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:43,248] INFO  - Second-level cache: enabled
[2010-01-24 16:26:43,248] INFO  - Query cache: enabled
[2010-01-24 16:26:43,249] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:43,251] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:43,251] INFO  - Cache region prefix: arv
[2010-01-24 16:26:43,251] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:43,251] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:43,253] INFO  - Statistics: disabled
[2010-01-24 16:26:43,253] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:43,254] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:43,725] INFO  - table not found: test
[2010-01-24 16:26:43,768] INFO  - table not found: test
[2010-01-24 16:26:43,771] INFO  - table not found: hibernate_unique_key
[2010-01-24 16:26:43,899] INFO  - schema update complete
[2010-01-24 16:26:43,904] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:43,904] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:43,904] INFO  - autocommit mode: false
[2010-01-24 16:26:43,996] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@db48f5 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@3bf486 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 3bf486, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@ef227 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> ef227, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> db48f5, numHelperThreads -> 3 ]
[2010-01-24 16:26:43,997] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:43,997] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:43,998] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:43,999] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:43,999] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:43,999] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:43,999] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:43,999] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:43,999] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:44,000] INFO  - Connection release mode: auto
[2010-01-24 16:26:44,000] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:44,000] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:44,000] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:44,000] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:44,000] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:44,000] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:44,000] INFO  - Query language substitutions: {}
[2010-01-24 16:26:44,000] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:44,000] INFO  - Second-level cache: enabled
[2010-01-24 16:26:44,000] INFO  - Query cache: enabled
[2010-01-24 16:26:44,000] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:44,000] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:44,000] INFO  - Cache region prefix: arv
[2010-01-24 16:26:44,000] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:44,000] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:44,000] INFO  - Statistics: disabled
[2010-01-24 16:26:44,000] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:44,001] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:44,026] INFO  - building session factory
[2010-01-24 16:26:44,166] WARN  - Could not find configuration [arv.Test]; using defaults.
[2010-01-24 16:26:44,432] INFO  - Not binding factory to JNDI, no JNDI name configured
[2010-01-24 16:26:44,433] INFO  - starting update timestamps cache at region: arv.org.hibernate.cache.UpdateTimestampsCache
[2010-01-24 16:26:44,433] WARN  - Could not find configuration [arv.org.hibernate.cache.UpdateTimestampsCache]; using defaults.
[2010-01-24 16:26:44,436] INFO  - starting query cache at region: arv.org.hibernate.cache.StandardQueryCache
[2010-01-24 16:26:44,436] WARN  - Could not find configuration [arv.org.hibernate.cache.StandardQueryCache]; using defaults.
[2010-01-24 16:26:44,438] DEBUG - PersistenceLoader.load() : loaded 1 class(es)
[2010-01-24 16:26:44,518] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-24 16:26:44,518] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-24 16:26:44,536] INFO  - Save ID [1]
[2010-01-24 16:26:44,571] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-24 16:26:44,571] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-24 16:26:44,578] INFO  - Loaded Object [Test : 1]
[2010-01-24 16:26:44,578] INFO  - Loaded Value [blaa]
[2010-01-24 16:26:46,604] DEBUG - SchemaLoader() : directory [test/schema/relax]
[2010-01-24 16:26:46,706] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Boolean.rng]
[2010-01-24 16:26:47,136] DEBUG - RelaxSchema.addBaseFields() : evaluating bool-test
[2010-01-24 16:26:47,139] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,143] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,173] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,176] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,177] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,178] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,211] DEBUG - RelaxSchema.recurse() : element BoolTest
[2010-01-24 16:26:47,246] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-24 16:26:47,246] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-24 16:26:47,256] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-24 16:26:47,256] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,260] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-24 16:26:47,260] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,299] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Complex.rng]
[2010-01-24 16:26:47,305] DEBUG - FileResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-24 16:26:47,316] DEBUG - RelaxSchema.addBaseFields() : evaluating levelone
[2010-01-24 16:26:47,316] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,316] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,319] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,320] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,321] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,322] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,324] DEBUG - RelaxSchema.recurse() : element Levelone
[2010-01-24 16:26:47,324] DEBUG - RelaxSchema.addBaseFields() : evaluating leveltwo
[2010-01-24 16:26:47,324] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,325] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,325] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,325] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,326] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,326] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,327] DEBUG - RelaxClass() : ancestor count for [Leveltwo] = 1
[2010-01-24 16:26:47,327] DEBUG - RelaxSchema.recurse() : element Leveltwo
[2010-01-24 16:26:47,329] DEBUG - RelaxClass() : ancestor count for [Levelthree.rng] = 2
[2010-01-24 16:26:47,333] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-24 16:26:47,333] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,337] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-24 16:26:47,337] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,344] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-24 16:26:47,344] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,347] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-24 16:26:47,348] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,352] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Favorite.rng]
[2010-01-24 16:26:47,360] DEBUG - RelaxSchema.addBaseFields() : evaluating favorite
[2010-01-24 16:26:47,360] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,360] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,361] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,361] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,361] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,361] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,362] DEBUG - RelaxSchema.recurse() : element Favorite
[2010-01-24 16:26:47,366] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-24 16:26:47,366] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-24 16:26:47,370] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-24 16:26:47,370] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,372] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-24 16:26:47,372] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,374] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Levelthree.rng]
[2010-01-24 16:26:47,388] DEBUG - RelaxSchema.addBaseFields() : evaluating levelthree
[2010-01-24 16:26:47,388] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,388] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,388] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,388] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,389] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,389] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,389] DEBUG - RelaxSchema.recurse() : element Levelthree
[2010-01-24 16:26:47,391] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-24 16:26:47,391] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-24 16:26:47,394] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-24 16:26:47,394] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,399] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-24 16:26:47,399] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,402] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Mixed.rng]
[2010-01-24 16:26:47,416] DEBUG - RelaxSchema.addBaseFields() : evaluating mixed-kids
[2010-01-24 16:26:47,417] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,417] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,418] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,418] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,419] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,420] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,420] DEBUG - RelaxSchema.recurse() : element MixedKids
[2010-01-24 16:26:47,421] DEBUG - RelaxClass() : ancestor count for [Title] = 1
[2010-01-24 16:26:47,421] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-24 16:26:47,433] DEBUG - RelaxClass() : ancestor count for [interleave.rng] = 1
[2010-01-24 16:26:47,436] DEBUG - RelaxSchema.ref() : follow [kid-one]
[2010-01-24 16:26:47,440] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-one
[2010-01-24 16:26:47,440] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,440] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,441] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,441] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,442] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,442] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,443] DEBUG - RelaxClass() : ancestor count for [KidOne] = 1
[2010-01-24 16:26:47,443] DEBUG - RelaxSchema.recurse() : element KidOne
[2010-01-24 16:26:47,444] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-24 16:26:47,444] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-24 16:26:47,451] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-24 16:26:47,451] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,453] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-24 16:26:47,453] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,455] DEBUG - RelaxSchema.ref() : follow [kid-two]
[2010-01-24 16:26:47,456] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-two
[2010-01-24 16:26:47,456] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,456] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,456] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,456] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,457] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,457] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,457] DEBUG - RelaxClass() : ancestor count for [KidTwo] = 1
[2010-01-24 16:26:47,457] DEBUG - RelaxSchema.recurse() : element KidTwo
[2010-01-24 16:26:47,458] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-24 16:26:47,459] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-24 16:26:47,460] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-24 16:26:47,460] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,463] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-24 16:26:47,464] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,465] DEBUG - RelaxSchema.ref() : follow [kid-three]
[2010-01-24 16:26:47,466] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-three
[2010-01-24 16:26:47,466] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,466] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,468] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,468] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,469] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,469] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,469] DEBUG - RelaxClass() : ancestor count for [KidThree] = 1
[2010-01-24 16:26:47,469] DEBUG - RelaxSchema.recurse() : element KidThree
[2010-01-24 16:26:47,470] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-24 16:26:47,470] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-24 16:26:47,472] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-24 16:26:47,472] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,473] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-24 16:26:47,473] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,475] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-24 16:26:47,475] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,476] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-24 16:26:47,476] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,481] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Sort.rng]
[2010-01-24 16:26:47,484] DEBUG - FileResolver.resolveEntity() : looking for [SortChild.rng]
[2010-01-24 16:26:47,491] DEBUG - RelaxSchema.addBaseFields() : evaluating sort
[2010-01-24 16:26:47,491] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,491] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,492] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,492] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,493] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,493] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,494] DEBUG - RelaxSchema.recurse() : element Sort
[2010-01-24 16:26:47,495] DEBUG - RelaxClass() : ancestor count for [Sort1] = 1
[2010-01-24 16:26:47,495] DEBUG - RelaxSchema.recurse() : element Sort1
[2010-01-24 16:26:47,496] DEBUG - RelaxClass() : ancestor count for [Sort2] = 1
[2010-01-24 16:26:47,496] DEBUG - RelaxSchema.recurse() : element Sort2
[2010-01-24 16:26:47,497] DEBUG - RelaxClass() : ancestor count for [SortChild.rng] = 1
[2010-01-24 16:26:47,498] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-24 16:26:47,498] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,500] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-24 16:26:47,500] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,503] INFO  - RelaxSchema.parse() : parse [test/schema/relax/SortChild.rng]
[2010-01-24 16:26:47,508] DEBUG - RelaxSchema.addBaseFields() : evaluating sort-child
[2010-01-24 16:26:47,508] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,509] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,509] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,509] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,509] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,509] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,510] DEBUG - RelaxSchema.recurse() : element SortChild
[2010-01-24 16:26:47,510] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-24 16:26:47,511] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-24 16:26:47,515] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-24 16:26:47,515] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,516] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-24 16:26:47,516] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,518] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Test.rng]
[2010-01-24 16:26:47,530] DEBUG - FileResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:26:47,532] DEBUG - FileResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:26:47,542] DEBUG - RelaxSchema.addBaseFields() : evaluating address-book
[2010-01-24 16:26:47,542] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,543] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,543] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,545] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,545] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,546] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,546] DEBUG - RelaxSchema.recurse() : element AddressBook
[2010-01-24 16:26:47,548] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-24 16:26:47,548] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-24 16:26:47,551] DEBUG - RelaxClass() : ancestor count for [Email] = 1
[2010-01-24 16:26:47,552] DEBUG - RelaxSchema.recurse() : element Email
[2010-01-24 16:26:47,553] DEBUG - RelaxClass() : ancestor count for [Enabled] = 1
[2010-01-24 16:26:47,553] DEBUG - RelaxSchema.recurse() : element Enabled
[2010-01-24 16:26:47,555] DEBUG - RelaxSchema.ref() : follow [address]
[2010-01-24 16:26:47,556] DEBUG - RelaxSchema.addBaseFields() : evaluating address
[2010-01-24 16:26:47,556] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,557] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,557] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,557] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,558] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,558] DEBUG - RelaxClass() : ancestor count for [Address] = 1
[2010-01-24 16:26:47,558] DEBUG - RelaxSchema.recurse() : element Address
[2010-01-24 16:26:47,564] DEBUG - RelaxClass() : ancestor count for [Street] = 2
[2010-01-24 16:26:47,564] DEBUG - RelaxSchema.recurse() : element Street
[2010-01-24 16:26:47,564] DEBUG - RelaxClass() : ancestor count for [City] = 2
[2010-01-24 16:26:47,565] DEBUG - RelaxSchema.recurse() : element City
[2010-01-24 16:26:47,566] DEBUG - RelaxClass() : ancestor count for [State] = 2
[2010-01-24 16:26:47,566] DEBUG - RelaxSchema.recurse() : element State
[2010-01-24 16:26:47,567] DEBUG - RelaxClass() : ancestor count for [ZipCode] = 2
[2010-01-24 16:26:47,567] DEBUG - RelaxSchema.recurse() : element ZipCode
[2010-01-24 16:26:47,573] DEBUG - RelaxClass() : ancestor count for [Region] = 2
[2010-01-24 16:26:47,574] DEBUG - RelaxSchema.recurse() : element Region
[2010-01-24 16:26:47,576] DEBUG - RelaxClass() : ancestor count for [Region] = 2
[2010-01-24 16:26:47,577] DEBUG - RelaxSchema.recurse() : element Region
[2010-01-24 16:26:47,578] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-24 16:26:47,578] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,580] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-24 16:26:47,580] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,582] DEBUG - RelaxSchema.ref() : follow [status]
[2010-01-24 16:26:47,583] DEBUG - RelaxClass() : ancestor count for [Status] = 1
[2010-01-24 16:26:47,583] DEBUG - RelaxSchema.recurse() : element Status
[2010-01-24 16:26:47,585] DEBUG - RelaxSchema.ref() : follow [statistics]
[2010-01-24 16:26:47,586] DEBUG - RelaxSchema.addBaseFields() : evaluating statistics
[2010-01-24 16:26:47,586] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,586] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,586] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,586] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,586] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,588] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,589] DEBUG - RelaxClass() : ancestor count for [Statistics] = 1
[2010-01-24 16:26:47,589] DEBUG - RelaxSchema.recurse() : element Statistics
[2010-01-24 16:26:47,591] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-24 16:26:47,591] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,592] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-24 16:26:47,592] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,593] DEBUG - RelaxClass() : ancestor count for [Favorite.rng] = 1
[2010-01-24 16:26:47,594] DEBUG - RelaxClass() : ancestor count for [Favorite.rng] = 1
[2010-01-24 16:26:47,594] DEBUG - RelaxSchema.addBaseFields() : evaluating remover
[2010-01-24 16:26:47,594] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,594] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,594] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,596] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,596] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,597] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,598] DEBUG - RelaxClass() : ancestor count for [Remover] = 1
[2010-01-24 16:26:47,598] DEBUG - RelaxSchema.recurse() : element Remover
[2010-01-24 16:26:47,598] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-24 16:26:47,598] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-24 16:26:47,599] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-24 16:26:47,600] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,600] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-24 16:26:47,600] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,602] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-24 16:26:47,602] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,603] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-24 16:26:47,603] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,675] DEBUG - RelaxSchema.addBaseFields() : evaluating cache
[2010-01-24 16:26:47,676] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,676] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,676] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,676] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,677] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,677] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,677] DEBUG - RelaxSchema.recurse() : element Cache
[2010-01-24 16:26:47,678] DEBUG - RelaxClass() : ancestor count for [Oid] = 1
[2010-01-24 16:26:47,678] DEBUG - RelaxSchema.recurse() : element Oid
[2010-01-24 16:26:47,686] DEBUG - RelaxClass() : ancestor count for [Otype] = 1
[2010-01-24 16:26:47,686] DEBUG - RelaxSchema.recurse() : element Otype
[2010-01-24 16:26:47,688] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-24 16:26:47,688] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,689] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-24 16:26:47,689] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,693] DEBUG - RelaxSchema.addBaseFields() : evaluating interleave
[2010-01-24 16:26:47,693] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-24 16:26:47,693] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-24 16:26:47,693] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-24 16:26:47,694] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-24 16:26:47,694] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-24 16:26:47,694] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-24 16:26:47,694] DEBUG - RelaxSchema.recurse() : element Interleave
[2010-01-24 16:26:47,695] DEBUG - RelaxClass() : ancestor count for [Ordering] = 1
[2010-01-24 16:26:47,695] DEBUG - RelaxSchema.recurse() : element Ordering
[2010-01-24 16:26:47,696] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-24 16:26:47,696] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-24 16:26:47,698] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-24 16:26:47,698] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-24 16:26:47,703] DEBUG - DomainClass.resolveExternalRefs() : ext [Levelthree.rng]
[2010-01-24 16:26:47,708] DEBUG - DomainClass.resolveExternalRefs() : ext [interleave.rng]
[2010-01-24 16:26:47,709] DEBUG - DomainClass.resolveExternalRefs() : ext [SortChild.rng]
[2010-01-24 16:26:47,710] DEBUG - DomainClass.resolveExternalRefs() : ext [Favorite.rng]
[2010-01-24 16:26:47,726] INFO  - SchemaLoader.load() : load class [BoolTest]
[2010-01-24 16:26:48,349] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class BoolTest { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="bool-test"><optional><attribute name="available"><data type="boolean"/></attribute></optional><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Boolean.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['available','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        available(nullable : true,)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <available nullable ="true"/>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Boolean available
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "BoolTest".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:48,551] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [BoolTest]
[2010-01-24 16:26:48,551] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [BoolTest]
[2010-01-24 16:26:48,552] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:48,604] DEBUG - PersistenceLoader.addBaseClass() : load BoolTest
[2010-01-24 16:26:48,604] INFO  - SchemaLoader.load() : load class [Levelthree]
[2010-01-24 16:26:48,760] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Levelthree { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="levelthree"><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Levelthree.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['Leveltwo',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Levelthree".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:48,880] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Levelthree]
[2010-01-24 16:26:48,880] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Levelthree]
[2010-01-24 16:26:48,880] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:48,919] DEBUG - PersistenceLoader.addBaseClass() : load Levelthree
[2010-01-24 16:26:48,923] INFO  - SchemaLoader.load() : load class [Leveltwo]
[2010-01-24 16:26:49,061] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Leveltwo { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['levelthree','lastUpdated','created',]

    static final Collection<String> children = ['levelthree',]

    static final Collection<String> parents = ['Levelone',]

    // one-to-many
    static hasMany = [levelthree : Levelthree,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        levelthree(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <levelthree nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Long id
    Date lastUpdated
    Date created

    List    levelthree

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Leveltwo".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:49,078] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Leveltwo]
[2010-01-24 16:26:49,078] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Leveltwo]
[2010-01-24 16:26:49,078] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 1 properties
[2010-01-24 16:26:49,110] DEBUG - PersistenceLoader.addBaseClass() : load Leveltwo
[2010-01-24 16:26:49,110] INFO  - SchemaLoader.load() : load class [Levelone]
[2010-01-24 16:26:49,294] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Levelone { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="levelone"><oneOrMore><element name="leveltwo"><oneOrMore><externalRef href="Levelthree.rng"/></oneOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></oneOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Complex.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['leveltwo','lastUpdated','created',]

    static final Collection<String> children = ['leveltwo',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [leveltwo : Leveltwo,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        leveltwo(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <leveltwo nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Long id
    Date lastUpdated
    Date created

    List    leveltwo

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Levelone".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:49,312] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Levelone]
[2010-01-24 16:26:49,312] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Levelone]
[2010-01-24 16:26:49,312] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 1 properties
[2010-01-24 16:26:49,340] DEBUG - PersistenceLoader.addBaseClass() : load Levelone
[2010-01-24 16:26:49,340] INFO  - SchemaLoader.load() : load class [Favorite]
[2010-01-24 16:26:49,538] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Favorite { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="favorite" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><attribute name="user-id"><data type="integer"/></attribute><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Favorite.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['userId','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        userId(nullable : false,)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <userId nullable ="false"/>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer userId
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Favorite".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:49,554] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Favorite]
[2010-01-24 16:26:49,554] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Favorite]
[2010-01-24 16:26:49,554] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:49,581] DEBUG - PersistenceLoader.addBaseClass() : load Favorite
[2010-01-24 16:26:49,581] INFO  - SchemaLoader.load() : load class [Interleave]
[2010-01-24 16:26:49,675] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Interleave { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'
            ordering type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="interleave"><element name="ordering"><data type="string"><param name="maxLength">100000</param></data></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "interleave.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['ordering','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        ordering(maxSize : 100000,nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <ordering maxSize ="100000"nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String ordering
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Interleave".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:49,690] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Interleave]
[2010-01-24 16:26:49,690] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Interleave]
[2010-01-24 16:26:49,690] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:49,717] DEBUG - PersistenceLoader.addBaseClass() : load Interleave
[2010-01-24 16:26:49,717] INFO  - SchemaLoader.load() : load class [KidOne]
[2010-01-24 16:26:49,852] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidOne { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidOne".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:49,949] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidOne]
[2010-01-24 16:26:49,949] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidOne]
[2010-01-24 16:26:49,949] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:49,973] DEBUG - PersistenceLoader.addBaseClass() : load KidOne
[2010-01-24 16:26:49,973] INFO  - SchemaLoader.load() : load class [KidTwo]
[2010-01-24 16:26:50,107] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidTwo { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidTwo".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:50,121] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidTwo]
[2010-01-24 16:26:50,121] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidTwo]
[2010-01-24 16:26:50,121] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:50,146] DEBUG - PersistenceLoader.addBaseClass() : load KidTwo
[2010-01-24 16:26:50,146] INFO  - SchemaLoader.load() : load class [KidThree]
[2010-01-24 16:26:50,252] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidThree { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidThree".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:50,267] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidThree]
[2010-01-24 16:26:50,267] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidThree]
[2010-01-24 16:26:50,267] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:50,288] DEBUG - PersistenceLoader.addBaseClass() : load KidThree
[2010-01-24 16:26:50,288] INFO  - SchemaLoader.load() : load class [MixedKids]
[2010-01-24 16:26:50,474] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class MixedKids { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><define name="kid-one"><element name="kid-one"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="kid-two"><element name="kid-two"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="kid-three"><element name="kid-three"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><start><element name="mixed-kids"><element name="title"><text/></element><interleave><zeroOrMore><ref name="kid-one"/></zeroOrMore><zeroOrMore><ref name="kid-two"/></zeroOrMore></interleave><zeroOrMore><ref name="kid-three"/></zeroOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Mixed.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','interleave','kidOne','kidTwo','kidThree','lastUpdated','created',]

    static final Collection<String> children = ['interleave','kidOne','kidTwo','kidThree',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [kidOne : KidOne,kidTwo : KidTwo,kidThree : KidThree,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        interleave(nullable : true,)
        kidOne(nullable : true,)
        kidTwo(nullable : true,)
        kidThree(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <interleave nullable ="true"/>
            <kidOne nullable ="true"/>
            <kidTwo nullable ="true"/>
            <kidThree nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    Interleave interleave


    // fields
    String title
    Long id
    Date lastUpdated
    Date created

    List    kidOne
    List    kidTwo
    List    kidThree

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "MixedKids".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:50,490] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [MixedKids]
[2010-01-24 16:26:50,490] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [MixedKids]
[2010-01-24 16:26:50,490] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 3 properties
[2010-01-24 16:26:50,534] DEBUG - PersistenceLoader.addBaseClass() : load MixedKids
[2010-01-24 16:26:50,535] INFO  - SchemaLoader.load() : load class [SortChild]
[2010-01-24 16:26:50,623] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class SortChild { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="sort-child" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "SortChild.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['Sort',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "SortChild".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:50,643] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [SortChild]
[2010-01-24 16:26:50,643] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [SortChild]
[2010-01-24 16:26:50,643] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:50,667] DEBUG - PersistenceLoader.addBaseClass() : load SortChild
[2010-01-24 16:26:50,667] INFO  - SchemaLoader.load() : load class [Sort]
[2010-01-24 16:26:50,746] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Sort { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="sort" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><element name="sort1"><text/></element><element name="sort2"><text/></element><optional><externalRef href="SortChild.rng"/></optional><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Sort.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['sort1','sort2','sortChild','lastUpdated','created',]

    static final Collection<String> children = ['sortChild',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        sort1(nullable : false,)
        sort2(nullable : false,)
        sortChild(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <sort1 nullable ="false"/>
            <sort2 nullable ="false"/>
            <sortChild nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    SortChild sortChild


    // fields
    String sort1
    String sort2
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Sort".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:50,763] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Sort]
[2010-01-24 16:26:50,763] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Sort]
[2010-01-24 16:26:50,763] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:50,784] DEBUG - PersistenceLoader.addBaseClass() : load Sort
[2010-01-24 16:26:50,785] INFO  - SchemaLoader.load() : load class [Address]
[2010-01-24 16:26:50,899] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Address { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id','type',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['street','city','state','zipCode','region','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        id(nullable : true,)
        type(nullable : false,inList : ["home","work",], )
        street(nullable : false,)
        city(nullable : false,)
        state(nullable : false,)
        zipCode(nullable : false,)
        region(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <id nullable ="true"/>
            <type nullable ="false"inList ="["home"""work""]" />
            <street nullable ="false"/>
            <city nullable ="false"/>
            <state nullable ="false"/>
            <zipCode nullable ="false"/>
            <region nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer id
    String type
    String[] street
    String city
    String state
    Integer zipCode
    String[] region
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Address".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:50,913] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Address]
[2010-01-24 16:26:50,914] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Address]
[2010-01-24 16:26:50,914] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:51,026] DEBUG - PersistenceLoader.addBaseClass() : load Address
[2010-01-24 16:26:51,026] INFO  - SchemaLoader.load() : load class [Statistics]
[2010-01-24 16:26:51,101] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Statistics { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['accessed','size','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        accessed(nullable : false,)
        size(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <accessed nullable ="false"/>
            <size nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer accessed
    Long size
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Statistics".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:51,113] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Statistics]
[2010-01-24 16:26:51,113] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Statistics]
[2010-01-24 16:26:51,114] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:51,135] DEBUG - PersistenceLoader.addBaseClass() : load Statistics
[2010-01-24 16:26:51,135] INFO  - SchemaLoader.load() : load class [Remover]
[2010-01-24 16:26:51,206] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Remover { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Remover".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:51,224] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Remover]
[2010-01-24 16:26:51,225] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Remover]
[2010-01-24 16:26:51,225] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:51,241] DEBUG - PersistenceLoader.addBaseClass() : load Remover
[2010-01-24 16:26:51,241] INFO  - SchemaLoader.load() : load class [AddressBook]
[2010-01-24 16:26:51,316] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class AddressBook { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><define name="address"><element name="address"><optional><attribute name="id"><data type="integer"/></attribute></optional><attribute name="type"><choice><value>home</value><value>work</value></choice></attribute><oneOrMore><element name="street"><text/></element></oneOrMore><element name="city"><text/></element><element name="state"><text/></element><element name="zip-code"><data type="integer"/></element><optional><element name="region"><text/></element><element name="region"><text/></element></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="status"><element name="status"><choice><value>new</value><value>reviewed</value></choice></element></define><define name="statistics"><element name="statistics"><attribute name="accessed"><data type="integer"/></attribute><attribute name="size"><data type="long"/></attribute><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><start><element name="address-book"><optional><attribute name="address-count"><text/></attribute></optional><element name="name"><data type="string"><param name="maxLength">100</param></data></element><optional><element name="email"><text/></element></optional><optional><element name="enabled"><empty/></element></optional><zeroOrMore><ref name="address"/></zeroOrMore><optional><ref name="status"/></optional><ref name="statistics"/><externalRef href="Favorite.rng"/><externalRef href="Favorite.rng"/><optional><element name="remover"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></optional><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Test.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['addressCount','id',]

    // primitives that should be empty
    static final Collection<String> empty = ['enabled',]

    static final Collection<String> elements = ['name','email','enabled','address','status','statistics','favorite','remover','lastUpdated','created',]

    static final Collection<String> children = ['address','statistics','favorite','remover',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [address : Address,favorite : Favorite,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        addressCount(nullable : true,)
        name(maxSize : 100,nullable : false,)
        email(nullable : true,)
        enabled(nullable : false,)
        address(nullable : true,)
        status(nullable : true,inList : ["new","reviewed",], )
        statistics(nullable : false,)
        favorite(nullable : false,)
        remover(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <addressCount nullable ="true"/>
            <name maxSize ="100"nullable ="false"/>
            <email nullable ="true"/>
            <enabled nullable ="false"/>
            <address nullable ="true"/>
            <status nullable ="true"inList ="["new"""reviewed""]" />
            <statistics nullable ="false"/>
            <favorite nullable ="false"/>
            <remover nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    Statistics statistics
    Remover remover


    // fields
    String addressCount
    String name
    String email
    Boolean enabled
    String status
    Long id
    Date lastUpdated
    Date created

    List    address
    List    favorite

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "AddressBook".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:51,346] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [AddressBook]
[2010-01-24 16:26:51,346] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [AddressBook]
[2010-01-24 16:26:51,346] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 2 properties
[2010-01-24 16:26:51,376] DEBUG - PersistenceLoader.addBaseClass() : load AddressBook
[2010-01-24 16:26:51,376] INFO  - SchemaLoader.load() : load class [Cache]
[2010-01-24 16:26:51,546] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Cache { 

    static mapping = { 
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="cache"><element name="oid"><text/></element><element name="otype"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "cache.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['oid','otype','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        oid(nullable : false,)
        otype(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <oid nullable ="false"/>
            <otype nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String oid
    String otype
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Cache".hashCode() + id.hashCode()
    }

}

[2010-01-24 16:26:51,560] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Cache]
[2010-01-24 16:26:51,560] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Cache]
[2010-01-24 16:26:51,560] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-24 16:26:51,579] DEBUG - PersistenceLoader.addBaseClass() : load Cache
[2010-01-24 16:26:52,171] INFO  - Hibernate 3.2.1
[2010-01-24 16:26:52,175] INFO  - hibernate.properties not found
[2010-01-24 16:26:52,177] INFO  - Bytecode provider name : cglib
[2010-01-24 16:26:52,179] INFO  - using JDK 1.4 java.sql.Timestamp handling
[2010-01-24 16:26:52,232] INFO  - configuring from url: file:/Users/rgrey/Work/persistence/etc/hibernate.cfg.xml
[2010-01-24 16:26:52,415] INFO  - Configured SessionFactory: null
[2010-01-24 16:26:52,440] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:52,487] INFO  - Running hbm2ddl schema update
[2010-01-24 16:26:52,487] INFO  - fetching database metadata
[2010-01-24 16:26:52,490] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:52,490] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:52,490] INFO  - autocommit mode: false
[2010-01-24 16:26:52,797] INFO  - MLog clients using log4j logging.
[2010-01-24 16:26:52,821] INFO  - Initializing c3p0-0.9.0 [built 11-July-2005 00:43:29 -0400; debug? true; trace: 10]
[2010-01-24 16:26:52,939] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@7ecb4e [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@b0fedc [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> b0fedc, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@97bb80 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 97bb80, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 7ecb4e, numHelperThreads -> 3 ]
[2010-01-24 16:26:53,530] INFO  - updating schema
[2010-01-24 16:26:54,166] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:54,167] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:54,167] INFO  - autocommit mode: false
[2010-01-24 16:26:54,273] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@b384a [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@8e7833 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 8e7833, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@eea109 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> eea109, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> b384a, numHelperThreads -> 3 ]
[2010-01-24 16:26:54,277] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:54,277] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:54,283] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:54,285] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:54,287] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:54,287] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:54,287] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:54,287] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:54,287] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:54,287] INFO  - Connection release mode: auto
[2010-01-24 16:26:54,288] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:54,288] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:54,288] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:54,288] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:54,288] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:54,290] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:54,290] INFO  - Query language substitutions: {}
[2010-01-24 16:26:54,290] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:54,291] INFO  - Second-level cache: enabled
[2010-01-24 16:26:54,291] INFO  - Query cache: enabled
[2010-01-24 16:26:54,291] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:54,293] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:54,294] INFO  - Cache region prefix: arv
[2010-01-24 16:26:54,294] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:54,294] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:54,296] INFO  - Statistics: disabled
[2010-01-24 16:26:54,296] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:54,297] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:54,773] INFO  - table not found: address
[2010-01-24 16:26:54,798] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:54,798] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:54,798] INFO  - autocommit mode: false
[2010-01-24 16:26:54,883] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@d81cbd [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@ed7eaa [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> ed7eaa, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@96f20e [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 96f20e, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> d81cbd, numHelperThreads -> 3 ]
[2010-01-24 16:26:54,884] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:54,884] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:54,884] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:54,885] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:54,885] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:54,885] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:54,885] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:54,885] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:54,885] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:54,885] INFO  - Connection release mode: auto
[2010-01-24 16:26:54,885] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:54,885] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:54,885] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:54,885] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:54,885] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:54,885] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:54,885] INFO  - Query language substitutions: {}
[2010-01-24 16:26:54,885] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:54,885] INFO  - Second-level cache: enabled
[2010-01-24 16:26:54,885] INFO  - Query cache: enabled
[2010-01-24 16:26:54,886] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:54,886] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:54,886] INFO  - Cache region prefix: arv
[2010-01-24 16:26:54,886] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:54,886] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:54,886] INFO  - Statistics: disabled
[2010-01-24 16:26:54,886] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:54,886] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:54,887] INFO  - table not found: address_book
[2010-01-24 16:26:54,888] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:54,888] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:54,888] INFO  - autocommit mode: false
[2010-01-24 16:26:54,976] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@34b3f1 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@c61868 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> c61868, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@d54d4d [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> d54d4d, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 34b3f1, numHelperThreads -> 3 ]
[2010-01-24 16:26:54,977] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:54,977] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:54,978] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:54,978] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:54,978] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:54,978] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:54,978] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:54,978] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:54,978] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:54,978] INFO  - Connection release mode: auto
[2010-01-24 16:26:54,979] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:54,979] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:54,979] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:54,979] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:54,979] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:54,979] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:54,979] INFO  - Query language substitutions: {}
[2010-01-24 16:26:54,979] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:54,979] INFO  - Second-level cache: enabled
[2010-01-24 16:26:54,979] INFO  - Query cache: enabled
[2010-01-24 16:26:54,979] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:54,979] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:54,979] INFO  - Cache region prefix: arv
[2010-01-24 16:26:54,979] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:54,979] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:54,979] INFO  - Statistics: disabled
[2010-01-24 16:26:54,979] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:54,980] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:54,981] INFO  - table not found: address_book_address
[2010-01-24 16:26:54,981] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:54,981] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:54,981] INFO  - autocommit mode: false
[2010-01-24 16:26:55,070] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@4f672e [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@2863d7 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 2863d7, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@a76e06 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> a76e06, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 4f672e, numHelperThreads -> 3 ]
[2010-01-24 16:26:55,072] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,072] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,072] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:55,075] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:55,075] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:55,075] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:55,075] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:55,075] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:55,075] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:55,075] INFO  - Connection release mode: auto
[2010-01-24 16:26:55,076] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:55,076] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:55,076] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:55,076] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:55,076] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:55,076] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:55,076] INFO  - Query language substitutions: {}
[2010-01-24 16:26:55,076] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:55,076] INFO  - Second-level cache: enabled
[2010-01-24 16:26:55,076] INFO  - Query cache: enabled
[2010-01-24 16:26:55,076] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:55,076] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:55,076] INFO  - Cache region prefix: arv
[2010-01-24 16:26:55,076] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:55,076] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:55,076] INFO  - Statistics: disabled
[2010-01-24 16:26:55,077] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:55,077] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:55,080] INFO  - table not found: address_book_favorite
[2010-01-24 16:26:55,080] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:55,080] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:55,080] INFO  - autocommit mode: false
[2010-01-24 16:26:55,165] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@356966 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@c7208e [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> c7208e, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@1010ec [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 1010ec, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 356966, numHelperThreads -> 3 ]
[2010-01-24 16:26:55,167] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,167] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,167] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:55,167] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:55,167] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:55,167] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:55,167] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:55,169] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:55,169] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:55,169] INFO  - Connection release mode: auto
[2010-01-24 16:26:55,169] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:55,169] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:55,169] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:55,169] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:55,169] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:55,169] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:55,170] INFO  - Query language substitutions: {}
[2010-01-24 16:26:55,170] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:55,170] INFO  - Second-level cache: enabled
[2010-01-24 16:26:55,170] INFO  - Query cache: enabled
[2010-01-24 16:26:55,170] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:55,170] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:55,170] INFO  - Cache region prefix: arv
[2010-01-24 16:26:55,170] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:55,170] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:55,170] INFO  - Statistics: disabled
[2010-01-24 16:26:55,170] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:55,170] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:55,171] INFO  - table not found: bool_test
[2010-01-24 16:26:55,172] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:55,172] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:55,172] INFO  - autocommit mode: false
[2010-01-24 16:26:55,257] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@8a538f [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@af3289 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> af3289, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@9f78ba [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 9f78ba, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 8a538f, numHelperThreads -> 3 ]
[2010-01-24 16:26:55,258] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,258] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,258] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:55,259] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:55,259] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:55,259] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:55,259] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:55,259] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:55,259] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:55,259] INFO  - Connection release mode: auto
[2010-01-24 16:26:55,259] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:55,259] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:55,259] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:55,259] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:55,259] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:55,259] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:55,259] INFO  - Query language substitutions: {}
[2010-01-24 16:26:55,259] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:55,259] INFO  - Second-level cache: enabled
[2010-01-24 16:26:55,259] INFO  - Query cache: enabled
[2010-01-24 16:26:55,259] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:55,260] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:55,260] INFO  - Cache region prefix: arv
[2010-01-24 16:26:55,260] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:55,260] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:55,260] INFO  - Statistics: disabled
[2010-01-24 16:26:55,260] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:55,260] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:55,261] INFO  - table not found: cache
[2010-01-24 16:26:55,261] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:55,261] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:55,261] INFO  - autocommit mode: false
[2010-01-24 16:26:55,349] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@1cd25f [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@efcaaf [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> efcaaf, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@dac9b2 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> dac9b2, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 1cd25f, numHelperThreads -> 3 ]
[2010-01-24 16:26:55,350] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,350] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,350] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:55,351] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:55,351] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:55,351] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:55,351] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:55,351] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:55,351] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:55,352] INFO  - Connection release mode: auto
[2010-01-24 16:26:55,352] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:55,352] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:55,352] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:55,352] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:55,352] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:55,352] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:55,352] INFO  - Query language substitutions: {}
[2010-01-24 16:26:55,352] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:55,352] INFO  - Second-level cache: enabled
[2010-01-24 16:26:55,352] INFO  - Query cache: enabled
[2010-01-24 16:26:55,352] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:55,352] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:55,352] INFO  - Cache region prefix: arv
[2010-01-24 16:26:55,352] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:55,352] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:55,352] INFO  - Statistics: disabled
[2010-01-24 16:26:55,352] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:55,352] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:55,353] INFO  - table not found: favorite
[2010-01-24 16:26:55,354] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:55,354] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:55,355] INFO  - autocommit mode: false
[2010-01-24 16:26:55,440] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@c05dfa [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@2ec880 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 2ec880, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@71ff47 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 71ff47, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> c05dfa, numHelperThreads -> 3 ]
[2010-01-24 16:26:55,441] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,441] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,441] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:55,442] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:55,442] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:55,442] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:55,442] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:55,442] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:55,442] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:55,442] INFO  - Connection release mode: auto
[2010-01-24 16:26:55,442] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:55,442] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:55,442] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:55,442] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:55,442] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:55,442] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:55,442] INFO  - Query language substitutions: {}
[2010-01-24 16:26:55,442] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:55,442] INFO  - Second-level cache: enabled
[2010-01-24 16:26:55,442] INFO  - Query cache: enabled
[2010-01-24 16:26:55,442] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:55,442] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:55,442] INFO  - Cache region prefix: arv
[2010-01-24 16:26:55,442] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:55,442] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:55,442] INFO  - Statistics: disabled
[2010-01-24 16:26:55,442] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:55,443] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:55,444] INFO  - table not found: interleave
[2010-01-24 16:26:55,444] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:55,444] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:55,444] INFO  - autocommit mode: false
[2010-01-24 16:26:55,528] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@979091 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@1cb6f [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1cb6f, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@83b969 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 83b969, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 979091, numHelperThreads -> 3 ]
[2010-01-24 16:26:55,530] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,530] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,530] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:55,531] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:55,531] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:55,531] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:55,531] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:55,531] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:55,531] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:55,531] INFO  - Connection release mode: auto
[2010-01-24 16:26:55,531] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:55,531] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:55,531] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:55,531] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:55,531] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:55,531] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:55,531] INFO  - Query language substitutions: {}
[2010-01-24 16:26:55,531] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:55,531] INFO  - Second-level cache: enabled
[2010-01-24 16:26:55,531] INFO  - Query cache: enabled
[2010-01-24 16:26:55,531] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:55,531] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:55,531] INFO  - Cache region prefix: arv
[2010-01-24 16:26:55,531] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:55,531] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:55,531] INFO  - Statistics: disabled
[2010-01-24 16:26:55,531] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:55,531] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:55,538] INFO  - table not found: kid_one
[2010-01-24 16:26:55,539] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:55,539] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:55,539] INFO  - autocommit mode: false
[2010-01-24 16:26:55,624] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@6da498 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@c83da6 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> c83da6, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@15e17 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 15e17, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 6da498, numHelperThreads -> 3 ]
[2010-01-24 16:26:55,627] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,627] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,627] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:55,627] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:55,627] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:55,627] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:55,627] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:55,627] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:55,627] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:55,627] INFO  - Connection release mode: auto
[2010-01-24 16:26:55,627] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:55,627] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:55,627] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:55,628] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:55,628] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:55,628] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:55,628] INFO  - Query language substitutions: {}
[2010-01-24 16:26:55,628] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:55,628] INFO  - Second-level cache: enabled
[2010-01-24 16:26:55,629] INFO  - Query cache: enabled
[2010-01-24 16:26:55,629] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:55,629] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:55,629] INFO  - Cache region prefix: arv
[2010-01-24 16:26:55,629] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:55,629] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:55,630] INFO  - Statistics: disabled
[2010-01-24 16:26:55,630] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:55,630] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:55,631] INFO  - table not found: kid_three
[2010-01-24 16:26:55,631] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:55,631] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:55,631] INFO  - autocommit mode: false
[2010-01-24 16:26:55,714] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@35d9f6 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@fcf906 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> fcf906, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@73e5f0 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 73e5f0, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 35d9f6, numHelperThreads -> 3 ]
[2010-01-24 16:26:55,716] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,716] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,716] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:55,716] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:55,716] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:55,716] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:55,716] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:55,716] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:55,716] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:55,716] INFO  - Connection release mode: auto
[2010-01-24 16:26:55,716] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:55,717] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:55,717] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:55,717] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:55,717] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:55,717] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:55,717] INFO  - Query language substitutions: {}
[2010-01-24 16:26:55,717] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:55,717] INFO  - Second-level cache: enabled
[2010-01-24 16:26:55,717] INFO  - Query cache: enabled
[2010-01-24 16:26:55,717] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:55,717] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:55,717] INFO  - Cache region prefix: arv
[2010-01-24 16:26:55,717] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:55,717] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:55,717] INFO  - Statistics: disabled
[2010-01-24 16:26:55,717] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:55,717] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:55,718] INFO  - table not found: kid_two
[2010-01-24 16:26:55,718] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:55,718] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:55,719] INFO  - autocommit mode: false
[2010-01-24 16:26:55,804] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@b8e978 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@6b28b4 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 6b28b4, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@10befe [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 10befe, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> b8e978, numHelperThreads -> 3 ]
[2010-01-24 16:26:55,805] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,805] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,805] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:55,805] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:55,805] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:55,805] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:55,806] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:55,806] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:55,806] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:55,806] INFO  - Connection release mode: auto
[2010-01-24 16:26:55,806] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:55,806] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:55,806] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:55,806] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:55,806] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:55,806] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:55,806] INFO  - Query language substitutions: {}
[2010-01-24 16:26:55,806] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:55,806] INFO  - Second-level cache: enabled
[2010-01-24 16:26:55,806] INFO  - Query cache: enabled
[2010-01-24 16:26:55,806] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:55,806] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:55,806] INFO  - Cache region prefix: arv
[2010-01-24 16:26:55,806] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:55,806] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:55,807] INFO  - Statistics: disabled
[2010-01-24 16:26:55,807] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:55,807] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:55,808] INFO  - table not found: levelone
[2010-01-24 16:26:55,808] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:55,809] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:55,809] INFO  - autocommit mode: false
[2010-01-24 16:26:55,893] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@2ce5a2 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@14397 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 14397, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@cc1b02 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> cc1b02, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 2ce5a2, numHelperThreads -> 3 ]
[2010-01-24 16:26:55,894] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,894] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,894] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:55,895] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:55,895] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:55,895] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:55,895] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:55,895] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:55,895] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:55,895] INFO  - Connection release mode: auto
[2010-01-24 16:26:55,895] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:55,895] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:55,895] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:55,895] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:55,895] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:55,895] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:55,895] INFO  - Query language substitutions: {}
[2010-01-24 16:26:55,895] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:55,895] INFO  - Second-level cache: enabled
[2010-01-24 16:26:55,895] INFO  - Query cache: enabled
[2010-01-24 16:26:55,895] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:55,895] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:55,895] INFO  - Cache region prefix: arv
[2010-01-24 16:26:55,895] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:55,895] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:55,896] INFO  - Statistics: disabled
[2010-01-24 16:26:55,896] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:55,896] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:55,897] INFO  - table not found: levelone_leveltwo
[2010-01-24 16:26:55,897] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:55,897] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:55,897] INFO  - autocommit mode: false
[2010-01-24 16:26:55,981] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@5292f [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@7403a7 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 7403a7, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@bdcf4a [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> bdcf4a, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 5292f, numHelperThreads -> 3 ]
[2010-01-24 16:26:55,982] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,982] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:55,982] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:55,983] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:55,983] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:55,983] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:55,983] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:55,983] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:55,983] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:55,983] INFO  - Connection release mode: auto
[2010-01-24 16:26:55,983] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:55,983] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:55,983] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:55,983] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:55,983] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:55,983] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:55,983] INFO  - Query language substitutions: {}
[2010-01-24 16:26:55,983] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:55,983] INFO  - Second-level cache: enabled
[2010-01-24 16:26:55,983] INFO  - Query cache: enabled
[2010-01-24 16:26:55,983] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:55,983] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:55,983] INFO  - Cache region prefix: arv
[2010-01-24 16:26:55,983] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:55,983] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:55,983] INFO  - Statistics: disabled
[2010-01-24 16:26:55,983] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:55,983] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:55,985] INFO  - table not found: levelthree
[2010-01-24 16:26:55,985] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:55,985] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:55,985] INFO  - autocommit mode: false
[2010-01-24 16:26:56,099] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@e30613 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@63d40c [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 63d40c, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@e6092a [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> e6092a, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> e30613, numHelperThreads -> 3 ]
[2010-01-24 16:26:56,100] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,100] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,101] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:56,101] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:56,101] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:56,101] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:56,101] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:56,102] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:56,102] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:56,102] INFO  - Connection release mode: auto
[2010-01-24 16:26:56,102] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:56,102] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:56,102] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:56,102] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:56,102] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:56,102] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:56,102] INFO  - Query language substitutions: {}
[2010-01-24 16:26:56,102] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:56,102] INFO  - Second-level cache: enabled
[2010-01-24 16:26:56,102] INFO  - Query cache: enabled
[2010-01-24 16:26:56,102] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:56,102] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:56,102] INFO  - Cache region prefix: arv
[2010-01-24 16:26:56,102] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:56,102] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:56,102] INFO  - Statistics: disabled
[2010-01-24 16:26:56,102] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:56,102] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:56,103] INFO  - table not found: leveltwo
[2010-01-24 16:26:56,104] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:56,104] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:56,104] INFO  - autocommit mode: false
[2010-01-24 16:26:56,193] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@aa7439 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@cb4a21 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> cb4a21, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@73399c [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 73399c, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> aa7439, numHelperThreads -> 3 ]
[2010-01-24 16:26:56,195] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,195] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,195] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:56,196] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:56,196] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:56,196] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:56,196] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:56,196] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:56,196] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:56,196] INFO  - Connection release mode: auto
[2010-01-24 16:26:56,196] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:56,196] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:56,196] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:56,196] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:56,196] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:56,197] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:56,197] INFO  - Query language substitutions: {}
[2010-01-24 16:26:56,197] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:56,197] INFO  - Second-level cache: enabled
[2010-01-24 16:26:56,197] INFO  - Query cache: enabled
[2010-01-24 16:26:56,197] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:56,197] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:56,197] INFO  - Cache region prefix: arv
[2010-01-24 16:26:56,197] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:56,198] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:56,198] INFO  - Statistics: disabled
[2010-01-24 16:26:56,198] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:56,198] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:56,200] INFO  - table not found: leveltwo_levelthree
[2010-01-24 16:26:56,201] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:56,201] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:56,201] INFO  - autocommit mode: false
[2010-01-24 16:26:56,295] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@1792ae [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@d1e11 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> d1e11, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@9facda [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 9facda, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 1792ae, numHelperThreads -> 3 ]
[2010-01-24 16:26:56,296] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,296] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,298] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:56,299] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:56,299] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:56,299] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:56,299] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:56,299] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:56,299] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:56,299] INFO  - Connection release mode: auto
[2010-01-24 16:26:56,299] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:56,299] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:56,300] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:56,300] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:56,300] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:56,300] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:56,300] INFO  - Query language substitutions: {}
[2010-01-24 16:26:56,300] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:56,300] INFO  - Second-level cache: enabled
[2010-01-24 16:26:56,300] INFO  - Query cache: enabled
[2010-01-24 16:26:56,300] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:56,300] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:56,300] INFO  - Cache region prefix: arv
[2010-01-24 16:26:56,300] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:56,300] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:56,300] INFO  - Statistics: disabled
[2010-01-24 16:26:56,300] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:56,300] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:56,301] INFO  - table not found: mixed_kids
[2010-01-24 16:26:56,301] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:56,301] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:56,302] INFO  - autocommit mode: false
[2010-01-24 16:26:56,392] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@b1bd6c [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@67ba82 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 67ba82, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@36db0f [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 36db0f, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> b1bd6c, numHelperThreads -> 3 ]
[2010-01-24 16:26:56,394] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,394] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,394] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:56,394] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:56,394] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:56,394] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:56,395] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:56,395] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:56,395] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:56,395] INFO  - Connection release mode: auto
[2010-01-24 16:26:56,395] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:56,395] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:56,395] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:56,395] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:56,395] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:56,395] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:56,395] INFO  - Query language substitutions: {}
[2010-01-24 16:26:56,395] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:56,395] INFO  - Second-level cache: enabled
[2010-01-24 16:26:56,395] INFO  - Query cache: enabled
[2010-01-24 16:26:56,395] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:56,395] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:56,395] INFO  - Cache region prefix: arv
[2010-01-24 16:26:56,396] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:56,396] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:56,396] INFO  - Statistics: disabled
[2010-01-24 16:26:56,396] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:56,396] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:56,399] INFO  - table not found: mixed_kids_kid_one
[2010-01-24 16:26:56,402] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:56,402] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:56,402] INFO  - autocommit mode: false
[2010-01-24 16:26:56,491] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@90b1ba [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@f52df4 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> f52df4, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@ba19d2 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> ba19d2, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 90b1ba, numHelperThreads -> 3 ]
[2010-01-24 16:26:56,493] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,493] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,493] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:56,494] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:56,495] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:56,495] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:56,495] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:56,495] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:56,496] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:56,496] INFO  - Connection release mode: auto
[2010-01-24 16:26:56,496] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:56,496] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:56,496] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:56,496] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:56,496] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:56,496] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:56,496] INFO  - Query language substitutions: {}
[2010-01-24 16:26:56,496] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:56,496] INFO  - Second-level cache: enabled
[2010-01-24 16:26:56,496] INFO  - Query cache: enabled
[2010-01-24 16:26:56,496] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:56,496] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:56,496] INFO  - Cache region prefix: arv
[2010-01-24 16:26:56,496] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:56,496] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:56,496] INFO  - Statistics: disabled
[2010-01-24 16:26:56,496] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:56,496] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:56,497] INFO  - table not found: mixed_kids_kid_three
[2010-01-24 16:26:56,499] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:56,499] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:56,499] INFO  - autocommit mode: false
[2010-01-24 16:26:56,592] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@b562ae [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@26af3b [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 26af3b, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@67173d [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 67173d, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> b562ae, numHelperThreads -> 3 ]
[2010-01-24 16:26:56,594] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,594] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,595] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:56,595] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:56,595] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:56,595] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:56,595] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:56,595] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:56,595] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:56,595] INFO  - Connection release mode: auto
[2010-01-24 16:26:56,596] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:56,596] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:56,596] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:56,596] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:56,596] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:56,596] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:56,596] INFO  - Query language substitutions: {}
[2010-01-24 16:26:56,596] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:56,596] INFO  - Second-level cache: enabled
[2010-01-24 16:26:56,596] INFO  - Query cache: enabled
[2010-01-24 16:26:56,596] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:56,596] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:56,596] INFO  - Cache region prefix: arv
[2010-01-24 16:26:56,596] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:56,596] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:56,596] INFO  - Statistics: disabled
[2010-01-24 16:26:56,596] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:56,596] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:56,598] INFO  - table not found: mixed_kids_kid_two
[2010-01-24 16:26:56,599] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:56,599] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:56,599] INFO  - autocommit mode: false
[2010-01-24 16:26:56,690] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@9a1ef [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@450bb2 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 450bb2, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@c04e10 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> c04e10, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 9a1ef, numHelperThreads -> 3 ]
[2010-01-24 16:26:56,691] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,692] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,692] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:56,692] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:56,692] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:56,692] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:56,692] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:56,692] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:56,692] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:56,692] INFO  - Connection release mode: auto
[2010-01-24 16:26:56,692] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:56,692] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:56,692] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:56,692] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:56,692] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:56,692] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:56,692] INFO  - Query language substitutions: {}
[2010-01-24 16:26:56,692] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:56,692] INFO  - Second-level cache: enabled
[2010-01-24 16:26:56,693] INFO  - Query cache: enabled
[2010-01-24 16:26:56,693] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:56,693] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:56,693] INFO  - Cache region prefix: arv
[2010-01-24 16:26:56,693] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:56,693] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:56,693] INFO  - Statistics: disabled
[2010-01-24 16:26:56,693] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:56,693] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:56,695] INFO  - table not found: remover
[2010-01-24 16:26:56,696] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:56,696] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:56,696] INFO  - autocommit mode: false
[2010-01-24 16:26:56,781] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@9090df [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@5cd5e8 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 5cd5e8, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@cec2e3 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> cec2e3, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 9090df, numHelperThreads -> 3 ]
[2010-01-24 16:26:56,783] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,783] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,783] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:56,784] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:56,784] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:56,784] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:56,784] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:56,784] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:56,784] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:56,784] INFO  - Connection release mode: auto
[2010-01-24 16:26:56,784] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:56,784] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:56,784] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:56,784] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:56,784] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:56,784] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:56,784] INFO  - Query language substitutions: {}
[2010-01-24 16:26:56,784] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:56,784] INFO  - Second-level cache: enabled
[2010-01-24 16:26:56,784] INFO  - Query cache: enabled
[2010-01-24 16:26:56,784] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:56,784] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:56,784] INFO  - Cache region prefix: arv
[2010-01-24 16:26:56,784] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:56,784] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:56,785] INFO  - Statistics: disabled
[2010-01-24 16:26:56,785] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:56,785] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:56,786] INFO  - table not found: sort
[2010-01-24 16:26:56,786] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:56,786] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:56,786] INFO  - autocommit mode: false
[2010-01-24 16:26:56,874] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@4a8cdc [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@7500c0 [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 7500c0, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@54c970 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 54c970, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> 4a8cdc, numHelperThreads -> 3 ]
[2010-01-24 16:26:56,876] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,876] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,876] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:56,877] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:56,877] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:56,877] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:56,877] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:56,877] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:56,877] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:56,877] INFO  - Connection release mode: auto
[2010-01-24 16:26:56,877] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:56,877] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:56,877] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:56,877] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:56,877] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:56,877] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:56,877] INFO  - Query language substitutions: {}
[2010-01-24 16:26:56,877] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:56,877] INFO  - Second-level cache: enabled
[2010-01-24 16:26:56,877] INFO  - Query cache: enabled
[2010-01-24 16:26:56,877] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:56,877] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:56,877] INFO  - Cache region prefix: arv
[2010-01-24 16:26:56,877] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:56,877] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:56,877] INFO  - Statistics: disabled
[2010-01-24 16:26:56,877] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:56,881] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:56,883] INFO  - table not found: sort_child
[2010-01-24 16:26:56,883] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:56,883] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:56,883] INFO  - autocommit mode: false
[2010-01-24 16:26:56,990] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@cfa8c4 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@f3359b [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> f3359b, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@755839 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> 755839, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> cfa8c4, numHelperThreads -> 3 ]
[2010-01-24 16:26:56,991] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,991] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:56,991] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:56,992] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:56,992] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:56,992] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:56,992] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:56,992] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:56,992] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:56,992] INFO  - Connection release mode: auto
[2010-01-24 16:26:56,992] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:56,992] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:56,992] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:56,992] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:56,992] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:56,992] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:56,992] INFO  - Query language substitutions: {}
[2010-01-24 16:26:56,992] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:56,992] INFO  - Second-level cache: enabled
[2010-01-24 16:26:56,992] INFO  - Query cache: enabled
[2010-01-24 16:26:56,992] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:56,992] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:56,992] INFO  - Cache region prefix: arv
[2010-01-24 16:26:56,992] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:56,992] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:56,992] INFO  - Statistics: disabled
[2010-01-24 16:26:56,992] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:56,992] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:56,993] INFO  - table not found: statistics
[2010-01-24 16:26:56,995] INFO  - table not found: address
[2010-01-24 16:26:56,996] INFO  - table not found: address_book
[2010-01-24 16:26:56,999] INFO  - table not found: address_book_address
[2010-01-24 16:26:57,000] INFO  - table not found: address_book_favorite
[2010-01-24 16:26:57,001] INFO  - table not found: bool_test
[2010-01-24 16:26:57,002] INFO  - table not found: cache
[2010-01-24 16:26:57,003] INFO  - table not found: favorite
[2010-01-24 16:26:57,003] INFO  - table not found: interleave
[2010-01-24 16:26:57,004] INFO  - table not found: kid_one
[2010-01-24 16:26:57,005] INFO  - table not found: kid_three
[2010-01-24 16:26:57,006] INFO  - table not found: kid_two
[2010-01-24 16:26:57,007] INFO  - table not found: levelone
[2010-01-24 16:26:57,008] INFO  - table not found: levelone_leveltwo
[2010-01-24 16:26:57,009] INFO  - table not found: levelthree
[2010-01-24 16:26:57,010] INFO  - table not found: leveltwo
[2010-01-24 16:26:57,011] INFO  - table not found: leveltwo_levelthree
[2010-01-24 16:26:57,011] INFO  - table not found: mixed_kids
[2010-01-24 16:26:57,016] INFO  - table not found: mixed_kids_kid_one
[2010-01-24 16:26:57,018] INFO  - table not found: mixed_kids_kid_three
[2010-01-24 16:26:57,019] INFO  - table not found: mixed_kids_kid_two
[2010-01-24 16:26:57,020] INFO  - table not found: remover
[2010-01-24 16:26:57,021] INFO  - table not found: sort
[2010-01-24 16:26:57,022] INFO  - table not found: sort_child
[2010-01-24 16:26:57,022] INFO  - table not found: statistics
[2010-01-24 16:26:57,674] INFO  - table found: .APP.HIBERNATE_UNIQUE_KEY
[2010-01-24 16:26:57,674] INFO  - columns: [next_hi]
[2010-01-24 16:26:57,674] INFO  - foreign keys: []
[2010-01-24 16:26:57,674] INFO  - indexes: []
[2010-01-24 16:26:58,369] INFO  - schema update complete
[2010-01-24 16:26:58,370] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-24 16:26:58,370] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-24 16:26:58,376] INFO  - C3P0 using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-24 16:26:58,376] INFO  - Connection properties: {user=, password=****}
[2010-01-24 16:26:58,376] INFO  - autocommit mode: false
[2010-01-24 16:26:58,460] INFO  - Initializing c3p0 pool... com.mchange.v2.c3p0.PoolBackedDataSource@efd160 [ connectionPoolDataSource -> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource@b85c8e [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> b85c8e, idleConnectionTestPeriod -> 100, initialPoolSize -> 2, maxIdleTime -> 0, maxPoolSize -> 10, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 2, nestedDataSource -> com.mchange.v2.c3p0.DriverManagerDataSource@ed0458 [ description -> null, driverClass -> null, factoryClassLocation -> null, identityToken -> ed0458, jdbcUrl -> jdbc:derby:derby-db;create=true, properties -> {user=******, password=******} ], preferredTestQuery -> null, propertyCycle -> 300, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, usesTraditionalReflectiveProxies -> false ], factoryClassLocation -> null, identityToken -> efd160, numHelperThreads -> 3 ]
[2010-01-24 16:26:58,463] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:58,463] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-24 16:26:58,463] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-24 16:26:58,463] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-24 16:26:58,463] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-24 16:26:58,463] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-24 16:26:58,463] INFO  - Automatic session close at end of transaction: disabled
[2010-01-24 16:26:58,463] INFO  - Scrollable result sets: enabled
[2010-01-24 16:26:58,463] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-24 16:26:58,463] INFO  - Connection release mode: auto
[2010-01-24 16:26:58,463] INFO  - Maximum outer join fetch depth: 1
[2010-01-24 16:26:58,463] INFO  - Default batch fetch size: 1
[2010-01-24 16:26:58,463] INFO  - Generate SQL with comments: disabled
[2010-01-24 16:26:58,464] INFO  - Order SQL updates by primary key: disabled
[2010-01-24 16:26:58,464] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-24 16:26:58,464] INFO  - Using ASTQueryTranslatorFactory
[2010-01-24 16:26:58,464] INFO  - Query language substitutions: {}
[2010-01-24 16:26:58,464] INFO  - JPA-QL strict compliance: disabled
[2010-01-24 16:26:58,464] INFO  - Second-level cache: enabled
[2010-01-24 16:26:58,464] INFO  - Query cache: enabled
[2010-01-24 16:26:58,464] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-24 16:26:58,464] INFO  - Optimize cache for minimal puts: disabled
[2010-01-24 16:26:58,464] INFO  - Cache region prefix: arv
[2010-01-24 16:26:58,464] INFO  - Structured second-level cache entries: disabled
[2010-01-24 16:26:58,464] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-24 16:26:58,464] INFO  - Statistics: disabled
[2010-01-24 16:26:58,464] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-24 16:26:58,464] INFO  - Default entity-mode: pojo
[2010-01-24 16:26:58,674] INFO  - building session factory
[2010-01-24 16:26:58,706] WARN  - Could not find configuration [arv.BoolTest]; using defaults.
[2010-01-24 16:26:58,935] WARN  - Could not find configuration [arv.Sort]; using defaults.
[2010-01-24 16:26:58,956] WARN  - Could not find configuration [arv.KidTwo]; using defaults.
[2010-01-24 16:26:58,976] WARN  - Could not find configuration [arv.MixedKids]; using defaults.
[2010-01-24 16:26:58,997] WARN  - Could not find configuration [arv.KidThree]; using defaults.
[2010-01-24 16:26:59,016] WARN  - Could not find configuration [arv.Favorite]; using defaults.
[2010-01-24 16:26:59,032] WARN  - Could not find configuration [arv.Levelthree]; using defaults.
[2010-01-24 16:26:59,046] WARN  - Could not find configuration [arv.Interleave]; using defaults.
[2010-01-24 16:26:59,059] WARN  - Could not find configuration [arv.SortChild]; using defaults.
[2010-01-24 16:26:59,070] WARN  - Could not find configuration [arv.Leveltwo]; using defaults.
[2010-01-24 16:26:59,103] WARN  - Could not find configuration [arv.Address]; using defaults.
[2010-01-24 16:26:59,119] WARN  - Could not find configuration [arv.Levelone]; using defaults.
[2010-01-24 16:26:59,134] WARN  - Could not find configuration [arv.Cache]; using defaults.
[2010-01-24 16:26:59,148] WARN  - Could not find configuration [arv.KidOne]; using defaults.
[2010-01-24 16:26:59,161] WARN  - Could not find configuration [arv.Remover]; using defaults.
[2010-01-24 16:26:59,177] WARN  - Could not find configuration [arv.AddressBook]; using defaults.
[2010-01-24 16:26:59,197] WARN  - Could not find configuration [arv.Statistics]; using defaults.
[2010-01-24 16:26:59,294] INFO  - Not binding factory to JNDI, no JNDI name configured
[2010-01-24 16:26:59,296] INFO  - starting update timestamps cache at region: arv.org.hibernate.cache.UpdateTimestampsCache
[2010-01-24 16:26:59,296] WARN  - Could not find configuration [arv.org.hibernate.cache.UpdateTimestampsCache]; using defaults.
[2010-01-24 16:26:59,301] INFO  - starting query cache at region: arv.org.hibernate.cache.StandardQueryCache
[2010-01-24 16:26:59,301] WARN  - Could not find configuration [arv.org.hibernate.cache.StandardQueryCache]; using defaults.
[2010-01-24 16:26:59,303] DEBUG - PersistenceLoader.load() : loaded 17 class(es)
[2010-01-24 16:26:59,380] DEBUG - XmlSerializer() : loaded 17 classes
[2010-01-24 16:26:59,408] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:26:59,430] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:26:59,437] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:26:59,587] DEBUG - XmlSerializer.save() : timing 186 at [extract]
[2010-01-24 16:26:59,634] DEBUG - XmlSerializer.save() : timing 47 at [lock]
[2010-01-24 16:26:59,646] DEBUG - XmlSerializer.save() : timing 12 at [changed]
[2010-01-24 16:26:59,667] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:26:59,753] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-24 16:26:59,753] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-24 16:26:59,773] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:26:59,773] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:26:59,775] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:26:59,779] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:26:59,782] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:26:59,783] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:26:59,783] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:26:59,785] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:26:59,787] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:26:59,793] DEBUG - XmlSerializer.save() : timing 147 at [storeAll]
[2010-01-24 16:26:59,803] DEBUG - XmlSerializer.save() : timing 10 at [findupdate]
[2010-01-24 16:26:59,815] DEBUG - UpdateCache.update() : update [class AddressBook], id [163840]
[2010-01-24 16:26:59,824] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:26:59,933] DEBUG - PooledThread.queue() : priority 1
[2010-01-24 16:26:59,934] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,934] DEBUG - UpdateCache.update() : update [class Address], id [32768]
[2010-01-24 16:26:59,935] DEBUG - UpdateThread.update() : begin 16242660
[2010-01-24 16:26:59,936] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:26:59,942] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,942] DEBUG - UpdateCache.update() : update [class Statistics], id [65536]
[2010-01-24 16:26:59,943] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:26:59,947] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,947] DEBUG - UpdateCache.update() : update [class Favorite], id [98304]
[2010-01-24 16:26:59,948] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:26:59,951] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,951] DEBUG - UpdateCache.update() : update [class Favorite], id [98305]
[2010-01-24 16:26:59,951] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:26:59,954] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,954] DEBUG - UpdateCache.update() : update [class Remover], id [131072]
[2010-01-24 16:26:59,955] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:26:59,966] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,966] DEBUG - UpdateCache.update() : update [class AddressBook], id [163840]
[2010-01-24 16:26:59,967] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:26:59,980] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,980] DEBUG - UpdateCache.update() : update [class Address], id [32768]
[2010-01-24 16:26:59,980] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:26:59,983] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,984] DEBUG - UpdateCache.update() : update [class Statistics], id [65536]
[2010-01-24 16:26:59,984] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:26:59,990] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,990] DEBUG - UpdateCache.update() : update [class Favorite], id [98304]
[2010-01-24 16:26:59,990] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:26:59,993] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,993] DEBUG - UpdateCache.update() : update [class Favorite], id [98305]
[2010-01-24 16:26:59,993] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:26:59,995] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,995] DEBUG - UpdateCache.update() : update [class Remover], id [131072]
[2010-01-24 16:26:59,995] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:26:59,996] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:26:59,996] DEBUG - XmlSerializer.save() : timing 193 at [cache]
[2010-01-24 16:27:00,707] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-24 16:27:00,707] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-24 16:27:00,711] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:00,712] DEBUG - XmlSerializer.save() : timing 716 at [save]
[2010-01-24 16:27:00,712] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:00,712] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:00,738] DEBUG - UpdateThread.update() : update 163840, type class AddressBook
[2010-01-24 16:27:00,741] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:00,743] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:00,784] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:00,848] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:00,852] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:00,872] DEBUG - UpdateCache.remove() : size before 6
[2010-01-24 16:27:00,873] DEBUG - UpdateCache.remove() : size after 5
[2010-01-24 16:27:01,217] DEBUG - LockItem.unlock() : 6 current
[2010-01-24 16:27:01,217] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:01,218] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:01,218] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:01,219] DEBUG - UpdateThread.update() : total 12, complete 1
[2010-01-24 16:27:01,225] DEBUG - UpdateThread.update() : update 32768, type class Address
[2010-01-24 16:27:01,229] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:01,231] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:01,232] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:01,237] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:01,239] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:01,247] DEBUG - UpdateCache.remove() : size before 5
[2010-01-24 16:27:01,247] DEBUG - UpdateCache.remove() : size after 4
[2010-01-24 16:27:01,270] DEBUG - XmlSerializer.save() : timing 52 at [extract]
[2010-01-24 16:27:01,270] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:01,270] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:01,272] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:01,272] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:01,272] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:01,273] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:01,274] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:01,274] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:01,275] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:01,275] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:01,275] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:01,276] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:01,277] DEBUG - XmlSerializer.save() : timing 7 at [storeAll]
[2010-01-24 16:27:01,278] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:01,278] DEBUG - UpdateCache.update() : update [class AddressBook], id [163841]
[2010-01-24 16:27:01,279] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:01,286] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,286] DEBUG - UpdateCache.update() : update [class Address], id [32769]
[2010-01-24 16:27:01,286] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:01,290] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,290] DEBUG - UpdateCache.update() : update [class Statistics], id [65537]
[2010-01-24 16:27:01,290] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:01,292] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,292] DEBUG - UpdateCache.update() : update [class Favorite], id [98306]
[2010-01-24 16:27:01,293] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:01,296] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,296] DEBUG - UpdateCache.update() : update [class Favorite], id [98307]
[2010-01-24 16:27:01,296] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:01,298] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,298] DEBUG - UpdateCache.update() : update [class Remover], id [131073]
[2010-01-24 16:27:01,298] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:01,299] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,300] DEBUG - UpdateCache.update() : update [class AddressBook], id [163841]
[2010-01-24 16:27:01,300] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:01,308] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,308] DEBUG - UpdateCache.update() : update [class Address], id [32769]
[2010-01-24 16:27:01,308] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:01,312] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,312] DEBUG - UpdateCache.update() : update [class Statistics], id [65537]
[2010-01-24 16:27:01,312] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:01,313] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,314] DEBUG - UpdateCache.update() : update [class Favorite], id [98306]
[2010-01-24 16:27:01,314] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:01,315] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,315] DEBUG - UpdateCache.update() : update [class Favorite], id [98307]
[2010-01-24 16:27:01,315] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:01,316] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,316] DEBUG - UpdateCache.update() : update [class Remover], id [131073]
[2010-01-24 16:27:01,316] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:01,318] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:01,318] DEBUG - XmlSerializer.save() : timing 40 at [cache]
[2010-01-24 16:27:18,017] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:18,017] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:18,017] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,017] DEBUG - UpdateThread.update() : total 12, complete 2
[2010-01-24 16:27:18,018] DEBUG - UpdateThread.update() : update 65536, type class Statistics
[2010-01-24 16:27:18,018] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:18,018] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:18,019] DEBUG - XmlSerializer.save() : timing 16700 at [save]
[2010-01-24 16:27:18,019] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:18,019] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:18,020] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:18,021] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:18,029] DEBUG - UpdateCache.remove() : size before 10
[2010-01-24 16:27:18,029] DEBUG - UpdateCache.remove() : size after 9
[2010-01-24 16:27:18,037] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,039] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,052] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:18,052] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:18,052] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,052] DEBUG - UpdateThread.update() : total 12, complete 3
[2010-01-24 16:27:18,054] DEBUG - UpdateThread.update() : update 98304, type class Favorite
[2010-01-24 16:27:18,055] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,056] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:18,057] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,058] DEBUG - UpdateCache.remove() : size before 9
[2010-01-24 16:27:18,058] DEBUG - UpdateCache.remove() : size after 8
[2010-01-24 16:27:18,083] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:18,083] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:18,083] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,083] DEBUG - UpdateThread.update() : total 12, complete 4
[2010-01-24 16:27:18,084] DEBUG - UpdateThread.update() : update 98305, type class Favorite
[2010-01-24 16:27:18,084] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,088] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:18,088] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,090] DEBUG - UpdateCache.remove() : size before 8
[2010-01-24 16:27:18,090] DEBUG - UpdateCache.remove() : size after 7
[2010-01-24 16:27:18,094] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:18,094] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:18,094] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,094] DEBUG - UpdateThread.update() : total 12, complete 5
[2010-01-24 16:27:18,094] DEBUG - UpdateThread.update() : update 131072, type class Remover
[2010-01-24 16:27:18,094] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:18,097] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:18,097] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:18,098] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:18,098] DEBUG - UpdateCache.remove() : size before 7
[2010-01-24 16:27:18,098] DEBUG - UpdateCache.remove() : size after 6
[2010-01-24 16:27:18,106] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,109] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,132] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,134] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:18,134] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:18,134] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,134] DEBUG - UpdateThread.update() : total 12, complete 6
[2010-01-24 16:27:18,134] DEBUG - UpdateThread.update() : update 163840, type class AddressBook
[2010-01-24 16:27:18,140] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-24 16:27:18,143] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:18,156] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:18,156] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:18,156] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,156] DEBUG - UpdateThread.update() : total 12, complete 7
[2010-01-24 16:27:18,157] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:18,160] DEBUG - UpdateThread.update() : update 32768, type class Address
[2010-01-24 16:27:18,161] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-24 16:27:18,163] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:18,169] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:18,169] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:18,169] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,169] DEBUG - UpdateThread.update() : total 12, complete 8
[2010-01-24 16:27:18,171] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,173] DEBUG - UpdateThread.update() : update 65536, type class Statistics
[2010-01-24 16:27:18,174] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-24 16:27:18,176] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:18,176] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,180] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:18,180] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:18,180] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,181] DEBUG - UpdateThread.update() : total 12, complete 9
[2010-01-24 16:27:18,181] DEBUG - UpdateThread.update() : update 98304, type class Favorite
[2010-01-24 16:27:18,181] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-24 16:27:18,183] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:18,185] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:18,185] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:18,185] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,185] DEBUG - UpdateThread.update() : total 12, complete 10
[2010-01-24 16:27:18,186] DEBUG - UpdateThread.update() : update 98305, type class Favorite
[2010-01-24 16:27:18,187] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-24 16:27:18,192] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:18,197] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:18,197] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:18,197] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,197] DEBUG - UpdateThread.update() : total 12, complete 11
[2010-01-24 16:27:18,197] DEBUG - UpdateThread.update() : update 131072, type class Remover
[2010-01-24 16:27:18,198] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-24 16:27:18,209] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-24 16:27:18,211] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:18,211] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-24 16:27:18,211] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,212] DEBUG - UpdateThread.update() : total 12, complete 12
[2010-01-24 16:27:18,212] DEBUG - UpdateThread.update() : finish
[2010-01-24 16:27:18,223] DEBUG - XmlSerializer.save() : timing 66 at [extract]
[2010-01-24 16:27:18,223] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,237] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:18,238] DEBUG - XmlSerializer.save() : timing 15 at [lock]
[2010-01-24 16:27:18,239] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,281] DEBUG - XmlCompare.next(): hit  <status>new</status> vs.  <address type="home">
[2010-01-24 16:27:18,291] DEBUG - XmlCompare.compare() : [[163841:address-book]]
[2010-01-24 16:27:18,292] DEBUG - XmlSerializer.save() : timing 53 at [changed]
[2010-01-24 16:27:18,302] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,304] DEBUG - XmlSerializer().storeAll() : old [32769]
[2010-01-24 16:27:18,304] DEBUG - XmlSerializer().storeAll() : new [32769, null]
[2010-01-24 16:27:18,305] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 32769, Address : 32770]], old [[Address : 32769, Address : 32770]]
[2010-01-24 16:27:18,310] DEBUG - XmlSerializer().storeAll() : old [98306, 98307]
[2010-01-24 16:27:18,310] DEBUG - XmlSerializer().storeAll() : new [98306, 98307]
[2010-01-24 16:27:18,311] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [163841]
[2010-01-24 16:27:18,311] DEBUG - XmlSerializer.save() : timing 20 at [storeAll]
[2010-01-24 16:27:18,312] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:18,313] DEBUG - UpdateCache.update() : update [class AddressBook], id [163841]
[2010-01-24 16:27:18,313] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,328] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,328] DEBUG - UpdateCache.update() : update [class Address], id [32770]
[2010-01-24 16:27:18,328] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,331] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,331] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-24 16:27:18,347] DEBUG - LockItem.unlock() : 6 current
[2010-01-24 16:27:18,347] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:18,347] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,347] DEBUG - XmlSerializer.save() : timing 16 at [save]
[2010-01-24 16:27:18,347] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:18,347] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:18,352] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,353] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,383] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:18,388] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,390] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,415] DEBUG - XmlSerializer.save() : timing 32 at [extract]
[2010-01-24 16:27:18,416] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-24 16:27:18,417] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-24 16:27:18,418] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,419] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:18,419] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:18,419] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:18,420] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:18,421] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:18,423] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:18,423] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:18,423] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:18,423] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:18,424] DEBUG - XmlSerializer.save() : timing 7 at [storeAll]
[2010-01-24 16:27:18,425] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:18,425] DEBUG - UpdateCache.update() : update [class AddressBook], id [163842]
[2010-01-24 16:27:18,425] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,436] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,436] DEBUG - UpdateCache.update() : update [class Address], id [32771]
[2010-01-24 16:27:18,436] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,439] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,440] DEBUG - UpdateCache.update() : update [class Statistics], id [65538]
[2010-01-24 16:27:18,440] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:18,441] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,441] DEBUG - UpdateCache.update() : update [class Favorite], id [98308]
[2010-01-24 16:27:18,441] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,443] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,443] DEBUG - UpdateCache.update() : update [class Favorite], id [98309]
[2010-01-24 16:27:18,443] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,444] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,444] DEBUG - UpdateCache.update() : update [class Remover], id [131074]
[2010-01-24 16:27:18,444] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:18,445] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,445] DEBUG - UpdateCache.update() : update [class AddressBook], id [163842]
[2010-01-24 16:27:18,446] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,457] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,458] DEBUG - UpdateCache.update() : update [class Address], id [32771]
[2010-01-24 16:27:18,458] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,461] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,461] DEBUG - UpdateCache.update() : update [class Statistics], id [65538]
[2010-01-24 16:27:18,461] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:18,462] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,463] DEBUG - UpdateCache.update() : update [class Favorite], id [98308]
[2010-01-24 16:27:18,463] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,464] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,464] DEBUG - UpdateCache.update() : update [class Favorite], id [98309]
[2010-01-24 16:27:18,464] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,466] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,466] DEBUG - UpdateCache.update() : update [class Remover], id [131074]
[2010-01-24 16:27:18,466] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:18,468] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,468] DEBUG - XmlSerializer.save() : timing 43 at [cache]
[2010-01-24 16:27:18,498] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:18,498] DEBUG - XmlSerializer.save() : timing 30 at [save]
[2010-01-24 16:27:18,498] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:18,498] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:18,505] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,506] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,537] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,547] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:18,556] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,558] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,586] DEBUG - XmlSerializer.save() : timing 39 at [extract]
[2010-01-24 16:27:18,586] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,593] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:18,593] DEBUG - XmlSerializer.save() : timing 7 at [lock]
[2010-01-24 16:27:18,593] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,604] DEBUG - XmlCompare.next(): hit  <name>robs address book</name> vs.  <name>set another name</name>
[2010-01-24 16:27:18,622] DEBUG - XmlCompare.compare() : [[163842:address-book]]
[2010-01-24 16:27:18,622] DEBUG - XmlSerializer.save() : timing 29 at [changed]
[2010-01-24 16:27:18,623] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [set another name], old [robs address book]
[2010-01-24 16:27:18,626] DEBUG - XmlSerializer().storeAll() : old [32771]
[2010-01-24 16:27:18,626] DEBUG - XmlSerializer().storeAll() : new [32771]
[2010-01-24 16:27:18,629] DEBUG - XmlSerializer().storeAll() : old [98308, 98309]
[2010-01-24 16:27:18,629] DEBUG - XmlSerializer().storeAll() : new [98308, 98309]
[2010-01-24 16:27:18,630] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [163842]
[2010-01-24 16:27:18,630] DEBUG - XmlSerializer.save() : timing 8 at [storeAll]
[2010-01-24 16:27:18,633] DEBUG - XmlSerializer.save() : timing 3 at [findupdate]
[2010-01-24 16:27:18,633] DEBUG - UpdateCache.update() : update [class AddressBook], id [163842]
[2010-01-24 16:27:18,633] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,643] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,643] DEBUG - XmlSerializer.save() : timing 10 at [cache]
[2010-01-24 16:27:18,647] DEBUG - LockItem.unlock() : 6 current
[2010-01-24 16:27:18,647] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:18,647] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:18,647] DEBUG - XmlSerializer.save() : timing 4 at [save]
[2010-01-24 16:27:18,652] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:18,652] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-24 16:27:18,655] DEBUG - Queries.load() :  load from stream [queries.xml]
[2010-01-24 16:27:18,664] DEBUG - Queries.load() :  loaded 9
[2010-01-24 16:27:18,669] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-24 16:27:18,705] DEBUG - XmlSerializer.sqlLoad() : timing 14 at [query]
[2010-01-24 16:27:18,734] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:18,739] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,742] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:18,794] DEBUG - XmlSerializer.save() : timing 62 at [extract]
[2010-01-24 16:27:18,794] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:18,796] DEBUG - XmlSerializer.save() : timing 2 at [changed]
[2010-01-24 16:27:18,799] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,801] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,804] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,810] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,811] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,813] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,817] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,818] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,819] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,821] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,822] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,823] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,824] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,825] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:18,826] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:18,826] DEBUG - XmlSerializer().storeAll() : new [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
[2010-01-24 16:27:18,827] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:18,827] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:18,828] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:18,828] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:18,828] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:18,828] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:18,828] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:18,829] DEBUG - XmlSerializer.save() : timing 33 at [storeAll]
[2010-01-24 16:27:18,833] DEBUG - XmlSerializer.save() : timing 4 at [findupdate]
[2010-01-24 16:27:18,833] DEBUG - UpdateCache.update() : update [class AddressBook], id [163843]
[2010-01-24 16:27:18,833] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,860] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,860] DEBUG - UpdateCache.update() : update [class Address], id [32772]
[2010-01-24 16:27:18,861] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,863] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,863] DEBUG - UpdateCache.update() : update [class Address], id [32773]
[2010-01-24 16:27:18,863] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,864] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,864] DEBUG - UpdateCache.update() : update [class Address], id [32774]
[2010-01-24 16:27:18,865] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,866] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,866] DEBUG - UpdateCache.update() : update [class Address], id [32775]
[2010-01-24 16:27:18,866] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,870] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,870] DEBUG - UpdateCache.update() : update [class Address], id [32776]
[2010-01-24 16:27:18,870] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,872] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,872] DEBUG - UpdateCache.update() : update [class Address], id [32777]
[2010-01-24 16:27:18,872] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,874] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,874] DEBUG - UpdateCache.update() : update [class Address], id [32778]
[2010-01-24 16:27:18,874] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,876] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,876] DEBUG - UpdateCache.update() : update [class Address], id [32779]
[2010-01-24 16:27:18,876] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,878] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,879] DEBUG - UpdateCache.update() : update [class Address], id [32780]
[2010-01-24 16:27:18,879] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,880] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,880] DEBUG - UpdateCache.update() : update [class Address], id [32781]
[2010-01-24 16:27:18,880] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,882] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,882] DEBUG - UpdateCache.update() : update [class Address], id [32782]
[2010-01-24 16:27:18,882] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,888] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,888] DEBUG - UpdateCache.update() : update [class Address], id [32783]
[2010-01-24 16:27:18,888] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,890] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,890] DEBUG - UpdateCache.update() : update [class Address], id [32784]
[2010-01-24 16:27:18,890] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,893] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,893] DEBUG - UpdateCache.update() : update [class Address], id [32785]
[2010-01-24 16:27:18,893] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,895] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,895] DEBUG - UpdateCache.update() : update [class Statistics], id [65539]
[2010-01-24 16:27:18,895] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:18,896] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,896] DEBUG - UpdateCache.update() : update [class Favorite], id [98310]
[2010-01-24 16:27:18,897] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,898] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,898] DEBUG - UpdateCache.update() : update [class Favorite], id [98311]
[2010-01-24 16:27:18,898] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,900] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,900] DEBUG - UpdateCache.update() : update [class Remover], id [131075]
[2010-01-24 16:27:18,900] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:18,901] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,902] DEBUG - UpdateCache.update() : update [class AddressBook], id [163843]
[2010-01-24 16:27:18,902] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:18,941] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,941] DEBUG - UpdateCache.update() : update [class Address], id [32772]
[2010-01-24 16:27:18,941] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,942] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,942] DEBUG - UpdateCache.update() : update [class Address], id [32773]
[2010-01-24 16:27:18,942] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,944] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,944] DEBUG - UpdateCache.update() : update [class Address], id [32774]
[2010-01-24 16:27:18,944] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,946] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,946] DEBUG - UpdateCache.update() : update [class Address], id [32775]
[2010-01-24 16:27:18,946] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,947] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,947] DEBUG - UpdateCache.update() : update [class Address], id [32776]
[2010-01-24 16:27:18,947] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,949] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,950] DEBUG - UpdateCache.update() : update [class Address], id [32777]
[2010-01-24 16:27:18,950] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,951] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,951] DEBUG - UpdateCache.update() : update [class Address], id [32778]
[2010-01-24 16:27:18,952] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,953] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,953] DEBUG - UpdateCache.update() : update [class Address], id [32779]
[2010-01-24 16:27:18,953] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,956] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,956] DEBUG - UpdateCache.update() : update [class Address], id [32780]
[2010-01-24 16:27:18,956] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,959] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,959] DEBUG - UpdateCache.update() : update [class Address], id [32781]
[2010-01-24 16:27:18,959] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,963] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,963] DEBUG - UpdateCache.update() : update [class Address], id [32782]
[2010-01-24 16:27:18,963] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,966] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,966] DEBUG - UpdateCache.update() : update [class Address], id [32783]
[2010-01-24 16:27:18,966] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,967] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,967] DEBUG - UpdateCache.update() : update [class Address], id [32784]
[2010-01-24 16:27:18,967] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,969] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,969] DEBUG - UpdateCache.update() : update [class Address], id [32785]
[2010-01-24 16:27:18,969] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:18,971] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,971] DEBUG - UpdateCache.update() : update [class Statistics], id [65539]
[2010-01-24 16:27:18,971] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:18,972] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,972] DEBUG - UpdateCache.update() : update [class Favorite], id [98310]
[2010-01-24 16:27:18,972] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,973] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,973] DEBUG - UpdateCache.update() : update [class Favorite], id [98311]
[2010-01-24 16:27:18,973] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:18,976] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,976] DEBUG - UpdateCache.update() : update [class Remover], id [131075]
[2010-01-24 16:27:18,976] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:18,977] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:18,977] DEBUG - XmlSerializer.save() : timing 144 at [cache]
[2010-01-24 16:27:19,048] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:19,048] DEBUG - XmlSerializer.save() : timing 71 at [save]
[2010-01-24 16:27:19,048] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:19,048] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:19,065] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:19,067] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:19,151] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,183] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:19,189] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:19,191] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:19,259] DEBUG - XmlSerializer.save() : timing 76 at [extract]
[2010-01-24 16:27:19,259] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,286] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:19,287] DEBUG - XmlSerializer.save() : timing 28 at [lock]
[2010-01-24 16:27:19,287] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,322] DEBUG - XmlCompare.next(): hit  <name>robs address book</name> vs.  <name>robs address book1</name>
[2010-01-24 16:27:19,323] DEBUG - XmlCompare.next(): hit   <street>1382 5th Ave</street> vs.   <street>1</street>
[2010-01-24 16:27:19,324] DEBUG - XmlCompare.next(): hit   <street>Apt. 2</street> vs.   <city>San Francisco</city>
[2010-01-24 16:27:19,327] DEBUG - XmlCompare.next(): hit   <street>Bldg. 14</street> vs.   <state>CA</state>
[2010-01-24 16:27:19,328] DEBUG - XmlCompare.next(): hit   <street>Station. 12</street> vs.   <zip-code>94122</zip-code>
[2010-01-24 16:27:19,329] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <region>USA</region>
[2010-01-24 16:27:19,330] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <region>North America</region>
[2010-01-24 16:27:19,330] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.  </address>
[2010-01-24 16:27:19,331] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.  <address id="32772" type="home">
[2010-01-24 16:27:19,331] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <street>1</street>
[2010-01-24 16:27:19,331] DEBUG - XmlCompare.next(): hit  </address> vs.   <city>San Francisco</city>
[2010-01-24 16:27:19,410] DEBUG - XmlCompare.compare() : [[163843:address-book, 32772:address]]
[2010-01-24 16:27:19,411] DEBUG - XmlSerializer.save() : timing 124 at [changed]
[2010-01-24 16:27:19,411] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book1], old [robs address book]
[2010-01-24 16:27:19,415] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1]], old [[Station. 12, Bldg. 14, Apt. 2, 1382 5th Ave]]
[2010-01-24 16:27:19,416] DEBUG - XmlSerializer().storeAll() :  save [Address], id [32772]
[2010-01-24 16:27:19,434] DEBUG - XmlSerializer().storeAll() : old [32772, 32773, 32774, 32775, 32776, 32777, 32778, 32779, 32780, 32781, 32782, 32783, 32784, 32785]
[2010-01-24 16:27:19,434] DEBUG - XmlSerializer().storeAll() : new [32772, 32773, 32774, 32775, 32776, 32777, 32778, 32779, 32780, 32781, 32782, 32783, 32784, 32785]
[2010-01-24 16:27:19,434] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 32772, Address : 32773, Address : 32774, Address : 32775, Address : 32776, Address : 32777, Address : 32778, Address : 32779, Address : 32780, Address : 32781, Address : 32782, Address : 32783, Address : 32784, Address : 32785]], old [[Address : 32772, Address : 32773, Address : 32774, Address : 32775, Address : 32776, Address : 32777, Address : 32778, Address : 32779, Address : 32780, Address : 32781, Address : 32782, Address : 32783, Address : 32784, Address : 32785]]
[2010-01-24 16:27:19,436] DEBUG - XmlSerializer().storeAll() : old [98310, 98311]
[2010-01-24 16:27:19,436] DEBUG - XmlSerializer().storeAll() : new [98310, 98311]
[2010-01-24 16:27:19,437] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [163843]
[2010-01-24 16:27:19,437] DEBUG - XmlSerializer.save() : timing 26 at [storeAll]
[2010-01-24 16:27:19,439] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-24 16:27:19,440] DEBUG - UpdateCache.update() : update [class AddressBook], id [163843]
[2010-01-24 16:27:19,440] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,460] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,460] DEBUG - UpdateCache.update() : update [class Address], id [32772]
[2010-01-24 16:27:19,460] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:19,461] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,461] DEBUG - XmlSerializer.save() : timing 22 at [cache]
[2010-01-24 16:27:19,482] DEBUG - LockItem.unlock() : 19 current
[2010-01-24 16:27:19,482] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:19,482] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:19,482] DEBUG - XmlSerializer.save() : timing 21 at [save]
[2010-01-24 16:27:19,482] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:19,482] DEBUG - testUpdateTiming() : timing 332 at [save1]
[2010-01-24 16:27:19,483] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,498] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:19,502] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:19,504] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:19,554] DEBUG - XmlSerializer.save() : timing 56 at [extract]
[2010-01-24 16:27:19,555] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,575] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:19,580] DEBUG - XmlSerializer.save() : timing 26 at [lock]
[2010-01-24 16:27:19,580] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,603] DEBUG - XmlCompare.next(): hit  <name>robs address book1</name> vs.  <name>robs address book11</name>
[2010-01-24 16:27:19,604] DEBUG - XmlCompare.next(): hit   <street>1</street> vs.   <street>2</street>
[2010-01-24 16:27:19,604] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <street>1</street>
[2010-01-24 16:27:19,604] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <city>San Francisco</city>
[2010-01-24 16:27:19,604] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.   <state>CA</state>
[2010-01-24 16:27:19,605] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.   <zip-code>94122</zip-code>
[2010-01-24 16:27:19,605] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <region>USA</region>
[2010-01-24 16:27:19,605] DEBUG - XmlCompare.next(): hit  </address> vs.   <region>North America</region>
[2010-01-24 16:27:19,638] DEBUG - XmlCompare.compare() : [[163843:address-book, 32772:address]]
[2010-01-24 16:27:19,638] DEBUG - XmlSerializer.save() : timing 58 at [changed]
[2010-01-24 16:27:19,638] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book11], old [robs address book1]
[2010-01-24 16:27:19,642] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1, 2]], old [[1]]
[2010-01-24 16:27:19,642] DEBUG - XmlSerializer().storeAll() :  save [Address], id [32772]
[2010-01-24 16:27:19,652] DEBUG - XmlSerializer().storeAll() : old [32772, 32773, 32774, 32775, 32776, 32777, 32778, 32779, 32780, 32781, 32782, 32783, 32784, 32785]
[2010-01-24 16:27:19,652] DEBUG - XmlSerializer().storeAll() : new [32772, 32773, 32774, 32775, 32776, 32777, 32778, 32779, 32780, 32781, 32782, 32783, 32784, 32785]
[2010-01-24 16:27:19,652] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 32772, Address : 32773, Address : 32774, Address : 32775, Address : 32776, Address : 32777, Address : 32778, Address : 32779, Address : 32780, Address : 32781, Address : 32782, Address : 32783, Address : 32784, Address : 32785]], old [[Address : 32772, Address : 32773, Address : 32774, Address : 32775, Address : 32776, Address : 32777, Address : 32778, Address : 32779, Address : 32780, Address : 32781, Address : 32782, Address : 32783, Address : 32784, Address : 32785]]
[2010-01-24 16:27:19,656] DEBUG - XmlSerializer().storeAll() : old [98310, 98311]
[2010-01-24 16:27:19,656] DEBUG - XmlSerializer().storeAll() : new [98310, 98311]
[2010-01-24 16:27:19,656] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [163843]
[2010-01-24 16:27:19,656] DEBUG - XmlSerializer.save() : timing 18 at [storeAll]
[2010-01-24 16:27:19,658] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-24 16:27:19,658] DEBUG - UpdateCache.update() : update [class AddressBook], id [163843]
[2010-01-24 16:27:19,659] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,676] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,676] DEBUG - UpdateCache.update() : update [class Address], id [32772]
[2010-01-24 16:27:19,676] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:19,678] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,678] DEBUG - XmlSerializer.save() : timing 20 at [cache]
[2010-01-24 16:27:19,694] DEBUG - LockItem.unlock() : 19 current
[2010-01-24 16:27:19,694] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:19,694] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:19,694] DEBUG - XmlSerializer.save() : timing 16 at [save]
[2010-01-24 16:27:19,694] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:19,695] DEBUG - testUpdateTiming() : timing 213 at [save2]
[2010-01-24 16:27:19,695] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,713] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:19,717] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:19,718] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:19,766] DEBUG - XmlSerializer.save() : timing 53 at [extract]
[2010-01-24 16:27:19,766] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,784] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:19,786] DEBUG - XmlSerializer.save() : timing 20 at [lock]
[2010-01-24 16:27:19,786] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,804] DEBUG - XmlCompare.next(): hit  <name>robs address book11</name> vs.  <name>robs address book111</name>
[2010-01-24 16:27:19,805] DEBUG - XmlCompare.next(): hit   <street>2</street> vs.   <street>3</street>
[2010-01-24 16:27:19,805] DEBUG - XmlCompare.next(): hit   <street>1</street> vs.   <street>2</street>
[2010-01-24 16:27:19,805] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <street>1</street>
[2010-01-24 16:27:19,805] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <city>San Francisco</city>
[2010-01-24 16:27:19,805] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.   <state>CA</state>
[2010-01-24 16:27:19,806] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.   <zip-code>94122</zip-code>
[2010-01-24 16:27:19,806] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <region>USA</region>
[2010-01-24 16:27:19,806] DEBUG - XmlCompare.next(): hit  </address> vs.   <region>North America</region>
[2010-01-24 16:27:19,837] DEBUG - XmlCompare.compare() : [[163843:address-book, 32772:address]]
[2010-01-24 16:27:19,838] DEBUG - XmlSerializer.save() : timing 52 at [changed]
[2010-01-24 16:27:19,838] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book111], old [robs address book11]
[2010-01-24 16:27:19,842] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1, 2, 3]], old [[1, 2]]
[2010-01-24 16:27:19,842] DEBUG - XmlSerializer().storeAll() :  save [Address], id [32772]
[2010-01-24 16:27:19,858] DEBUG - XmlSerializer().storeAll() : old [32772, 32773, 32774, 32775, 32776, 32777, 32778, 32779, 32780, 32781, 32782, 32783, 32784, 32785]
[2010-01-24 16:27:19,858] DEBUG - XmlSerializer().storeAll() : new [32772, 32773, 32774, 32775, 32776, 32777, 32778, 32779, 32780, 32781, 32782, 32783, 32784, 32785]
[2010-01-24 16:27:19,859] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 32772, Address : 32773, Address : 32774, Address : 32775, Address : 32776, Address : 32777, Address : 32778, Address : 32779, Address : 32780, Address : 32781, Address : 32782, Address : 32783, Address : 32784, Address : 32785]], old [[Address : 32772, Address : 32773, Address : 32774, Address : 32775, Address : 32776, Address : 32777, Address : 32778, Address : 32779, Address : 32780, Address : 32781, Address : 32782, Address : 32783, Address : 32784, Address : 32785]]
[2010-01-24 16:27:19,861] DEBUG - XmlSerializer().storeAll() : old [98310, 98311]
[2010-01-24 16:27:19,861] DEBUG - XmlSerializer().storeAll() : new [98310, 98311]
[2010-01-24 16:27:19,861] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [163843]
[2010-01-24 16:27:19,861] DEBUG - XmlSerializer.save() : timing 23 at [storeAll]
[2010-01-24 16:27:19,862] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:19,862] DEBUG - UpdateCache.update() : update [class AddressBook], id [163843]
[2010-01-24 16:27:19,862] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,879] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,879] DEBUG - UpdateCache.update() : update [class Address], id [32772]
[2010-01-24 16:27:19,879] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:19,881] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,881] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-24 16:27:19,915] DEBUG - LockItem.unlock() : 19 current
[2010-01-24 16:27:19,915] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:19,915] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:19,915] DEBUG - XmlSerializer.save() : timing 34 at [save]
[2010-01-24 16:27:19,915] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:19,915] DEBUG - testUpdateTiming() : timing 220 at [save3]
[2010-01-24 16:27:19,917] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:19,922] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:19,924] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:19,950] DEBUG - XmlSerializer.save() : timing 34 at [extract]
[2010-01-24 16:27:19,951] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-24 16:27:19,951] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:19,951] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:19,952] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:19,952] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:19,952] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:19,954] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:19,955] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:19,955] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:19,955] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:19,955] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:19,957] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:19,957] DEBUG - XmlSerializer.save() : timing 6 at [storeAll]
[2010-01-24 16:27:19,958] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:19,958] DEBUG - UpdateCache.update() : update [class AddressBook], id [163844]
[2010-01-24 16:27:19,958] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,962] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,962] DEBUG - UpdateCache.update() : update [class Address], id [32786]
[2010-01-24 16:27:19,962] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:19,963] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,963] DEBUG - UpdateCache.update() : update [class Statistics], id [65540]
[2010-01-24 16:27:19,963] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:19,964] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,964] DEBUG - UpdateCache.update() : update [class Favorite], id [98312]
[2010-01-24 16:27:19,964] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:19,965] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,965] DEBUG - UpdateCache.update() : update [class Favorite], id [98313]
[2010-01-24 16:27:19,965] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:19,966] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,966] DEBUG - UpdateCache.update() : update [class Remover], id [131076]
[2010-01-24 16:27:19,966] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:19,966] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,967] DEBUG - UpdateCache.update() : update [class AddressBook], id [163844]
[2010-01-24 16:27:19,967] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:19,970] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,970] DEBUG - UpdateCache.update() : update [class Address], id [32786]
[2010-01-24 16:27:19,970] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:19,973] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,973] DEBUG - UpdateCache.update() : update [class Statistics], id [65540]
[2010-01-24 16:27:19,973] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:19,974] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,974] DEBUG - UpdateCache.update() : update [class Favorite], id [98312]
[2010-01-24 16:27:19,974] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:19,975] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,975] DEBUG - UpdateCache.update() : update [class Favorite], id [98313]
[2010-01-24 16:27:19,975] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:19,975] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,975] DEBUG - UpdateCache.update() : update [class Remover], id [131076]
[2010-01-24 16:27:19,976] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:19,976] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:19,976] DEBUG - XmlSerializer.save() : timing 18 at [cache]
[2010-01-24 16:27:19,996] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:19,996] DEBUG - XmlSerializer.save() : timing 20 at [save]
[2010-01-24 16:27:19,996] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:19,996] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,004] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,005] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,037] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,041] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,044] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,046] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,078] DEBUG - XmlSerializer.save() : timing 37 at [extract]
[2010-01-24 16:27:20,078] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,082] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:20,083] DEBUG - XmlSerializer.save() : timing 5 at [lock]
[2010-01-24 16:27:20,083] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,091] DEBUG - XmlCompare.next(): hit  <statistics accessed="100" size="100" id="65540"> vs.  <statistics accessed="200" size="100" id="65540">
[2010-01-24 16:27:20,096] DEBUG - XmlCompare.compare() : [[163844:address-book, 65540:statistics]]
[2010-01-24 16:27:20,097] DEBUG - XmlSerializer.save() : timing 14 at [changed]
[2010-01-24 16:27:20,099] DEBUG - XmlSerializer().storeAll() : old [32786]
[2010-01-24 16:27:20,099] DEBUG - XmlSerializer().storeAll() : new [32786]
[2010-01-24 16:27:20,099] DEBUG - XmlSerializer().storeAll() : update timestamp on class Statistics for field accessed. New Val [200], old [100]
[2010-01-24 16:27:20,101] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [65540]
[2010-01-24 16:27:20,101] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field statistics. New Val [Statistics : 65540], old [Statistics : 65540]
[2010-01-24 16:27:20,102] DEBUG - XmlSerializer().storeAll() : old [98312, 98313]
[2010-01-24 16:27:20,103] DEBUG - XmlSerializer().storeAll() : new [98312, 98313]
[2010-01-24 16:27:20,107] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [163844]
[2010-01-24 16:27:20,107] DEBUG - XmlSerializer.save() : timing 10 at [storeAll]
[2010-01-24 16:27:20,108] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:20,108] DEBUG - UpdateCache.update() : update [class AddressBook], id [163844]
[2010-01-24 16:27:20,108] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,112] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,112] DEBUG - UpdateCache.update() : update [class Statistics], id [65540]
[2010-01-24 16:27:20,112] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,113] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,114] DEBUG - XmlSerializer.save() : timing 5 at [cache]
[2010-01-24 16:27:20,123] DEBUG - LockItem.unlock() : 6 current
[2010-01-24 16:27:20,123] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:20,123] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:20,123] DEBUG - XmlSerializer.save() : timing 10 at [save]
[2010-01-24 16:27:20,123] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:20,124] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-24 16:27:20,124] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-24 16:27:20,133] DEBUG - XmlSerializer.sqlLoad() : timing 3 at [query]
[2010-01-24 16:27:20,149] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,155] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,160] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,177] DEBUG - XmlSerializer.save() : timing 28 at [extract]
[2010-01-24 16:27:20,178] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-24 16:27:20,178] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:20,178] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:20,179] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,179] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:20,179] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:20,180] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:20,180] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:20,180] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,180] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:20,181] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:20,181] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:20,181] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-24 16:27:20,182] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:20,183] DEBUG - UpdateCache.update() : update [class AddressBook], id [163845]
[2010-01-24 16:27:20,183] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,190] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,190] DEBUG - UpdateCache.update() : update [class Address], id [32787]
[2010-01-24 16:27:20,191] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:20,192] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,192] DEBUG - UpdateCache.update() : update [class Statistics], id [65541]
[2010-01-24 16:27:20,192] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,193] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,193] DEBUG - UpdateCache.update() : update [class Favorite], id [98314]
[2010-01-24 16:27:20,193] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,194] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,194] DEBUG - UpdateCache.update() : update [class Favorite], id [98315]
[2010-01-24 16:27:20,194] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,195] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,195] DEBUG - UpdateCache.update() : update [class Remover], id [131077]
[2010-01-24 16:27:20,195] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:20,196] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,196] DEBUG - UpdateCache.update() : update [class AddressBook], id [163845]
[2010-01-24 16:27:20,196] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,199] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,199] DEBUG - UpdateCache.update() : update [class Address], id [32787]
[2010-01-24 16:27:20,199] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:20,200] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,200] DEBUG - UpdateCache.update() : update [class Statistics], id [65541]
[2010-01-24 16:27:20,201] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,201] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,201] DEBUG - UpdateCache.update() : update [class Favorite], id [98314]
[2010-01-24 16:27:20,202] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,203] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,203] DEBUG - UpdateCache.update() : update [class Favorite], id [98315]
[2010-01-24 16:27:20,203] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,204] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,204] DEBUG - UpdateCache.update() : update [class Remover], id [131077]
[2010-01-24 16:27:20,204] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:20,205] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,205] DEBUG - XmlSerializer.save() : timing 23 at [cache]
[2010-01-24 16:27:20,231] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:20,231] DEBUG - XmlSerializer.save() : timing 26 at [save]
[2010-01-24 16:27:20,231] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:20,231] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,234] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,235] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,250] DEBUG - XmlSerializer.sqlLoad() : query [query.fav.by.id]
[2010-01-24 16:27:20,250] DEBUG - XmlSerializer.sqlLoad() : sql [from Favorite where id = ?]
[2010-01-24 16:27:20,264] DEBUG - XmlSerializer.sqlLoad() : timing 8 at [query]
[2010-01-24 16:27:20,264] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,265] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,271] DEBUG - XmlSerializer.save() : timing 6 at [extract]
[2010-01-24 16:27:20,271] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,272] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:20,276] DEBUG - XmlSerializer.save() : timing 5 at [lock]
[2010-01-24 16:27:20,276] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,278] DEBUG - XmlCompare.next(): hit  <name>gary</name> vs.  <name>ice cream!</name>
[2010-01-24 16:27:20,278] DEBUG - XmlCompare.compare() : [[98314:favorite]]
[2010-01-24 16:27:20,278] DEBUG - XmlSerializer.save() : timing 2 at [changed]
[2010-01-24 16:27:20,279] DEBUG - XmlSerializer().storeAll() : update timestamp on class Favorite for field name. New Val [ice cream!], old [gary]
[2010-01-24 16:27:20,279] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [98314]
[2010-01-24 16:27:20,280] DEBUG - XmlSerializer.save() : timing 2 at [storeAll]
[2010-01-24 16:27:20,280] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:20,282] DEBUG - UpdateCache.updateCache() : process [from AddressBook where favorite.id = 98314]
[2010-01-24 16:27:20,311] DEBUG - UpdateCache.update() : update [class Favorite], id [98314]
[2010-01-24 16:27:20,311] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,312] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,312] DEBUG - UpdateCache.update() : update [class AddressBook], id [163845]
[2010-01-24 16:27:20,312] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,319] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,319] DEBUG - XmlSerializer.save() : timing 39 at [cache]
[2010-01-24 16:27:20,370] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:20,370] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:20,370] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:20,370] DEBUG - XmlSerializer.save() : timing 51 at [save]
[2010-01-24 16:27:20,370] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:20,370] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-24 16:27:20,371] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-24 16:27:20,376] DEBUG - XmlSerializer.sqlLoad() : timing 3 at [query]
[2010-01-24 16:27:20,381] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,388] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,396] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,409] DEBUG - XmlSerializer.save() : timing 28 at [extract]
[2010-01-24 16:27:20,409] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:20,409] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:20,410] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:20,410] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,411] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:20,411] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:20,411] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:20,412] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:20,412] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,412] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:20,412] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:20,412] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:20,413] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-24 16:27:20,413] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:20,413] DEBUG - UpdateCache.update() : update [class AddressBook], id [163846]
[2010-01-24 16:27:20,413] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,418] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,418] DEBUG - UpdateCache.update() : update [class Address], id [32788]
[2010-01-24 16:27:20,418] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:20,419] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,419] DEBUG - UpdateCache.update() : update [class Statistics], id [65542]
[2010-01-24 16:27:20,419] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,420] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,420] DEBUG - UpdateCache.update() : update [class Favorite], id [98316]
[2010-01-24 16:27:20,420] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,422] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,422] DEBUG - UpdateCache.update() : update [class Favorite], id [98317]
[2010-01-24 16:27:20,422] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,422] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,423] DEBUG - UpdateCache.update() : update [class Remover], id [131078]
[2010-01-24 16:27:20,423] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:20,423] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,424] DEBUG - UpdateCache.update() : update [class AddressBook], id [163846]
[2010-01-24 16:27:20,424] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,428] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,428] DEBUG - UpdateCache.update() : update [class Address], id [32788]
[2010-01-24 16:27:20,428] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:20,429] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,429] DEBUG - UpdateCache.update() : update [class Statistics], id [65542]
[2010-01-24 16:27:20,429] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,430] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,430] DEBUG - UpdateCache.update() : update [class Favorite], id [98316]
[2010-01-24 16:27:20,430] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,431] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,431] DEBUG - UpdateCache.update() : update [class Favorite], id [98317]
[2010-01-24 16:27:20,431] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,432] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,432] DEBUG - UpdateCache.update() : update [class Remover], id [131078]
[2010-01-24 16:27:20,432] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:20,432] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,432] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-24 16:27:20,453] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:20,453] DEBUG - XmlSerializer.save() : timing 21 at [save]
[2010-01-24 16:27:20,453] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:20,453] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,457] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,459] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,474] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,481] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,482] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,495] DEBUG - XmlSerializer.save() : timing 21 at [extract]
[2010-01-24 16:27:20,495] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,499] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:20,500] DEBUG - XmlSerializer.save() : timing 5 at [lock]
[2010-01-24 16:27:20,500] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,508] DEBUG - XmlCompare.next(): hit  <statistics accessed="100" size="100" id="65542"> vs.  <statistics accessed="1000" size="100" id="65542">
[2010-01-24 16:27:20,510] DEBUG - XmlCompare.compare() : [[163846:address-book, 65542:statistics]]
[2010-01-24 16:27:20,510] DEBUG - XmlSerializer.save() : timing 10 at [changed]
[2010-01-24 16:27:20,513] DEBUG - XmlSerializer().storeAll() : old [32788]
[2010-01-24 16:27:20,513] DEBUG - XmlSerializer().storeAll() : new [32788]
[2010-01-24 16:27:20,513] DEBUG - XmlSerializer().storeAll() : update timestamp on class Statistics for field accessed. New Val [1000], old [100]
[2010-01-24 16:27:20,514] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [65542]
[2010-01-24 16:27:20,514] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field statistics. New Val [Statistics : 65542], old [Statistics : 65542]
[2010-01-24 16:27:20,516] DEBUG - XmlSerializer().storeAll() : old [98316, 98317]
[2010-01-24 16:27:20,516] DEBUG - XmlSerializer().storeAll() : new [98316, 98317]
[2010-01-24 16:27:20,517] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [163846]
[2010-01-24 16:27:20,517] DEBUG - XmlSerializer.save() : timing 7 at [storeAll]
[2010-01-24 16:27:20,518] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:20,518] DEBUG - UpdateCache.update() : update [class AddressBook], id [163846]
[2010-01-24 16:27:20,518] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,523] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,523] DEBUG - UpdateCache.update() : update [class Statistics], id [65542]
[2010-01-24 16:27:20,523] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,524] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,524] DEBUG - XmlSerializer.save() : timing 6 at [cache]
[2010-01-24 16:27:20,532] DEBUG - LockItem.unlock() : 6 current
[2010-01-24 16:27:20,532] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:20,532] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:20,532] DEBUG - XmlSerializer.save() : timing 8 at [save]
[2010-01-24 16:27:20,532] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:20,532] DEBUG - XmlSerializer.sqlLoad() : query [query.stats.by.id]
[2010-01-24 16:27:20,532] DEBUG - XmlSerializer.sqlLoad() : sql [from Statistics where id = ?]
[2010-01-24 16:27:20,543] DEBUG - XmlSerializer.sqlLoad() : timing 7 at [query]
[2010-01-24 16:27:20,546] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,548] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-24 16:27:20,561] DEBUG - XmlSerializer.save() : timing 15 at [extract]
[2010-01-24 16:27:20,561] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:20,562] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-24 16:27:20,565] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-24 16:27:20,571] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-24 16:27:20,572] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,572] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:20,572] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-24 16:27:20,576] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-24 16:27:20,577] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,577] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:20,577] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-24 16:27:20,577] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,577] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:20,577] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-24 16:27:20,580] DEBUG - XmlSerializer.save() : timing 18 at [storeAll]
[2010-01-24 16:27:20,581] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:20,581] DEBUG - UpdateCache.update() : update [class Levelone], id [294912]
[2010-01-24 16:27:20,582] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-24 16:27:20,593] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,593] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262144]
[2010-01-24 16:27:20,594] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:20,596] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,596] DEBUG - UpdateCache.update() : update [class Levelthree], id [229376]
[2010-01-24 16:27:20,597] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:20,598] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,598] DEBUG - UpdateCache.update() : update [class Levelthree], id [229377]
[2010-01-24 16:27:20,598] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:20,598] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,598] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262145]
[2010-01-24 16:27:20,598] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:20,600] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,600] DEBUG - UpdateCache.update() : update [class Levelthree], id [229378]
[2010-01-24 16:27:20,600] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:20,601] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,601] DEBUG - UpdateCache.update() : update [class Levelone], id [294912]
[2010-01-24 16:27:20,601] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-24 16:27:20,603] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,603] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262144]
[2010-01-24 16:27:20,603] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:20,605] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,605] DEBUG - UpdateCache.update() : update [class Levelthree], id [229376]
[2010-01-24 16:27:20,605] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:20,606] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,606] DEBUG - UpdateCache.update() : update [class Levelthree], id [229377]
[2010-01-24 16:27:20,606] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:20,606] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,606] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262145]
[2010-01-24 16:27:20,606] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:20,609] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,609] DEBUG - UpdateCache.update() : update [class Levelthree], id [229378]
[2010-01-24 16:27:20,609] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:20,610] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,610] DEBUG - XmlSerializer.save() : timing 29 at [cache]
[2010-01-24 16:27:20,653] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:20,653] DEBUG - XmlSerializer.save() : timing 43 at [save]
[2010-01-24 16:27:20,653] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:20,653] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,656] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-24 16:27:20,680] DEBUG - XmlSerializer.sqlLoad() : query [query.lthree.by.id]
[2010-01-24 16:27:20,680] DEBUG - XmlSerializer.sqlLoad() : sql [from Levelthree where id = ?]
[2010-01-24 16:27:20,691] DEBUG - XmlSerializer.sqlLoad() : timing 7 at [query]
[2010-01-24 16:27:20,692] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,702] DEBUG - XmlSerializer.save() : timing 10 at [extract]
[2010-01-24 16:27:20,702] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:20,703] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:20,703] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-24 16:27:20,704] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:20,705] DEBUG - XmlCompare.next(): hit  <name>child</name> vs.  <name>childNEW</name>
[2010-01-24 16:27:20,705] DEBUG - XmlCompare.compare() : [[229376:levelthree]]
[2010-01-24 16:27:20,705] DEBUG - XmlSerializer.save() : timing 2 at [changed]
[2010-01-24 16:27:20,706] DEBUG - XmlSerializer().storeAll() : update timestamp on class Levelthree for field name. New Val [childNEW], old [child]
[2010-01-24 16:27:20,706] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [229376]
[2010-01-24 16:27:20,707] DEBUG - XmlSerializer.save() : timing 2 at [storeAll]
[2010-01-24 16:27:20,707] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:20,707] DEBUG - UpdateCache.updateCache() : process [from Leveltwo where levelthree.id = 229376]
[2010-01-24 16:27:20,723] DEBUG - UpdateCache.updateCache() : process [from Levelone where leveltwo.id = 262144]
[2010-01-24 16:27:20,745] DEBUG - UpdateCache.update() : update [class Levelthree], id [229376]
[2010-01-24 16:27:20,745] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:20,746] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,746] DEBUG - UpdateCache.update() : update [class Levelone], id [294912]
[2010-01-24 16:27:20,746] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-24 16:27:20,763] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,763] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262144]
[2010-01-24 16:27:20,764] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:20,765] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,765] DEBUG - XmlSerializer.save() : timing 58 at [cache]
[2010-01-24 16:27:20,791] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:20,791] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:20,791] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:20,791] DEBUG - XmlSerializer.save() : timing 26 at [save]
[2010-01-24 16:27:20,791] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:20,792] DEBUG - XmlSerializer.sqlLoad() : query [query.lone.by.id]
[2010-01-24 16:27:20,792] DEBUG - XmlSerializer.sqlLoad() : sql [from Levelone where id = ?]
[2010-01-24 16:27:20,802] DEBUG - XmlSerializer.sqlLoad() : timing 7 at [query]
[2010-01-24 16:27:20,804] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,807] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,809] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,830] DEBUG - XmlSerializer.save() : timing 27 at [extract]
[2010-01-24 16:27:20,830] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:20,830] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:20,831] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:20,831] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,831] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:20,832] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:20,832] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:20,832] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:20,833] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,833] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:20,833] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:20,833] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:20,833] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-24 16:27:20,834] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:20,834] DEBUG - UpdateCache.update() : update [class AddressBook], id [163847]
[2010-01-24 16:27:20,834] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,838] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,838] DEBUG - UpdateCache.update() : update [class Address], id [32789]
[2010-01-24 16:27:20,838] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:20,839] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,839] DEBUG - UpdateCache.update() : update [class Statistics], id [65543]
[2010-01-24 16:27:20,839] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,840] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,840] DEBUG - UpdateCache.update() : update [class Favorite], id [98318]
[2010-01-24 16:27:20,840] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,841] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,841] DEBUG - UpdateCache.update() : update [class Favorite], id [98319]
[2010-01-24 16:27:20,841] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,841] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,841] DEBUG - UpdateCache.update() : update [class Remover], id [131079]
[2010-01-24 16:27:20,841] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:20,842] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,842] DEBUG - UpdateCache.update() : update [class AddressBook], id [163847]
[2010-01-24 16:27:20,842] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,845] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,845] DEBUG - UpdateCache.update() : update [class Address], id [32789]
[2010-01-24 16:27:20,845] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:20,846] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,847] DEBUG - UpdateCache.update() : update [class Statistics], id [65543]
[2010-01-24 16:27:20,847] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,849] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,849] DEBUG - UpdateCache.update() : update [class Favorite], id [98318]
[2010-01-24 16:27:20,849] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,851] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,851] DEBUG - UpdateCache.update() : update [class Favorite], id [98319]
[2010-01-24 16:27:20,851] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,852] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,852] DEBUG - UpdateCache.update() : update [class Remover], id [131079]
[2010-01-24 16:27:20,852] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:20,853] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,853] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-24 16:27:20,868] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:20,868] DEBUG - XmlSerializer.save() : timing 15 at [save]
[2010-01-24 16:27:20,868] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:20,869] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,872] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,873] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,894] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,895] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,898] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,899] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,908] DEBUG - XmlSerializer.save() : timing 13 at [extract]
[2010-01-24 16:27:20,908] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:20,908] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:20,909] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:20,909] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,909] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:20,910] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [65543]
[2010-01-24 16:27:20,910] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:20,910] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:20,910] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,910] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:20,911] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:20,911] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:20,912] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-24 16:27:20,913] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:20,913] DEBUG - UpdateCache.update() : update [class AddressBook], id [163848]
[2010-01-24 16:27:20,913] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,916] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,916] DEBUG - UpdateCache.update() : update [class Address], id [32790]
[2010-01-24 16:27:20,916] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:20,918] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,918] DEBUG - UpdateCache.update() : update [class Statistics], id [65543]
[2010-01-24 16:27:20,918] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,919] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,919] DEBUG - UpdateCache.update() : update [class Favorite], id [98320]
[2010-01-24 16:27:20,919] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,919] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,919] DEBUG - UpdateCache.update() : update [class Favorite], id [98321]
[2010-01-24 16:27:20,919] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,920] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,920] DEBUG - UpdateCache.update() : update [class Remover], id [131080]
[2010-01-24 16:27:20,920] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:20,921] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,921] DEBUG - UpdateCache.update() : update [class AddressBook], id [163848]
[2010-01-24 16:27:20,921] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,924] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,924] DEBUG - UpdateCache.update() : update [class Address], id [32790]
[2010-01-24 16:27:20,927] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:20,928] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,929] DEBUG - UpdateCache.update() : update [class Favorite], id [98320]
[2010-01-24 16:27:20,929] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,929] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,929] DEBUG - UpdateCache.update() : update [class Favorite], id [98321]
[2010-01-24 16:27:20,929] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,930] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,930] DEBUG - UpdateCache.update() : update [class Remover], id [131080]
[2010-01-24 16:27:20,930] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:20,931] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,931] DEBUG - XmlSerializer.save() : timing 18 at [cache]
[2010-01-24 16:27:20,943] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:20,943] DEBUG - XmlSerializer.save() : timing 12 at [save]
[2010-01-24 16:27:20,943] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:20,943] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,946] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,947] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,962] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:20,965] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,966] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:20,974] DEBUG - XmlSerializer.save() : timing 12 at [extract]
[2010-01-24 16:27:20,975] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-24 16:27:20,975] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:20,975] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:20,976] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,976] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:20,976] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:20,977] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:20,977] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:20,977] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:20,977] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:20,977] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:20,977] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:20,978] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-24 16:27:20,978] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:20,978] DEBUG - UpdateCache.update() : update [class AddressBook], id [163849]
[2010-01-24 16:27:20,978] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,982] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,982] DEBUG - UpdateCache.update() : update [class Address], id [32791]
[2010-01-24 16:27:20,982] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:20,983] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,983] DEBUG - UpdateCache.update() : update [class Statistics], id [65544]
[2010-01-24 16:27:20,983] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,984] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,984] DEBUG - UpdateCache.update() : update [class Favorite], id [98322]
[2010-01-24 16:27:20,984] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,984] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,985] DEBUG - UpdateCache.update() : update [class Favorite], id [98323]
[2010-01-24 16:27:20,985] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,985] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,985] DEBUG - UpdateCache.update() : update [class Remover], id [131081]
[2010-01-24 16:27:20,985] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:20,986] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,986] DEBUG - UpdateCache.update() : update [class AddressBook], id [163849]
[2010-01-24 16:27:20,986] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:20,989] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,989] DEBUG - UpdateCache.update() : update [class Address], id [32791]
[2010-01-24 16:27:20,989] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:20,990] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,990] DEBUG - UpdateCache.update() : update [class Statistics], id [65544]
[2010-01-24 16:27:20,991] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:20,991] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,991] DEBUG - UpdateCache.update() : update [class Favorite], id [98322]
[2010-01-24 16:27:20,991] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,995] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,995] DEBUG - UpdateCache.update() : update [class Favorite], id [98323]
[2010-01-24 16:27:20,995] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:20,996] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,996] DEBUG - UpdateCache.update() : update [class Remover], id [131081]
[2010-01-24 16:27:20,996] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:20,997] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:20,997] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-24 16:27:21,013] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:21,013] DEBUG - XmlSerializer.save() : timing 16 at [save]
[2010-01-24 16:27:21,013] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:21,014] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,019] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,020] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,036] DEBUG - XmlSerializer.copy() : AddressBook, id 163849
[2010-01-24 16:27:21,052] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:21,052] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,052] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:21,053] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:21,053] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,053] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,053] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,053] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:21,054] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:21,054] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:21,057] DEBUG - UpdateCache.update() : update [class AddressBook], id [163850]
[2010-01-24 16:27:21,057] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,060] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,061] DEBUG - UpdateCache.update() : update [class Address], id [32792]
[2010-01-24 16:27:21,061] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:21,062] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,062] DEBUG - UpdateCache.update() : update [class Statistics], id [65545]
[2010-01-24 16:27:21,062] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:21,063] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,063] DEBUG - UpdateCache.update() : update [class Favorite], id [98324]
[2010-01-24 16:27:21,063] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,065] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,065] DEBUG - UpdateCache.update() : update [class Favorite], id [98325]
[2010-01-24 16:27:21,065] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,066] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,066] DEBUG - UpdateCache.update() : update [class Remover], id [131082]
[2010-01-24 16:27:21,066] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:21,067] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,079] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,083] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,086] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,087] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,102] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,144] DEBUG - XmlSerializer.save() : timing 42 at [extract]
[2010-01-24 16:27:21,144] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:21,145] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-24 16:27:21,147] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [327680]
[2010-01-24 16:27:21,147] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [327681]
[2010-01-24 16:27:21,147] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [327682]
[2010-01-24 16:27:21,147] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,147] DEBUG - XmlSerializer().storeAll() : new [327680, 327681, 327682]
[2010-01-24 16:27:21,148] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [360448]
[2010-01-24 16:27:21,148] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,148] DEBUG - XmlSerializer().storeAll() : new [360448]
[2010-01-24 16:27:21,150] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [393216]
[2010-01-24 16:27:21,150] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,150] DEBUG - XmlSerializer().storeAll() : new [393216]
[2010-01-24 16:27:21,150] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-24 16:27:21,156] DEBUG - XmlSerializer.save() : timing 11 at [storeAll]
[2010-01-24 16:27:21,158] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-24 16:27:21,159] DEBUG - UpdateCache.update() : update [class MixedKids], id [458752]
[2010-01-24 16:27:21,160] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-24 16:27:21,173] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,173] DEBUG - UpdateCache.update() : update [class Interleave], id [425984]
[2010-01-24 16:27:21,178] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-24 16:27:21,180] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,180] DEBUG - UpdateCache.update() : update [class KidOne], id [327680]
[2010-01-24 16:27:21,180] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:21,181] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,181] DEBUG - UpdateCache.update() : update [class KidOne], id [327681]
[2010-01-24 16:27:21,181] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:21,182] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,182] DEBUG - UpdateCache.update() : update [class KidOne], id [327682]
[2010-01-24 16:27:21,182] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:21,183] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,183] DEBUG - UpdateCache.update() : update [class KidTwo], id [360448]
[2010-01-24 16:27:21,183] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-24 16:27:21,183] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,183] DEBUG - UpdateCache.update() : update [class KidThree], id [393216]
[2010-01-24 16:27:21,184] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-24 16:27:21,184] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,184] DEBUG - UpdateCache.update() : update [class MixedKids], id [458752]
[2010-01-24 16:27:21,184] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-24 16:27:21,189] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,190] DEBUG - UpdateCache.update() : update [class KidOne], id [327680]
[2010-01-24 16:27:21,190] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:21,190] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,190] DEBUG - UpdateCache.update() : update [class KidOne], id [327681]
[2010-01-24 16:27:21,190] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:21,191] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,191] DEBUG - UpdateCache.update() : update [class KidOne], id [327682]
[2010-01-24 16:27:21,191] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:21,192] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,192] DEBUG - UpdateCache.update() : update [class KidTwo], id [360448]
[2010-01-24 16:27:21,192] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-24 16:27:21,193] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,193] DEBUG - UpdateCache.update() : update [class KidThree], id [393216]
[2010-01-24 16:27:21,193] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-24 16:27:21,194] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,194] DEBUG - XmlSerializer.save() : timing 36 at [cache]
[2010-01-24 16:27:21,258] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:21,258] DEBUG - XmlSerializer.save() : timing 64 at [save]
[2010-01-24 16:27:21,258] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:21,258] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,269] DEBUG - XmlSerializer.copy() : MixedKids, id 458752
[2010-01-24 16:27:21,304] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [327683]
[2010-01-24 16:27:21,304] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [327684]
[2010-01-24 16:27:21,304] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [327685]
[2010-01-24 16:27:21,304] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,304] DEBUG - XmlSerializer().storeAll() : new [327683, 327684, 327685]
[2010-01-24 16:27:21,305] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [360449]
[2010-01-24 16:27:21,305] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,305] DEBUG - XmlSerializer().storeAll() : new [360449]
[2010-01-24 16:27:21,305] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [393217]
[2010-01-24 16:27:21,305] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,305] DEBUG - XmlSerializer().storeAll() : new [393217]
[2010-01-24 16:27:21,305] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-24 16:27:21,307] DEBUG - UpdateCache.update() : update [class MixedKids], id [458753]
[2010-01-24 16:27:21,307] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-24 16:27:21,311] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,311] DEBUG - UpdateCache.update() : update [class Interleave], id [425985]
[2010-01-24 16:27:21,311] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-24 16:27:21,312] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,312] DEBUG - UpdateCache.update() : update [class KidOne], id [327683]
[2010-01-24 16:27:21,312] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:21,312] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,313] DEBUG - UpdateCache.update() : update [class KidOne], id [327684]
[2010-01-24 16:27:21,313] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:21,313] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,313] DEBUG - UpdateCache.update() : update [class KidOne], id [327685]
[2010-01-24 16:27:21,313] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:21,314] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,314] DEBUG - UpdateCache.update() : update [class KidTwo], id [360449]
[2010-01-24 16:27:21,314] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-24 16:27:21,315] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,315] DEBUG - UpdateCache.update() : update [class KidThree], id [393217]
[2010-01-24 16:27:21,315] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-24 16:27:21,315] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,328] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-24 16:27:21,332] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,344] DEBUG - XmlSerializer.sqlLoad() : query [query.multi.by.id]
[2010-01-24 16:27:21,344] DEBUG - XmlSerializer.sqlLoad() : sql [from MixedKids where id = ?]
[2010-01-24 16:27:21,355] DEBUG - XmlSerializer.sqlLoad() : timing 8 at [query]
[2010-01-24 16:27:21,446] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,452] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,453] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,462] DEBUG - XmlSerializer.save() : timing 17 at [extract]
[2010-01-24 16:27:21,463] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-24 16:27:21,463] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:21,464] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:21,464] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,464] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:21,465] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:21,465] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,465] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,465] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,465] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:21,466] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:21,466] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:21,467] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-24 16:27:21,467] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:21,467] DEBUG - UpdateCache.update() : update [class AddressBook], id [163851]
[2010-01-24 16:27:21,467] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,471] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,471] DEBUG - UpdateCache.update() : update [class Address], id [32793]
[2010-01-24 16:27:21,471] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:21,472] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,472] DEBUG - UpdateCache.update() : update [class Statistics], id [65546]
[2010-01-24 16:27:21,472] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:21,473] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,473] DEBUG - UpdateCache.update() : update [class Favorite], id [98326]
[2010-01-24 16:27:21,473] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,474] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,474] DEBUG - UpdateCache.update() : update [class Favorite], id [98327]
[2010-01-24 16:27:21,474] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,474] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,474] DEBUG - UpdateCache.update() : update [class Remover], id [131083]
[2010-01-24 16:27:21,474] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:21,475] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,475] DEBUG - UpdateCache.update() : update [class AddressBook], id [163851]
[2010-01-24 16:27:21,475] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,479] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,479] DEBUG - UpdateCache.update() : update [class Address], id [32793]
[2010-01-24 16:27:21,479] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:21,480] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,480] DEBUG - UpdateCache.update() : update [class Statistics], id [65546]
[2010-01-24 16:27:21,480] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:21,481] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,481] DEBUG - UpdateCache.update() : update [class Favorite], id [98326]
[2010-01-24 16:27:21,481] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,482] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,482] DEBUG - UpdateCache.update() : update [class Favorite], id [98327]
[2010-01-24 16:27:21,482] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,482] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,482] DEBUG - UpdateCache.update() : update [class Remover], id [131083]
[2010-01-24 16:27:21,482] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:21,484] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,484] DEBUG - XmlSerializer.save() : timing 17 at [cache]
[2010-01-24 16:27:21,501] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:21,501] DEBUG - XmlSerializer.save() : timing 17 at [save]
[2010-01-24 16:27:21,501] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:21,503] DEBUG - XmlSerializer.sqlLoad() : query [query.all.entries]
[2010-01-24 16:27:21,503] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook]
[2010-01-24 16:27:21,515] DEBUG - XmlSerializer.sqlLoad() : timing 11 at [query]
[2010-01-24 16:27:21,526] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,534] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,535] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,545] DEBUG - XmlSerializer.save() : timing 19 at [extract]
[2010-01-24 16:27:21,545] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:21,546] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-24 16:27:21,546] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:21,547] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,547] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:21,547] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:21,548] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,548] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,548] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,548] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:21,548] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:21,548] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:21,549] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-24 16:27:21,549] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:21,549] DEBUG - UpdateCache.update() : update [class AddressBook], id [163852]
[2010-01-24 16:27:21,549] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,553] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,553] DEBUG - UpdateCache.update() : update [class Address], id [32794]
[2010-01-24 16:27:21,553] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:21,554] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,554] DEBUG - UpdateCache.update() : update [class Statistics], id [65547]
[2010-01-24 16:27:21,554] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:21,555] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,555] DEBUG - UpdateCache.update() : update [class Favorite], id [98328]
[2010-01-24 16:27:21,555] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,555] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,555] DEBUG - UpdateCache.update() : update [class Favorite], id [98329]
[2010-01-24 16:27:21,556] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,556] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,556] DEBUG - UpdateCache.update() : update [class Remover], id [131084]
[2010-01-24 16:27:21,556] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:21,557] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,557] DEBUG - UpdateCache.update() : update [class AddressBook], id [163852]
[2010-01-24 16:27:21,557] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,562] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,562] DEBUG - UpdateCache.update() : update [class Address], id [32794]
[2010-01-24 16:27:21,562] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:21,563] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,563] DEBUG - UpdateCache.update() : update [class Statistics], id [65547]
[2010-01-24 16:27:21,563] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:21,564] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,564] DEBUG - UpdateCache.update() : update [class Favorite], id [98328]
[2010-01-24 16:27:21,564] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,564] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,564] DEBUG - UpdateCache.update() : update [class Favorite], id [98329]
[2010-01-24 16:27:21,564] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,565] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,565] DEBUG - UpdateCache.update() : update [class Remover], id [131084]
[2010-01-24 16:27:21,565] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:21,567] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,567] DEBUG - XmlSerializer.save() : timing 18 at [cache]
[2010-01-24 16:27:21,581] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:21,581] DEBUG - XmlSerializer.save() : timing 14 at [save]
[2010-01-24 16:27:21,581] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:21,581] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,584] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,585] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,599] DEBUG - XmlSerializer.sqlLoad() : query [query.native.by.id]
[2010-01-24 16:27:21,599] DEBUG - XmlSerializer.sqlLoad() : sql [select {address_book.*} from address_book where id = ?]
[2010-01-24 16:27:21,634] DEBUG - XmlSerializer.sqlLoad() : timing 29 at [query]
[2010-01-24 16:27:21,636] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,639] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,640] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,653] DEBUG - XmlSerializer.save() : timing 18 at [extract]
[2010-01-24 16:27:21,653] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:21,653] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:21,654] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:21,655] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,655] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:21,655] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:21,656] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,656] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,656] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,656] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:21,656] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:21,657] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:21,657] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-24 16:27:21,657] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:21,657] DEBUG - UpdateCache.update() : update [class AddressBook], id [163853]
[2010-01-24 16:27:21,657] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,661] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,661] DEBUG - UpdateCache.update() : update [class Address], id [32795]
[2010-01-24 16:27:21,662] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:21,663] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,663] DEBUG - UpdateCache.update() : update [class Statistics], id [65548]
[2010-01-24 16:27:21,663] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:21,664] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,664] DEBUG - UpdateCache.update() : update [class Favorite], id [98330]
[2010-01-24 16:27:21,664] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,665] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,665] DEBUG - UpdateCache.update() : update [class Favorite], id [98331]
[2010-01-24 16:27:21,665] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,665] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,665] DEBUG - UpdateCache.update() : update [class Remover], id [131085]
[2010-01-24 16:27:21,665] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:21,666] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,666] DEBUG - UpdateCache.update() : update [class AddressBook], id [163853]
[2010-01-24 16:27:21,666] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,670] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,671] DEBUG - UpdateCache.update() : update [class Address], id [32795]
[2010-01-24 16:27:21,671] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:21,672] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,672] DEBUG - UpdateCache.update() : update [class Statistics], id [65548]
[2010-01-24 16:27:21,672] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:21,672] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,672] DEBUG - UpdateCache.update() : update [class Favorite], id [98330]
[2010-01-24 16:27:21,673] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,674] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,674] DEBUG - UpdateCache.update() : update [class Favorite], id [98331]
[2010-01-24 16:27:21,674] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,675] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,675] DEBUG - UpdateCache.update() : update [class Remover], id [131085]
[2010-01-24 16:27:21,675] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:21,675] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,675] DEBUG - XmlSerializer.save() : timing 18 at [cache]
[2010-01-24 16:27:21,689] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:21,689] DEBUG - XmlSerializer.save() : timing 14 at [save]
[2010-01-24 16:27:21,689] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:21,689] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,695] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,696] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,708] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-24 16:27:21,709] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-24 16:27:21,712] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-24 16:27:21,714] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,716] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,717] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,730] DEBUG - XmlSerializer.save() : timing 16 at [extract]
[2010-01-24 16:27:21,730] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:21,730] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:21,731] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:21,731] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,732] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:21,732] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:21,733] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,733] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,733] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,733] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:21,733] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:21,733] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:21,734] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-24 16:27:21,734] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:21,734] DEBUG - UpdateCache.update() : update [class AddressBook], id [163854]
[2010-01-24 16:27:21,734] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,738] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,738] DEBUG - UpdateCache.update() : update [class Address], id [32796]
[2010-01-24 16:27:21,738] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:21,739] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,739] DEBUG - UpdateCache.update() : update [class Statistics], id [65549]
[2010-01-24 16:27:21,739] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:21,740] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,740] DEBUG - UpdateCache.update() : update [class Favorite], id [98332]
[2010-01-24 16:27:21,740] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,741] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,741] DEBUG - UpdateCache.update() : update [class Favorite], id [98333]
[2010-01-24 16:27:21,741] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,741] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,741] DEBUG - UpdateCache.update() : update [class Remover], id [131086]
[2010-01-24 16:27:21,741] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:21,742] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,742] DEBUG - UpdateCache.update() : update [class AddressBook], id [163854]
[2010-01-24 16:27:21,742] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,747] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,747] DEBUG - UpdateCache.update() : update [class Address], id [32796]
[2010-01-24 16:27:21,747] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:21,748] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,748] DEBUG - UpdateCache.update() : update [class Statistics], id [65549]
[2010-01-24 16:27:21,748] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:21,749] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,749] DEBUG - UpdateCache.update() : update [class Favorite], id [98332]
[2010-01-24 16:27:21,749] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,750] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,750] DEBUG - UpdateCache.update() : update [class Favorite], id [98333]
[2010-01-24 16:27:21,750] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,750] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,750] DEBUG - UpdateCache.update() : update [class Remover], id [131086]
[2010-01-24 16:27:21,751] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:21,754] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,754] DEBUG - XmlSerializer.save() : timing 20 at [cache]
[2010-01-24 16:27:21,769] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:21,769] DEBUG - XmlSerializer.save() : timing 15 at [save]
[2010-01-24 16:27:21,769] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:21,769] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,772] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,773] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,785] DEBUG - XmlSerializer.sqlLoad() : query [query.multiple]
[2010-01-24 16:27:21,785] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ? or id in (:ids)]
[2010-01-24 16:27:21,818] DEBUG - XmlSerializer.sqlLoad() : timing 15 at [query]
[2010-01-24 16:27:21,819] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,822] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,823] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,833] DEBUG - XmlSerializer.save() : timing 14 at [extract]
[2010-01-24 16:27:21,833] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:21,833] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:21,834] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:21,835] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,835] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:21,835] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:21,835] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,836] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:21,836] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:21,836] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:21,836] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:21,837] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:21,837] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-24 16:27:21,838] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:21,838] DEBUG - UpdateCache.update() : update [class AddressBook], id [163855]
[2010-01-24 16:27:21,838] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,845] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,845] DEBUG - UpdateCache.update() : update [class Address], id [32797]
[2010-01-24 16:27:21,845] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:21,846] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,846] DEBUG - UpdateCache.update() : update [class Statistics], id [65550]
[2010-01-24 16:27:21,846] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:21,848] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,848] DEBUG - UpdateCache.update() : update [class Favorite], id [98334]
[2010-01-24 16:27:21,848] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,849] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,849] DEBUG - UpdateCache.update() : update [class Favorite], id [98335]
[2010-01-24 16:27:21,849] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,849] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,849] DEBUG - UpdateCache.update() : update [class Remover], id [131087]
[2010-01-24 16:27:21,849] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:21,850] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,850] DEBUG - UpdateCache.update() : update [class AddressBook], id [163855]
[2010-01-24 16:27:21,850] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:21,853] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,853] DEBUG - UpdateCache.update() : update [class Address], id [32797]
[2010-01-24 16:27:21,853] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:21,854] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,854] DEBUG - UpdateCache.update() : update [class Statistics], id [65550]
[2010-01-24 16:27:21,854] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:21,855] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,855] DEBUG - UpdateCache.update() : update [class Favorite], id [98334]
[2010-01-24 16:27:21,855] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,856] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,856] DEBUG - UpdateCache.update() : update [class Favorite], id [98335]
[2010-01-24 16:27:21,856] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:21,857] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,857] DEBUG - UpdateCache.update() : update [class Remover], id [131087]
[2010-01-24 16:27:21,857] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:21,857] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:21,857] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-24 16:27:21,875] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:21,875] DEBUG - XmlSerializer.save() : timing 18 at [save]
[2010-01-24 16:27:21,875] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:21,875] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:21,878] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:21,879] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:22,890] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:22,895] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:22,899] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:22,900] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:22,923] DEBUG - XmlSerializer.save() : timing 29 at [extract]
[2010-01-24 16:27:22,923] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:22,928] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:22,928] DEBUG - XmlSerializer.save() : timing 5 at [lock]
[2010-01-24 16:27:22,929] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:22,935] DEBUG - XmlCompare.next(): hit  <favorite user-id="25" id="98334"> vs.  <favorite user-id="30" id="98335">
[2010-01-24 16:27:22,935] DEBUG - XmlCompare.next(): hit   <name>gary</name> vs.   <name>jerryg</name>
[2010-01-24 16:27:22,936] DEBUG - XmlCompare.next(): hit  <favorite user-id="30" id="98335"> vs.  <favorite user-id="25" id="98334">
[2010-01-24 16:27:22,937] DEBUG - XmlCompare.next(): hit   <name>joe</name> vs.   <name>gary</name>
[2010-01-24 16:27:22,937] DEBUG - XmlCompare.compare() : [[98335:favorite, 98334:favorite, 163855:address-book]]
[2010-01-24 16:27:22,937] DEBUG - XmlSerializer.save() : timing 9 at [changed]
[2010-01-24 16:27:22,939] DEBUG - XmlSerializer().storeAll() : old [32797]
[2010-01-24 16:27:22,939] DEBUG - XmlSerializer().storeAll() : new [32797]
[2010-01-24 16:27:22,940] DEBUG - XmlSerializer().storeAll() : update timestamp on class Favorite for field name. New Val [jerryg], old [joe]
[2010-01-24 16:27:22,941] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [98335]
[2010-01-24 16:27:22,943] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [98334]
[2010-01-24 16:27:22,943] DEBUG - XmlSerializer().storeAll() : old [98334, 98335]
[2010-01-24 16:27:22,943] DEBUG - XmlSerializer().storeAll() : new [98335, 98334]
[2010-01-24 16:27:22,943] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field favorite. New Val [[Favorite : 98335, Favorite : 98334]], old [[Favorite : 98335, Favorite : 98334]]
[2010-01-24 16:27:22,944] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [163855]
[2010-01-24 16:27:22,944] DEBUG - XmlSerializer.save() : timing 7 at [storeAll]
[2010-01-24 16:27:22,944] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:22,944] DEBUG - UpdateCache.update() : update [class AddressBook], id [163855]
[2010-01-24 16:27:22,944] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:22,948] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:22,948] DEBUG - UpdateCache.update() : update [class Favorite], id [98335]
[2010-01-24 16:27:22,948] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:22,948] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:22,948] DEBUG - UpdateCache.update() : update [class Favorite], id [98334]
[2010-01-24 16:27:22,948] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:22,949] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:22,949] DEBUG - XmlSerializer.save() : timing 5 at [cache]
[2010-01-24 16:27:22,961] DEBUG - LockItem.unlock() : 6 current
[2010-01-24 16:27:22,961] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:22,961] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:22,961] DEBUG - XmlSerializer.save() : timing 12 at [save]
[2010-01-24 16:27:22,961] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:22,961] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-24 16:27:22,961] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-24 16:27:22,979] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-24 16:27:22,979] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:22,982] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:22,983] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:22,997] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,007] DEBUG - XmlSerializer.save() : timing 10 at [extract]
[2010-01-24 16:27:23,007] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:23,007] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:23,008] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [327686]
[2010-01-24 16:27:23,008] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [327687]
[2010-01-24 16:27:23,008] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [327688]
[2010-01-24 16:27:23,008] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,008] DEBUG - XmlSerializer().storeAll() : new [327686, 327687, 327688]
[2010-01-24 16:27:23,009] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [360450]
[2010-01-24 16:27:23,009] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,009] DEBUG - XmlSerializer().storeAll() : new [360450]
[2010-01-24 16:27:23,009] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [393218]
[2010-01-24 16:27:23,009] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,009] DEBUG - XmlSerializer().storeAll() : new [393218]
[2010-01-24 16:27:23,009] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-24 16:27:23,011] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-24 16:27:23,012] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:23,012] DEBUG - UpdateCache.update() : update [class MixedKids], id [458754]
[2010-01-24 16:27:23,012] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-24 16:27:23,019] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,019] DEBUG - UpdateCache.update() : update [class Interleave], id [425986]
[2010-01-24 16:27:23,019] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-24 16:27:23,020] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,020] DEBUG - UpdateCache.update() : update [class KidOne], id [327686]
[2010-01-24 16:27:23,020] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:23,020] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,020] DEBUG - UpdateCache.update() : update [class KidOne], id [327687]
[2010-01-24 16:27:23,020] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:23,022] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,023] DEBUG - UpdateCache.update() : update [class KidOne], id [327688]
[2010-01-24 16:27:23,023] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:23,024] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,024] DEBUG - UpdateCache.update() : update [class KidTwo], id [360450]
[2010-01-24 16:27:23,024] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-24 16:27:23,025] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,025] DEBUG - UpdateCache.update() : update [class KidThree], id [393218]
[2010-01-24 16:27:23,025] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-24 16:27:23,026] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,027] DEBUG - UpdateCache.update() : update [class MixedKids], id [458754]
[2010-01-24 16:27:23,027] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-24 16:27:23,029] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,030] DEBUG - UpdateCache.update() : update [class KidOne], id [327686]
[2010-01-24 16:27:23,030] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:23,030] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,030] DEBUG - UpdateCache.update() : update [class KidOne], id [327687]
[2010-01-24 16:27:23,030] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:23,031] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,031] DEBUG - UpdateCache.update() : update [class KidOne], id [327688]
[2010-01-24 16:27:23,031] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:23,031] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,032] DEBUG - UpdateCache.update() : update [class KidTwo], id [360450]
[2010-01-24 16:27:23,032] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-24 16:27:23,032] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,032] DEBUG - UpdateCache.update() : update [class KidThree], id [393218]
[2010-01-24 16:27:23,032] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-24 16:27:23,033] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,033] DEBUG - XmlSerializer.save() : timing 21 at [cache]
[2010-01-24 16:27:23,049] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:23,049] DEBUG - XmlSerializer.save() : timing 16 at [save]
[2010-01-24 16:27:23,049] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:23,049] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,060] DEBUG - XmlSerializer.sqlLoad() : query [query.multi.by.id]
[2010-01-24 16:27:23,060] DEBUG - XmlSerializer.sqlLoad() : sql [from MixedKids where id = ?]
[2010-01-24 16:27:23,064] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-24 16:27:23,190] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,210] DEBUG - XmlSerializer.save() : timing 20 at [extract]
[2010-01-24 16:27:23,210] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-24 16:27:23,213] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:23,214] DEBUG - XmlSerializer.save() : timing 4 at [lock]
[2010-01-24 16:27:23,214] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-24 16:27:23,218] DEBUG - XmlCompare.next(): hit  <kid-one id="327686"> vs.  <kid-two id="360450">
[2010-01-24 16:27:23,218] DEBUG - XmlCompare.next(): hit   <title>kid1-1</title> vs.   <title>kid2-1</title>
[2010-01-24 16:27:23,218] DEBUG - XmlCompare.next(): hit  </kid-one> vs.  </kid-two>
[2010-01-24 16:27:23,219] DEBUG - XmlCompare.next(): hit  <kid-two id="360450"> vs.  <kid-one id="327686">
[2010-01-24 16:27:23,219] DEBUG - XmlCompare.next(): hit   <title>kid2-1</title> vs.   <title>kid1-1</title>
[2010-01-24 16:27:23,219] DEBUG - XmlCompare.next(): hit  </kid-two> vs.  </kid-one>
[2010-01-24 16:27:23,221] DEBUG - XmlCompare.compare() : [[360450:kid-two, 327686:kid-one, 458754:mixed-kids]]
[2010-01-24 16:27:23,221] DEBUG - XmlSerializer.save() : timing 7 at [changed]
[2010-01-24 16:27:23,221] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [327686]
[2010-01-24 16:27:23,224] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,224] DEBUG - XmlSerializer().storeAll() : new [327686, 327687, 327688]
[2010-01-24 16:27:23,224] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidOne. New Val [[KidOne : 327686, KidOne : 327687, KidOne : 327688]], old [[KidOne : 327686, KidOne : 327687, KidOne : 327688]]
[2010-01-24 16:27:23,225] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [360450]
[2010-01-24 16:27:23,227] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,227] DEBUG - XmlSerializer().storeAll() : new [360450]
[2010-01-24 16:27:23,227] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidTwo. New Val [[KidTwo : 360450]], old [[KidTwo : 360450]]
[2010-01-24 16:27:23,228] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,228] DEBUG - XmlSerializer().storeAll() : new [393218]
[2010-01-24 16:27:23,229] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidThree. New Val [[KidThree : 393218]], old [[KidThree : 393218]]
[2010-01-24 16:27:23,229] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [458754]
[2010-01-24 16:27:23,229] DEBUG - XmlSerializer.orderchange() : go [title:3556498,kidOne:-2047425050,kidTwo:-2047387192,kidOne:-2047425049,kidOne:-2047425048,kidThree:-790509926,] vs [title:3556498,kidTwo:-2047387192,kidOne:-2047425050,kidOne:-2047425049,kidOne:-2047425048,kidThree:-790509926,]
[2010-01-24 16:27:23,230] DEBUG - XmlSerializer.save() : timing 9 at [storeAll]
[2010-01-24 16:27:23,232] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-24 16:27:23,232] DEBUG - UpdateCache.update() : update [class MixedKids], id [458754]
[2010-01-24 16:27:23,232] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-24 16:27:23,235] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,236] DEBUG - UpdateCache.update() : update [class KidOne], id [327686]
[2010-01-24 16:27:23,236] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-24 16:27:23,236] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,236] DEBUG - UpdateCache.update() : update [class KidTwo], id [360450]
[2010-01-24 16:27:23,236] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-24 16:27:23,237] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,237] DEBUG - XmlSerializer.save() : timing 5 at [cache]
[2010-01-24 16:27:23,260] DEBUG - LockItem.unlock() : 6 current
[2010-01-24 16:27:23,260] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:23,260] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:23,260] DEBUG - XmlSerializer.save() : timing 23 at [save]
[2010-01-24 16:27:23,260] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:23,295] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,299] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,300] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,308] DEBUG - XmlSerializer.save() : timing 13 at [extract]
[2010-01-24 16:27:23,309] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-24 16:27:23,309] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:23,310] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:23,310] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,310] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:23,311] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:23,312] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:23,312] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:23,312] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,312] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:23,312] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:23,312] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:23,313] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-24 16:27:23,313] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:23,313] DEBUG - UpdateCache.update() : update [class AddressBook], id [163856]
[2010-01-24 16:27:23,313] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,316] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,316] DEBUG - UpdateCache.update() : update [class Address], id [32798]
[2010-01-24 16:27:23,317] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:23,318] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,318] DEBUG - UpdateCache.update() : update [class Statistics], id [65551]
[2010-01-24 16:27:23,318] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:23,318] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,318] DEBUG - UpdateCache.update() : update [class Favorite], id [98336]
[2010-01-24 16:27:23,318] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:23,319] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,319] DEBUG - UpdateCache.update() : update [class Favorite], id [98337]
[2010-01-24 16:27:23,319] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:23,320] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,320] DEBUG - UpdateCache.update() : update [class Remover], id [131088]
[2010-01-24 16:27:23,320] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:23,320] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,320] DEBUG - UpdateCache.update() : update [class AddressBook], id [163856]
[2010-01-24 16:27:23,321] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,330] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,330] DEBUG - UpdateCache.update() : update [class Address], id [32798]
[2010-01-24 16:27:23,330] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:23,332] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,332] DEBUG - UpdateCache.update() : update [class Statistics], id [65551]
[2010-01-24 16:27:23,332] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:23,332] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,332] DEBUG - UpdateCache.update() : update [class Favorite], id [98336]
[2010-01-24 16:27:23,332] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:23,333] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,333] DEBUG - UpdateCache.update() : update [class Favorite], id [98337]
[2010-01-24 16:27:23,333] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:23,334] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,334] DEBUG - UpdateCache.update() : update [class Remover], id [131088]
[2010-01-24 16:27:23,334] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:23,334] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,334] DEBUG - XmlSerializer.save() : timing 21 at [cache]
[2010-01-24 16:27:23,348] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:23,348] DEBUG - XmlSerializer.save() : timing 14 at [save]
[2010-01-24 16:27:23,348] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:23,348] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,354] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,358] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,375] DEBUG - XmlSerializer.remove() : Address, id 32798
[2010-01-24 16:27:23,376] DEBUG - UpdateCache.updateCache() : process [from AddressBook where address.id = 32798]
[2010-01-24 16:27:23,431] DEBUG - UpdateCache.update() : update [class AddressBook], id [163856]
[2010-01-24 16:27:23,432] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,436] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,436] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-24 16:27:23,436] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-24 16:27:23,444] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-24 16:27:23,445] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,449] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,451] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,463] DEBUG - XmlSerializer.remove() : Remover, id 131088
[2010-01-24 16:27:23,464] DEBUG - UpdateCache.updateCache() : process [from AddressBook where remover.id = 131088]
[2010-01-24 16:27:23,484] DEBUG - UpdateCache.update() : update [class AddressBook], id [163856]
[2010-01-24 16:27:23,484] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,488] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,489] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-24 16:27:23,489] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-24 16:27:23,494] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-24 16:27:23,495] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,501] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,503] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,513] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,516] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,518] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,558] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,560] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,561] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,570] DEBUG - XmlSerializer.save() : timing 13 at [extract]
[2010-01-24 16:27:23,571] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-24 16:27:23,571] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:23,572] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-24 16:27:23,572] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,572] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:23,572] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-24 16:27:23,573] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:23,573] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-24 16:27:23,573] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,573] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:23,574] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-24 16:27:23,574] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-24 16:27:23,574] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-24 16:27:23,575] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:23,575] DEBUG - UpdateCache.update() : update [class AddressBook], id [163857]
[2010-01-24 16:27:23,575] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,578] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,578] DEBUG - UpdateCache.update() : update [class Address], id [32799]
[2010-01-24 16:27:23,578] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:23,579] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,579] DEBUG - UpdateCache.update() : update [class Statistics], id [65552]
[2010-01-24 16:27:23,579] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:23,580] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,580] DEBUG - UpdateCache.update() : update [class Favorite], id [98338]
[2010-01-24 16:27:23,580] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:23,581] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,581] DEBUG - UpdateCache.update() : update [class Favorite], id [98339]
[2010-01-24 16:27:23,581] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:23,582] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,582] DEBUG - UpdateCache.update() : update [class Remover], id [131089]
[2010-01-24 16:27:23,582] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:23,583] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,583] DEBUG - UpdateCache.update() : update [class AddressBook], id [163857]
[2010-01-24 16:27:23,583] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,586] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,586] DEBUG - UpdateCache.update() : update [class Address], id [32799]
[2010-01-24 16:27:23,586] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-24 16:27:23,587] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,587] DEBUG - UpdateCache.update() : update [class Statistics], id [65552]
[2010-01-24 16:27:23,587] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-24 16:27:23,588] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,588] DEBUG - UpdateCache.update() : update [class Favorite], id [98338]
[2010-01-24 16:27:23,588] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:23,589] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,589] DEBUG - UpdateCache.update() : update [class Favorite], id [98339]
[2010-01-24 16:27:23,589] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-24 16:27:23,589] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,589] DEBUG - UpdateCache.update() : update [class Remover], id [131089]
[2010-01-24 16:27:23,589] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-24 16:27:23,590] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,590] DEBUG - XmlSerializer.save() : timing 15 at [cache]
[2010-01-24 16:27:23,611] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:23,611] DEBUG - XmlSerializer.save() : timing 21 at [save]
[2010-01-24 16:27:23,611] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:23,632] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,632] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,635] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,635] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,632] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,637] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,637] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,642] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,643] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-24 16:27:23,660] DEBUG - XmlSerializer.save() : timing 28 at [extract]
[2010-01-24 16:27:23,660] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,664] DEBUG - XmlSerializer.save() : timing 32 at [extract]
[2010-01-24 16:27:23,664] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,664] DEBUG - LockItem.lock() : lock on Thread-111
[2010-01-24 16:27:23,666] DEBUG - XmlSerializer.save() : timing 34 at [extract]
[2010-01-24 16:27:23,666] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,668] DEBUG - XmlSerializer.save() : timing 8 at [lock]
[2010-01-24 16:27:23,668] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,677] DEBUG - XmlCompare.compare() : [[]]
[2010-01-24 16:27:23,677] DEBUG - XmlSerializer.save() : timing 9 at [changed]
[2010-01-24 16:27:23,678] DEBUG - XmlSerializer.save() : timing 1 at [storeAll]
[2010-01-24 16:27:23,678] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:23,678] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-24 16:27:23,679] DEBUG - LockItem.unlock() : 6 current
[2010-01-24 16:27:23,679] DEBUG - LockItem.unlock() : unlocked on Thread-111
[2010-01-24 16:27:23,679] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:23,679] DEBUG - XmlSerializer.save() : timing 1 at [save]
[2010-01-24 16:27:23,679] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:23,768] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,772] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,782] DEBUG - LockItem.lock() : lock on Thread-109
[2010-01-24 16:27:23,782] DEBUG - XmlSerializer.save() : timing 118 at [lock]
[2010-01-24 16:27:23,783] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,792] DEBUG - XmlCompare.compare() : [[]]
[2010-01-24 16:27:23,792] DEBUG - XmlSerializer.save() : timing 10 at [changed]
[2010-01-24 16:27:23,792] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-24 16:27:23,792] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:23,792] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-24 16:27:23,793] DEBUG - LockItem.unlock() : 6 current
[2010-01-24 16:27:23,793] DEBUG - LockItem.unlock() : unlocked on Thread-109
[2010-01-24 16:27:23,793] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:23,793] DEBUG - XmlSerializer.save() : timing 1 at [save]
[2010-01-24 16:27:23,793] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:23,885] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,890] DEBUG - LockItem.lock() : lock on Thread-113
[2010-01-24 16:27:23,891] DEBUG - XmlSerializer.save() : timing 225 at [lock]
[2010-01-24 16:27:23,891] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-24 16:27:23,906] DEBUG - XmlCompare.compare() : [[]]
[2010-01-24 16:27:23,906] DEBUG - XmlSerializer.save() : timing 15 at [changed]
[2010-01-24 16:27:23,907] DEBUG - XmlSerializer.save() : timing 1 at [storeAll]
[2010-01-24 16:27:23,907] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:23,907] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-24 16:27:23,908] DEBUG - LockItem.unlock() : 6 current
[2010-01-24 16:27:23,908] DEBUG - LockItem.unlock() : unlocked on Thread-113
[2010-01-24 16:27:23,909] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:23,909] DEBUG - XmlSerializer.save() : timing 2 at [save]
[2010-01-24 16:27:23,909] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:23,924] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,927] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-24 16:27:23,933] DEBUG - XmlSerializer.save() : timing 9 at [extract]
[2010-01-24 16:27:23,934] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-24 16:27:23,944] DEBUG - XmlSerializer.save() : timing 10 at [changed]
[2010-01-24 16:27:23,944] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-24 16:27:23,945] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-24 16:27:23,945] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,945] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:23,945] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-24 16:27:23,946] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-24 16:27:23,946] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,946] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:23,946] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-24 16:27:23,946] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:23,946] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-24 16:27:23,947] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-24 16:27:23,947] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-24 16:27:23,947] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:23,947] DEBUG - UpdateCache.update() : update [class Levelone], id [294913]
[2010-01-24 16:27:23,948] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-24 16:27:23,951] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,951] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262146]
[2010-01-24 16:27:23,951] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:23,953] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,953] DEBUG - UpdateCache.update() : update [class Levelthree], id [229379]
[2010-01-24 16:27:23,953] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:23,954] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,954] DEBUG - UpdateCache.update() : update [class Levelthree], id [229380]
[2010-01-24 16:27:23,954] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:23,954] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,954] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262147]
[2010-01-24 16:27:23,954] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:23,955] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,955] DEBUG - UpdateCache.update() : update [class Levelthree], id [229381]
[2010-01-24 16:27:23,956] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:23,956] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,956] DEBUG - UpdateCache.update() : update [class Levelone], id [294913]
[2010-01-24 16:27:23,956] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-24 16:27:23,959] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,959] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262146]
[2010-01-24 16:27:23,959] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:23,960] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,960] DEBUG - UpdateCache.update() : update [class Levelthree], id [229379]
[2010-01-24 16:27:23,960] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:23,961] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,961] DEBUG - UpdateCache.update() : update [class Levelthree], id [229380]
[2010-01-24 16:27:23,961] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:23,962] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,962] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262147]
[2010-01-24 16:27:23,962] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:23,963] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,963] DEBUG - UpdateCache.update() : update [class Levelthree], id [229381]
[2010-01-24 16:27:23,964] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:23,964] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:23,964] DEBUG - XmlSerializer.save() : timing 17 at [cache]
[2010-01-24 16:27:23,984] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:23,984] DEBUG - XmlSerializer.save() : timing 20 at [save]
[2010-01-24 16:27:23,984] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:23,985] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,985] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,986] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:23,988] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-24 16:27:23,988] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-24 16:27:23,989] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-24 16:27:24,005] DEBUG - XmlSerializer.save() : timing 20 at [extract]
[2010-01-24 16:27:24,006] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-24 16:27:24,006] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:24,006] DEBUG - XmlSerializer.save() : timing 21 at [extract]
[2010-01-24 16:27:24,007] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-24 16:27:24,008] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [229379]
[2010-01-24 16:27:24,009] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [229380]
[2010-01-24 16:27:24,009] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [229381]
[2010-01-24 16:27:24,009] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:24,009] DEBUG - XmlSerializer().storeAll() : new [229379, 229380, 229381]
[2010-01-24 16:27:24,009] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-24 16:27:24,009] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:24,009] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:24,009] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-24 16:27:24,009] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-24 16:27:24,010] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:24,010] DEBUG - UpdateCache.update() : update [class Levelone], id [294914]
[2010-01-24 16:27:24,010] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-24 16:27:24,010] DEBUG - XmlSerializer.save() : timing 24 at [extract]
[2010-01-24 16:27:24,010] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:24,011] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-24 16:27:24,012] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [229379]
[2010-01-24 16:27:24,012] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,012] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262148]
[2010-01-24 16:27:24,012] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:24,013] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [229380]
[2010-01-24 16:27:24,014] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,014] DEBUG - UpdateCache.update() : update [class Levelthree], id [229379]
[2010-01-24 16:27:24,014] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:24,015] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [229381]
[2010-01-24 16:27:24,015] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:24,015] DEBUG - XmlSerializer().storeAll() : new [229379, 229380, 229381]
[2010-01-24 16:27:24,015] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,015] DEBUG - UpdateCache.update() : update [class Levelthree], id [229380]
[2010-01-24 16:27:24,015] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-24 16:27:24,015] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:24,015] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-24 16:27:24,015] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-24 16:27:24,015] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-24 16:27:24,015] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,015] DEBUG - UpdateCache.update() : update [class Levelthree], id [229381]
[2010-01-24 16:27:24,015] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:24,016] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-24 16:27:24,016] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-24 16:27:24,016] DEBUG - UpdateCache.update() : update [class Levelone], id [294915]
[2010-01-24 16:27:24,016] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,016] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-24 16:27:24,016] DEBUG - UpdateCache.update() : update [class Levelone], id [294914]
[2010-01-24 16:27:24,016] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-24 16:27:24,018] DEBUG - LockItem.lock() : lock on Thread-115
[2010-01-24 16:27:24,021] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,021] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262149]
[2010-01-24 16:27:24,021] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:24,024] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,024] DEBUG - UpdateCache.update() : update [class Levelthree], id [229379]
[2010-01-24 16:27:24,024] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,024] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:24,024] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262148]
[2010-01-24 16:27:24,024] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:24,025] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,025] DEBUG - UpdateCache.update() : update [class Levelthree], id [229380]
[2010-01-24 16:27:24,025] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:24,025] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,025] DEBUG - UpdateCache.update() : update [class Levelthree], id [229381]
[2010-01-24 16:27:24,025] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-24 16:27:24,025] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,025] DEBUG - XmlSerializer.save() : timing 15 at [cache]
[2010-01-24 16:27:24,026] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,026] DEBUG - UpdateCache.update() : update [class Levelone], id [294915]
[2010-01-24 16:27:24,026] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-24 16:27:24,028] DEBUG - XmlSerializer.save() : timing 22 at [lock]
[2010-01-24 16:27:24,028] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-24 16:27:24,039] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,039] DEBUG - UpdateCache.update() : update [class Leveltwo], id [262149]
[2010-01-24 16:27:24,040] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-24 16:27:24,041] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,041] DEBUG - XmlSerializer.save() : timing 25 at [cache]
[2010-01-24 16:27:24,042] DEBUG - XmlCompare.compare() : [[]]
[2010-01-24 16:27:24,042] DEBUG - XmlSerializer.save() : timing 14 at [changed]
[2010-01-24 16:27:24,042] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-24 16:27:24,043] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-24 16:27:24,043] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-24 16:27:24,042] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:24,042] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-24 16:27:24,043] DEBUG - LockItem.unlock() : 6 current
[2010-01-24 16:27:24,043] DEBUG - LockItem.unlock() : unlocked on Thread-115
[2010-01-24 16:27:24,043] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:24,043] DEBUG - XmlSerializer.save() : timing 1 at [save]
[2010-01-24 16:27:24,043] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:24,045] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:24,045] DEBUG - XmlSerializer.save() : timing 20 at [save]
[2010-01-24 16:27:24,045] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:24,050] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:24,050] DEBUG - XmlSerializer.save() : timing 9 at [save]
[2010-01-24 16:27:24,050] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:24,087] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:24,094] DEBUG - XmlSerializer.save() : timing 7 at [extract]
[2010-01-24 16:27:24,094] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-24 16:27:24,094] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-24 16:27:24,096] DEBUG - XmlSerializer().storeAll() :  save [BoolTest], id [null]
[2010-01-24 16:27:24,098] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-24 16:27:24,098] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:24,098] DEBUG - UpdateCache.update() : update [class BoolTest], id [491520]
[2010-01-24 16:27:24,100] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-24 16:27:24,110] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,110] DEBUG - UpdateCache.update() : update [class BoolTest], id [491520]
[2010-01-24 16:27:24,111] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-24 16:27:24,112] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,112] DEBUG - XmlSerializer.save() : timing 14 at [cache]
[2010-01-24 16:27:24,122] DEBUG - LockItem.unlock() : 0 current
[2010-01-24 16:27:24,122] DEBUG - XmlSerializer.save() : timing 10 at [save]
[2010-01-24 16:27:24,122] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:24,122] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:24,128] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-24 16:27:24,130] DEBUG - RelaxSchema.validate() : enter
[2010-01-24 16:27:24,135] DEBUG - XmlSerializer.save() : timing 5 at [extract]
[2010-01-24 16:27:24,135] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-24 16:27:24,136] DEBUG - LockItem.lock() : lock on main
[2010-01-24 16:27:24,137] DEBUG - XmlSerializer.save() : timing 2 at [lock]
[2010-01-24 16:27:24,137] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-24 16:27:24,138] DEBUG - XmlCompare.next(): hit <bool-test id="491520"> vs. <bool-test available="false" id="491520">
[2010-01-24 16:27:24,138] DEBUG - XmlCompare.compare() : [[491520:bool-test]]
[2010-01-24 16:27:24,139] DEBUG - XmlSerializer.save() : timing 2 at [changed]
[2010-01-24 16:27:24,139] DEBUG - XmlSerializer().storeAll() : update timestamp on class BoolTest for field available. New Val [false], old [null]
[2010-01-24 16:27:24,140] DEBUG - XmlSerializer().storeAll() :  save [BoolTest], id [491520]
[2010-01-24 16:27:24,140] DEBUG - XmlSerializer.save() : timing 1 at [storeAll]
[2010-01-24 16:27:24,140] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-24 16:27:24,140] DEBUG - UpdateCache.update() : update [class BoolTest], id [491520]
[2010-01-24 16:27:24,140] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-24 16:27:24,141] DEBUG - UpdateCache.update() : finish
[2010-01-24 16:27:24,141] DEBUG - XmlSerializer.save() : timing 1 at [cache]
[2010-01-24 16:27:24,150] DEBUG - LockItem.unlock() : 1 current
[2010-01-24 16:27:24,150] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-24 16:27:24,150] DEBUG - LockItem.unlock() : 0 remain
[2010-01-24 16:27:24,151] DEBUG - XmlSerializer.save() : timing 9 at [save]
[2010-01-24 16:27:24,151] DEBUG - XmlSerializer.save() : timing ================
[2010-01-24 16:27:26,117] DEBUG - MultiSort.sort() : timing 223 at [prep]
[2010-01-24 16:27:26,123] DEBUG - MultiSort.sort() : timing 17 at [sort]
[2010-01-24 16:27:26,143] DEBUG - MultiSort.sort() : timing 1 at [prep]
[2010-01-24 16:27:26,146] DEBUG - MultiSort.sort() : timing 3 at [sort]
[2010-01-24 16:27:26,168] DEBUG - MultiSort.sort() : timing 2 at [prep]
[2010-01-24 16:27:26,169] DEBUG - MultiSort.sort() : timing 0 at [sort]
[2010-01-24 16:27:26,186] DEBUG - MultiSort.sort() : timing 5 at [prep]
[2010-01-24 16:27:26,188] DEBUG - MultiSort.sort() : timing 2 at [sort]
[2010-01-24 16:27:26,208] DEBUG - MultiSort.sort() : timing 2 at [prep]
[2010-01-24 16:27:26,210] DEBUG - MultiSort.sort() : timing 2 at [sort]
[2010-01-24 16:27:28,155] DEBUG - XmlCompare.next(): hit             <name>one</name> vs.             <name>two</name>
[2010-01-24 16:27:28,163] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-24 16:27:28,184] DEBUG - XmlCompare.next(): hit             <display-element id="6684672"> vs.             <display-element id="6684672" blaa="yo">
[2010-01-24 16:27:28,190] DEBUG - XmlCompare.next(): hit                     <value>Topper</value> vs.                     <value>Top</value>
[2010-01-24 16:27:28,195] DEBUG - XmlCompare.next(): hit             <display-element id="6684674" blaa="diff1"> vs.             <display-element id="6684674" blaa="diff2">
[2010-01-24 16:27:28,197] DEBUG - XmlCompare.next(): hit         </wrap> vs.         </fap>
[2010-01-24 16:27:28,197] DEBUG - XmlCompare.compare() : [[6684672:display-element, 123:wrap, 456:block, 6684674:display-element]]
[2010-01-24 16:27:28,204] DEBUG - XmlCompare.next(): hit         </wrap> vs.             <display-element blaa="diff">
[2010-01-24 16:27:28,204] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-24 16:27:28,229] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-24 16:27:28,237] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-24 16:27:28,247] DEBUG - XmlCompare.next(): hit             <display-element id="6684674" blaa="diff"> vs. null
[2010-01-24 16:27:28,248] DEBUG - XmlCompare.next(): hit             </display-element> vs. null
[2010-01-24 16:27:28,251] DEBUG - XmlCompare.next(): hit         </wrap> vs. null
[2010-01-24 16:27:28,251] DEBUG - XmlCompare.compare() : [[123:wrap, 6684674:display-element]]
[2010-01-24 16:27:28,258] DEBUG - XmlCompare.next(): hit             <display-element id="6684673" blaa="old"> vs.             <display-element id="6684674" blaa="same">
[2010-01-24 16:27:28,262] DEBUG - XmlCompare.next(): hit         </wrap> vs.             <display-element blaa="new">
[2010-01-24 16:27:28,262] DEBUG - XmlCompare.compare() : [[123:wrap, 6684673:display-element]]
[2010-01-24 16:27:28,273] DEBUG - XmlCompare.next(): hit       <kid-two id="13828096"> vs.       <kid-one id="13795329">
[2010-01-24 16:27:28,274] DEBUG - XmlCompare.next(): hit        <title>kid2-1</title> vs.        <title>kid1-2</title>
[2010-01-24 16:27:28,274] DEBUG - XmlCompare.next(): hit       </kid-two> vs.       </kid-one>
[2010-01-24 16:27:28,275] DEBUG - XmlCompare.next(): hit       <kid-one id="13795329"> vs.       <kid-one id="13795330">
[2010-01-24 16:27:28,276] DEBUG - XmlCompare.next(): hit        <title>kid1-2</title> vs.        <title>kid1-3</title>
[2010-01-24 16:27:28,280] DEBUG - XmlCompare.next(): hit       <kid-one id="13795330"> vs.       <kid-two id="13828096">
[2010-01-24 16:27:28,281] DEBUG - XmlCompare.next(): hit        <title>kid1-3</title> vs.        <title>kid2-1</title>
[2010-01-24 16:27:28,281] DEBUG - XmlCompare.next(): hit       </kid-one> vs.       </kid-two>
[2010-01-24 16:27:28,282] DEBUG - XmlCompare.compare() : [[13795329:kid-one, 13828096:kid-two, 13926400:mixed-kids, 13795330:kid-one]]
[2010-01-24 16:27:28,285] INFO  - XmlCompare.compare() : null left or right
[2010-01-24 16:27:28,285] DEBUG - XmlCompare.compare() : left null
[2010-01-24 16:27:28,285] DEBUG - XmlCompare.compare() : right null
[2010-01-24 16:27:28,287] INFO  - XmlCompare.compare() : null left or right
[2010-01-24 16:27:28,287] DEBUG - XmlCompare.compare() : left </xml>
[2010-01-24 16:27:28,287] DEBUG - XmlCompare.compare() : right null
[2010-01-24 16:27:28,287] INFO  - XmlCompare.compare() : null left or right
[2010-01-24 16:27:28,287] DEBUG - XmlCompare.compare() : left null
[2010-01-24 16:27:28,287] DEBUG - XmlCompare.compare() : right </xml>
[2010-01-25 00:17:17,705] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Test { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = []

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['foo','bar','created','lastUpdated',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        foo(nullable : false,)
        bar(nullable : false,)
        created(nullable : false,)
        lastUpdated(nullable : false,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <foo nullable ="false"/>
            <bar nullable ="false"/>
            <created nullable ="false"/>
            <lastUpdated nullable ="false"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String foo
    String bar
    Date created
    Date lastUpdated


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Test".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:17:18,000] DEBUG - DomainObjectLoader.injectIdProperty() : adding property [id] to class [Test]
[2010-01-25 00:17:18,000] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Test]
[2010-01-25 00:17:18,000] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Test]
[2010-01-25 00:17:18,001] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:17:18,048] DEBUG - PersistenceLoader.addBaseClass() : load Test
[2010-01-25 00:24:10,293] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Test { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = []

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['foo','bar','created','lastUpdated',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        foo(nullable : false,)
        bar(nullable : false,)
        created(nullable : false,)
        lastUpdated(nullable : false,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <foo nullable ="false"/>
            <bar nullable ="false"/>
            <created nullable ="false"/>
            <lastUpdated nullable ="false"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String foo
    String bar
    Date created
    Date lastUpdated


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Test".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:24:10,552] DEBUG - DomainObjectLoader.injectIdProperty() : adding property [id] to class [Test]
[2010-01-25 00:24:10,552] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Test]
[2010-01-25 00:24:10,552] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Test]
[2010-01-25 00:24:10,553] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:24:10,721] DEBUG - PersistenceLoader.addBaseClass() : load Test
[2010-01-25 00:24:11,003] INFO  - Hibernate 3.3.1.GA
[2010-01-25 00:24:11,009] INFO  - hibernate.properties not found
[2010-01-25 00:24:11,016] INFO  - Bytecode provider name : javassist
[2010-01-25 00:24:11,023] INFO  - using JDK 1.4 java.sql.Timestamp handling
[2010-01-25 00:24:11,129] INFO  - configuring from url: file:/Users/rgrey/Work/persistence/etc/hibernate.cfg.xml
[2010-01-25 00:24:11,236] INFO  - Configured SessionFactory: null
[2010-01-25 00:24:11,269] INFO  - Using dialect: org.hibernate.dialect.MySQLDialect
[2010-01-25 00:24:11,334] INFO  - Running hbm2ddl schema update
[2010-01-25 00:24:11,334] INFO  - fetching database metadata
[2010-01-25 00:24:11,337] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:24:11,337] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:24:11,338] INFO  - autocommit mode: false
[2010-01-25 00:24:11,343] INFO  - using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://backup/test
[2010-01-25 00:24:11,343] INFO  - connection properties: {user=root, password=****}
[2010-01-25 00:24:11,943] ERROR - could not get database metadata
com.mysql.jdbc.CommunicationsException: Communications link failure

Last packet sent to the server was 0 ms ago.
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1070)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2120)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:723)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:298)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:282)
	at java.sql.DriverManager.getConnection(DriverManager.java:525)
	at java.sql.DriverManager.getConnection(DriverManager.java:140)
	at org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:133)
	at org.hibernate.tool.hbm2ddl.ManagedProviderConnectionHelper.prepare(ManagedProviderConnectionHelper.java:52)
	at org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:168)
	at org.chi.persistence.PersistenceLoader.load(Unknown Source)
	at org.chi.persistence.LoaderTest.setUp(Unknown Source)
	at junit.framework.TestCase.runBare(TestCase.java:128)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:228)
	at junit.framework.TestSuite.run(TestSuite.java:223)
	at org.junit.internal.runners.OldTestClassRunner.run(OldTestClassRunner.java:35)
	at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:32)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:420)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:911)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:768)
Caused by: com.mysql.jdbc.CommunicationsException: Communications link failure

Last packet sent to the server was 0 ms ago.
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1070)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:335)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2043)
	... 22 more
Caused by: java.net.UnknownHostException: backup: backup
	at java.net.InetAddress.getAllByName0(InetAddress.java:1145)
	at java.net.InetAddress.getAllByName(InetAddress.java:1072)
	at java.net.InetAddress.getAllByName(InetAddress.java:1008)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:243)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:284)
	... 23 more
[2010-01-25 00:24:11,950] ERROR - could not complete schema update
com.mysql.jdbc.CommunicationsException: Communications link failure

Last packet sent to the server was 0 ms ago.
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1070)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2120)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:723)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:298)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:282)
	at java.sql.DriverManager.getConnection(DriverManager.java:525)
	at java.sql.DriverManager.getConnection(DriverManager.java:140)
	at org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:133)
	at org.hibernate.tool.hbm2ddl.ManagedProviderConnectionHelper.prepare(ManagedProviderConnectionHelper.java:52)
	at org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:168)
	at org.chi.persistence.PersistenceLoader.load(Unknown Source)
	at org.chi.persistence.LoaderTest.setUp(Unknown Source)
	at junit.framework.TestCase.runBare(TestCase.java:128)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:228)
	at junit.framework.TestSuite.run(TestSuite.java:223)
	at org.junit.internal.runners.OldTestClassRunner.run(OldTestClassRunner.java:35)
	at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:32)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:420)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:911)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:768)
Caused by: com.mysql.jdbc.CommunicationsException: Communications link failure

Last packet sent to the server was 0 ms ago.
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1070)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:335)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2043)
	... 22 more
Caused by: java.net.UnknownHostException: backup: backup
	at java.net.InetAddress.getAllByName0(InetAddress.java:1145)
	at java.net.InetAddress.getAllByName(InetAddress.java:1072)
	at java.net.InetAddress.getAllByName(InetAddress.java:1008)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:243)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:284)
	... 23 more
[2010-01-25 00:24:12,247] INFO  - cleaning up connection pool: jdbc:mysql://backup/test
[2010-01-25 00:24:12,395] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:24:12,396] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:24:12,396] INFO  - autocommit mode: false
[2010-01-25 00:24:12,396] INFO  - using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://backup/test
[2010-01-25 00:24:12,396] INFO  - connection properties: {user=root, password=****}
[2010-01-25 00:24:12,398] WARN  - Could not obtain connection metadata
com.mysql.jdbc.CommunicationsException: Communications link failure

Last packet sent to the server was 0 ms ago.
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1070)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2120)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:723)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:298)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:282)
	at java.sql.DriverManager.getConnection(DriverManager.java:525)
	at java.sql.DriverManager.getConnection(DriverManager.java:140)
	at org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:133)
	at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:111)
	at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:2101)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1325)
	at org.chi.persistence.PersistenceLoader.load(Unknown Source)
	at org.chi.persistence.LoaderTest.setUp(Unknown Source)
	at junit.framework.TestCase.runBare(TestCase.java:128)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:228)
	at junit.framework.TestSuite.run(TestSuite.java:223)
	at org.junit.internal.runners.OldTestClassRunner.run(OldTestClassRunner.java:35)
	at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:32)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:420)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:911)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:768)
Caused by: com.mysql.jdbc.CommunicationsException: Communications link failure

Last packet sent to the server was 0 ms ago.
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1070)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:335)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2043)
	... 23 more
Caused by: java.net.UnknownHostException: backup
	at java.net.InetAddress.getAllByName0(InetAddress.java:1150)
	at java.net.InetAddress.getAllByName(InetAddress.java:1072)
	at java.net.InetAddress.getAllByName(InetAddress.java:1008)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:243)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:284)
	... 24 more
[2010-01-25 00:24:12,402] INFO  - Using dialect: org.hibernate.dialect.MySQLDialect
[2010-01-25 00:24:12,405] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-25 00:24:12,407] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-25 00:24:12,407] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-25 00:24:12,407] INFO  - Automatic session close at end of transaction: disabled
[2010-01-25 00:24:12,408] INFO  - Scrollable result sets: disabled
[2010-01-25 00:24:12,408] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-25 00:24:12,408] INFO  - Connection release mode: auto
[2010-01-25 00:24:12,409] INFO  - Maximum outer join fetch depth: 1
[2010-01-25 00:24:12,409] INFO  - Default batch fetch size: 1
[2010-01-25 00:24:12,409] INFO  - Generate SQL with comments: disabled
[2010-01-25 00:24:12,409] INFO  - Order SQL updates by primary key: disabled
[2010-01-25 00:24:12,409] INFO  - Order SQL inserts for batching: disabled
[2010-01-25 00:24:12,409] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-25 00:24:12,411] INFO  - Using ASTQueryTranslatorFactory
[2010-01-25 00:24:12,411] INFO  - Query language substitutions: {}
[2010-01-25 00:24:12,411] INFO  - JPA-QL strict compliance: disabled
[2010-01-25 00:24:12,411] INFO  - Second-level cache: enabled
[2010-01-25 00:24:12,411] INFO  - Query cache: enabled
[2010-01-25 00:24:12,418] INFO  - Cache region factory : org.hibernate.cache.impl.bridge.RegionFactoryCacheProviderBridge
[2010-01-25 00:24:12,418] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-25 00:24:12,421] INFO  - Optimize cache for minimal puts: disabled
[2010-01-25 00:24:12,421] INFO  - Cache region prefix: arv
[2010-01-25 00:24:12,421] INFO  - Structured second-level cache entries: disabled
[2010-01-25 00:24:12,421] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-25 00:24:12,428] INFO  - Statistics: disabled
[2010-01-25 00:24:12,428] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-25 00:24:12,429] INFO  - Default entity-mode: pojo
[2010-01-25 00:24:12,429] INFO  - Named query checking : enabled
[2010-01-25 00:24:12,482] INFO  - building session factory
[2010-01-25 00:24:12,565] WARN  - Could not find configuration [arv.Test]; using defaults.
[2010-01-25 00:24:13,149] INFO  - Not binding factory to JNDI, no JNDI name configured
[2010-01-25 00:24:13,150] INFO  - starting update timestamps cache at region: arv.org.hibernate.cache.UpdateTimestampsCache
[2010-01-25 00:24:13,151] WARN  - Could not find configuration [arv.org.hibernate.cache.UpdateTimestampsCache]; using defaults.
[2010-01-25 00:24:13,154] INFO  - starting query cache at region: arv.org.hibernate.cache.StandardQueryCache
[2010-01-25 00:24:13,154] WARN  - Could not find configuration [arv.org.hibernate.cache.StandardQueryCache]; using defaults.
[2010-01-25 00:24:13,156] DEBUG - PersistenceLoader.load() : loaded 1 class(es)
[2010-01-25 00:24:13,215] WARN  - SQL Error: 0, SQLState: 08S01
[2010-01-25 00:24:13,215] ERROR - Communications link failure

Last packet sent to the server was 0 ms ago.
[2010-01-25 00:26:11,573] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Test { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = []

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['foo','bar','created','lastUpdated',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        foo(nullable : false,)
        bar(nullable : false,)
        created(nullable : false,)
        lastUpdated(nullable : false,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <foo nullable ="false"/>
            <bar nullable ="false"/>
            <created nullable ="false"/>
            <lastUpdated nullable ="false"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String foo
    String bar
    Date created
    Date lastUpdated


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Test".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:11,809] DEBUG - DomainObjectLoader.injectIdProperty() : adding property [id] to class [Test]
[2010-01-25 00:26:11,809] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Test]
[2010-01-25 00:26:11,810] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Test]
[2010-01-25 00:26:11,810] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:11,908] DEBUG - PersistenceLoader.addBaseClass() : load Test
[2010-01-25 00:26:12,132] INFO  - Hibernate 3.3.1.GA
[2010-01-25 00:26:12,137] INFO  - hibernate.properties not found
[2010-01-25 00:26:12,140] INFO  - Bytecode provider name : javassist
[2010-01-25 00:26:12,144] INFO  - using JDK 1.4 java.sql.Timestamp handling
[2010-01-25 00:26:12,200] INFO  - configuring from url: file:/Users/rgrey/Work/persistence/etc/hibernate.cfg.xml
[2010-01-25 00:26:12,283] INFO  - Configured SessionFactory: null
[2010-01-25 00:26:12,310] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:26:12,361] INFO  - Running hbm2ddl schema update
[2010-01-25 00:26:12,361] INFO  - fetching database metadata
[2010-01-25 00:26:12,364] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:26:12,364] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:26:12,365] INFO  - autocommit mode: false
[2010-01-25 00:26:12,622] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:26:12,622] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:26:14,267] INFO  - updating schema
[2010-01-25 00:26:15,197] INFO  - table found: .APP.TEST
[2010-01-25 00:26:15,197] INFO  - columns: [foo, created, bar, xmlcache, last_updated, id, version]
[2010-01-25 00:26:15,197] INFO  - foreign keys: []
[2010-01-25 00:26:15,197] INFO  - indexes: [sql100124042643800]
[2010-01-25 00:26:15,246] INFO  - table found: .APP.HIBERNATE_UNIQUE_KEY
[2010-01-25 00:26:15,246] INFO  - columns: [next_hi]
[2010-01-25 00:26:15,246] INFO  - foreign keys: []
[2010-01-25 00:26:15,246] INFO  - indexes: []
[2010-01-25 00:26:15,250] INFO  - schema update complete
[2010-01-25 00:26:15,251] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:26:15,251] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:26:15,251] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:26:15,256] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:26:15,256] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:26:15,256] INFO  - autocommit mode: false
[2010-01-25 00:26:15,256] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:26:15,256] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:26:15,257] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-25 00:26:15,258] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-25 00:26:15,260] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:26:15,262] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-25 00:26:15,264] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-25 00:26:15,264] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-25 00:26:15,264] INFO  - Automatic session close at end of transaction: disabled
[2010-01-25 00:26:15,264] INFO  - Scrollable result sets: enabled
[2010-01-25 00:26:15,264] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-25 00:26:15,264] INFO  - Connection release mode: auto
[2010-01-25 00:26:15,265] INFO  - Maximum outer join fetch depth: 1
[2010-01-25 00:26:15,265] INFO  - Default batch fetch size: 1
[2010-01-25 00:26:15,265] INFO  - Generate SQL with comments: disabled
[2010-01-25 00:26:15,265] INFO  - Order SQL updates by primary key: disabled
[2010-01-25 00:26:15,265] INFO  - Order SQL inserts for batching: disabled
[2010-01-25 00:26:15,265] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-25 00:26:15,267] INFO  - Using ASTQueryTranslatorFactory
[2010-01-25 00:26:15,267] INFO  - Query language substitutions: {}
[2010-01-25 00:26:15,267] INFO  - JPA-QL strict compliance: disabled
[2010-01-25 00:26:15,267] INFO  - Second-level cache: enabled
[2010-01-25 00:26:15,267] INFO  - Query cache: enabled
[2010-01-25 00:26:15,273] INFO  - Cache region factory : org.hibernate.cache.impl.bridge.RegionFactoryCacheProviderBridge
[2010-01-25 00:26:15,274] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-25 00:26:15,276] INFO  - Optimize cache for minimal puts: disabled
[2010-01-25 00:26:15,276] INFO  - Cache region prefix: arv
[2010-01-25 00:26:15,276] INFO  - Structured second-level cache entries: disabled
[2010-01-25 00:26:15,276] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-25 00:26:15,279] INFO  - Statistics: disabled
[2010-01-25 00:26:15,279] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-25 00:26:15,279] INFO  - Default entity-mode: pojo
[2010-01-25 00:26:15,280] INFO  - Named query checking : enabled
[2010-01-25 00:26:15,323] INFO  - building session factory
[2010-01-25 00:26:15,360] WARN  - Could not find configuration [arv.Test]; using defaults.
[2010-01-25 00:26:15,598] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:26:15,723] INFO  - Not binding factory to JNDI, no JNDI name configured
[2010-01-25 00:26:15,724] INFO  - starting update timestamps cache at region: arv.org.hibernate.cache.UpdateTimestampsCache
[2010-01-25 00:26:15,725] WARN  - Could not find configuration [arv.org.hibernate.cache.UpdateTimestampsCache]; using defaults.
[2010-01-25 00:26:15,727] INFO  - starting query cache at region: arv.org.hibernate.cache.StandardQueryCache
[2010-01-25 00:26:15,728] WARN  - Could not find configuration [arv.org.hibernate.cache.StandardQueryCache]; using defaults.
[2010-01-25 00:26:15,730] DEBUG - PersistenceLoader.load() : loaded 1 class(es)
[2010-01-25 00:26:15,864] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:26:15,864] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:26:15,879] INFO  - Save ID [524288]
[2010-01-25 00:26:15,934] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:26:15,934] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:26:15,938] INFO  - Loaded Object [Test : 524288]
[2010-01-25 00:26:15,938] INFO  - Loaded Value [blaa]
[2010-01-25 00:26:18,191] INFO  - SyncLock.run(): id 11, running 14, priorirty 100
[2010-01-25 00:26:18,193] INFO  - SyncLock.run(): id 2, running 14, priorirty 500
[2010-01-25 00:26:18,193] INFO  - SyncLock.run(): id 8, running 14, priorirty 500
[2010-01-25 00:26:18,194] INFO  - SyncLock.run(): id 3, running 14, priorirty 100
[2010-01-25 00:26:18,197] INFO  - SyncLock.run(): id 7, running 14, priorirty 100
[2010-01-25 00:26:18,198] INFO  - SyncLock.run(): id 5, running 14, priorirty 100
[2010-01-25 00:26:18,198] INFO  - SyncLock.run(): id 0, running 14, priorirty 500
[2010-01-25 00:26:18,200] INFO  - SyncLock.run(): id 6, running 14, priorirty 500
[2010-01-25 00:26:18,201] INFO  - SyncLock.run(): id 9, running 14, priorirty 100
[2010-01-25 00:26:18,204] INFO  - SyncLock.run(): id 10, running 14, priorirty 500
[2010-01-25 00:26:18,205] INFO  - SyncLock.run(): id 13, running 14, priorirty 100
[2010-01-25 00:26:18,205] INFO  - SyncLock.run(): id 4, running 14, priorirty 500
[2010-01-25 00:26:18,206] INFO  - SyncLock.run(): id 1, running 14, priorirty 100
[2010-01-25 00:26:18,207] INFO  - SyncLock.run(): id 12, running 14, priorirty 500
[2010-01-25 00:26:18,217] DEBUG - LockItem.lock() : lock on Thread-6
[2010-01-25 00:26:18,217] DEBUG - LockItem.lock() : lock on Thread-14
[2010-01-25 00:26:18,429] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:26:18,429] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:26:18,429] DEBUG - LockItem.unlock() : unlocked on Thread-6
[2010-01-25 00:26:18,429] DEBUG - LockItem.unlock() : unlocked on Thread-14
[2010-01-25 00:26:18,430] DEBUG - LockItem.unlock() : 2 remain
[2010-01-25 00:26:18,431] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:18,431] INFO  - SyncLock.run(): finish id 5, count 13
[2010-01-25 00:26:18,431] INFO  - SyncLock.run(): finish id 13, count 12
[2010-01-25 00:26:18,517] DEBUG - LockItem.lock() : lock on Thread-4
[2010-01-25 00:26:18,718] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:18,718] DEBUG - LockItem.unlock() : unlocked on Thread-4
[2010-01-25 00:26:18,718] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:18,718] INFO  - SyncLock.run(): finish id 3, count 11
[2010-01-25 00:26:18,718] DEBUG - LockItem.lock() : lock on Thread-8
[2010-01-25 00:26:18,919] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:18,919] DEBUG - LockItem.unlock() : unlocked on Thread-8
[2010-01-25 00:26:18,919] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:18,919] INFO  - SyncLock.run(): finish id 7, count 10
[2010-01-25 00:26:19,018] DEBUG - LockItem.lock() : lock on Thread-10
[2010-01-25 00:26:19,219] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:19,219] DEBUG - LockItem.unlock() : unlocked on Thread-10
[2010-01-25 00:26:19,219] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:19,219] INFO  - SyncLock.run(): finish id 9, count 9
[2010-01-25 00:26:19,220] DEBUG - LockItem.lock() : lock on Thread-12
[2010-01-25 00:26:19,421] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:19,421] DEBUG - LockItem.unlock() : unlocked on Thread-12
[2010-01-25 00:26:19,421] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:19,421] INFO  - SyncLock.run(): finish id 11, count 8
[2010-01-25 00:26:19,520] DEBUG - LockItem.lock() : lock on Thread-2
[2010-01-25 00:26:19,720] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:19,721] DEBUG - LockItem.unlock() : unlocked on Thread-2
[2010-01-25 00:26:19,721] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:19,721] INFO  - SyncLock.run(): finish id 1, count 7
[2010-01-25 00:26:20,216] DEBUG - LockItem.lock() : lock on Thread-13
[2010-01-25 00:26:20,417] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:20,418] DEBUG - LockItem.unlock() : unlocked on Thread-13
[2010-01-25 00:26:20,419] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:20,419] INFO  - SyncLock.run(): finish id 12, count 6
[2010-01-25 00:26:20,717] DEBUG - LockItem.lock() : lock on Thread-7
[2010-01-25 00:26:20,918] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:20,918] DEBUG - LockItem.unlock() : unlocked on Thread-7
[2010-01-25 00:26:20,918] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:20,919] INFO  - SyncLock.run(): finish id 6, count 5
[2010-01-25 00:26:21,217] DEBUG - LockItem.lock() : lock on Thread-9
[2010-01-25 00:26:21,419] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:21,419] DEBUG - LockItem.unlock() : unlocked on Thread-9
[2010-01-25 00:26:21,419] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:21,419] INFO  - SyncLock.run(): finish id 8, count 4
[2010-01-25 00:26:21,719] DEBUG - LockItem.lock() : lock on Thread-5
[2010-01-25 00:26:21,920] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:21,920] DEBUG - LockItem.unlock() : unlocked on Thread-5
[2010-01-25 00:26:21,920] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:21,920] INFO  - SyncLock.run(): finish id 4, count 3
[2010-01-25 00:26:22,219] DEBUG - LockItem.lock() : lock on Thread-3
[2010-01-25 00:26:22,420] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:22,420] DEBUG - LockItem.unlock() : unlocked on Thread-3
[2010-01-25 00:26:22,420] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:22,420] INFO  - SyncLock.run(): finish id 2, count 2
[2010-01-25 00:26:22,720] DEBUG - LockItem.lock() : lock on Thread-1
[2010-01-25 00:26:22,921] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:22,921] DEBUG - LockItem.unlock() : unlocked on Thread-1
[2010-01-25 00:26:22,921] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:22,921] INFO  - SyncLock.run(): finish id 0, count 1
[2010-01-25 00:26:23,221] DEBUG - LockItem.lock() : lock on Thread-11
[2010-01-25 00:26:23,422] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:23,422] DEBUG - LockItem.unlock() : unlocked on Thread-11
[2010-01-25 00:26:23,422] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:23,422] INFO  - SyncLock.run(): finish id 10, count 0
[2010-01-25 00:26:23,729] INFO  - SyncLock.run(): id 0, running 2, priorirty 1000
[2010-01-25 00:26:23,731] INFO  - SyncLock.run(): id 1, running 3, priorirty 1000
[2010-01-25 00:26:23,732] INFO  - SyncLock.run(): id 2, running 6, priorirty 1000
[2010-01-25 00:26:23,733] INFO  - SyncLock.run(): id 4, running 6, priorirty 1000
[2010-01-25 00:26:23,733] INFO  - SyncLock.run(): id 3, running 6, priorirty 1000
[2010-01-25 00:26:23,734] INFO  - SyncLock.run(): id 5, running 6, priorirty 1000
[2010-01-25 00:26:23,734] DEBUG - LockItem.lock() : lock on Thread-21
[2010-01-25 00:26:23,734] DEBUG - LockItem.lock() : lock on Thread-16
[2010-01-25 00:26:23,935] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:26:23,935] DEBUG - LockItem.unlock() : unlocked on Thread-21
[2010-01-25 00:26:23,935] DEBUG - LockItem.unlock() : 2 remain
[2010-01-25 00:26:23,935] INFO  - SyncLock.run(): finish id 5, count 5
[2010-01-25 00:26:23,937] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:23,937] DEBUG - LockItem.unlock() : unlocked on Thread-16
[2010-01-25 00:26:23,938] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:23,938] INFO  - SyncLock.run(): finish id 0, count 4
[2010-01-25 00:26:24,735] DEBUG - LockItem.lock() : lock on Thread-20
[2010-01-25 00:26:24,753] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:24,753] DEBUG - LockItem.unlock() : unlocked on Thread-18
[2010-01-25 00:26:24,754] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:24,755] INFO  - SyncLock.run(): finish id 2, count 3
[2010-01-25 00:26:24,756] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:24,757] DEBUG - LockItem.unlock() : unlocked on Thread-17
[2010-01-25 00:26:24,757] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:24,757] INFO  - SyncLock.run(): finish id 1, count 2
[2010-01-25 00:26:24,759] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:24,759] DEBUG - LockItem.unlock() : unlocked on Thread-19
[2010-01-25 00:26:24,759] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:24,759] INFO  - SyncLock.run(): finish id 3, count 1
[2010-01-25 00:26:24,936] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:24,936] DEBUG - LockItem.unlock() : unlocked on Thread-20
[2010-01-25 00:26:24,936] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:24,936] INFO  - SyncLock.run(): finish id 4, count 0
[2010-01-25 00:26:27,345] DEBUG - SchemaLoader() : directory [test/schema/relax]
[2010-01-25 00:26:27,450] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Boolean.rng]
[2010-01-25 00:26:27,767] DEBUG - RelaxSchema.addBaseFields() : evaluating bool-test
[2010-01-25 00:26:27,769] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:27,775] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:27,802] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:27,803] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:27,803] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:27,804] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:27,838] DEBUG - RelaxSchema.recurse() : element BoolTest
[2010-01-25 00:26:27,874] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:26:27,874] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:26:27,887] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:26:27,887] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:27,894] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:26:27,894] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:27,920] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Complex.rng]
[2010-01-25 00:26:27,926] DEBUG - FileResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:26:27,937] DEBUG - RelaxSchema.addBaseFields() : evaluating levelone
[2010-01-25 00:26:27,937] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:27,937] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:27,938] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:27,938] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:27,938] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:27,939] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:27,940] DEBUG - RelaxSchema.recurse() : element Levelone
[2010-01-25 00:26:27,941] DEBUG - RelaxSchema.addBaseFields() : evaluating leveltwo
[2010-01-25 00:26:27,941] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:27,941] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:27,941] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:27,942] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:27,942] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:27,942] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:27,943] DEBUG - RelaxClass() : ancestor count for [Leveltwo] = 1
[2010-01-25 00:26:27,943] DEBUG - RelaxSchema.recurse() : element Leveltwo
[2010-01-25 00:26:27,945] DEBUG - RelaxClass() : ancestor count for [Levelthree.rng] = 2
[2010-01-25 00:26:27,947] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:26:27,947] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:27,951] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:26:27,951] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:27,956] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:26:27,956] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:27,959] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:26:27,959] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:27,962] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Favorite.rng]
[2010-01-25 00:26:27,971] DEBUG - RelaxSchema.addBaseFields() : evaluating favorite
[2010-01-25 00:26:27,971] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:27,972] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:27,972] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:27,972] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:27,973] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:27,973] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:27,973] DEBUG - RelaxSchema.recurse() : element Favorite
[2010-01-25 00:26:27,978] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:26:27,978] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:26:27,982] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:26:27,982] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:27,984] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:26:27,984] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:27,986] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Levelthree.rng]
[2010-01-25 00:26:27,999] DEBUG - RelaxSchema.addBaseFields() : evaluating levelthree
[2010-01-25 00:26:27,999] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:27,999] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,000] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,000] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,000] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,001] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,001] DEBUG - RelaxSchema.recurse() : element Levelthree
[2010-01-25 00:26:28,002] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:26:28,002] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:26:28,005] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:26:28,005] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,007] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:26:28,008] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,011] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Mixed.rng]
[2010-01-25 00:26:28,024] DEBUG - RelaxSchema.addBaseFields() : evaluating mixed-kids
[2010-01-25 00:26:28,024] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,025] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,026] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,026] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,027] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,027] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,027] DEBUG - RelaxSchema.recurse() : element MixedKids
[2010-01-25 00:26:28,029] DEBUG - RelaxClass() : ancestor count for [Title] = 1
[2010-01-25 00:26:28,029] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:26:28,037] DEBUG - RelaxClass() : ancestor count for [interleave.rng] = 1
[2010-01-25 00:26:28,039] DEBUG - RelaxSchema.ref() : follow [kid-one]
[2010-01-25 00:26:28,043] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-one
[2010-01-25 00:26:28,043] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,043] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,043] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,044] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,044] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,044] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,045] DEBUG - RelaxClass() : ancestor count for [KidOne] = 1
[2010-01-25 00:26:28,045] DEBUG - RelaxSchema.recurse() : element KidOne
[2010-01-25 00:26:28,046] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:26:28,046] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:26:28,053] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:26:28,053] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,055] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:26:28,055] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,058] DEBUG - RelaxSchema.ref() : follow [kid-two]
[2010-01-25 00:26:28,060] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-two
[2010-01-25 00:26:28,060] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,060] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,060] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,060] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,061] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,061] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,061] DEBUG - RelaxClass() : ancestor count for [KidTwo] = 1
[2010-01-25 00:26:28,061] DEBUG - RelaxSchema.recurse() : element KidTwo
[2010-01-25 00:26:28,063] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:26:28,063] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:26:28,064] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:26:28,064] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,068] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:26:28,068] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,069] DEBUG - RelaxSchema.ref() : follow [kid-three]
[2010-01-25 00:26:28,070] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-three
[2010-01-25 00:26:28,070] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,070] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,070] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,071] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,071] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,071] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,072] DEBUG - RelaxClass() : ancestor count for [KidThree] = 1
[2010-01-25 00:26:28,072] DEBUG - RelaxSchema.recurse() : element KidThree
[2010-01-25 00:26:28,072] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:26:28,072] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:26:28,074] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:26:28,074] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,075] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:26:28,075] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,077] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:26:28,077] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,078] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:26:28,078] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,083] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Sort.rng]
[2010-01-25 00:26:28,087] DEBUG - FileResolver.resolveEntity() : looking for [SortChild.rng]
[2010-01-25 00:26:28,094] DEBUG - RelaxSchema.addBaseFields() : evaluating sort
[2010-01-25 00:26:28,094] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,095] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,096] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,096] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,096] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,096] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,097] DEBUG - RelaxSchema.recurse() : element Sort
[2010-01-25 00:26:28,097] DEBUG - RelaxClass() : ancestor count for [Sort1] = 1
[2010-01-25 00:26:28,097] DEBUG - RelaxSchema.recurse() : element Sort1
[2010-01-25 00:26:28,098] DEBUG - RelaxClass() : ancestor count for [Sort2] = 1
[2010-01-25 00:26:28,098] DEBUG - RelaxSchema.recurse() : element Sort2
[2010-01-25 00:26:28,099] DEBUG - RelaxClass() : ancestor count for [SortChild.rng] = 1
[2010-01-25 00:26:28,101] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:26:28,101] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,103] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:26:28,103] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,105] INFO  - RelaxSchema.parse() : parse [test/schema/relax/SortChild.rng]
[2010-01-25 00:26:28,112] DEBUG - RelaxSchema.addBaseFields() : evaluating sort-child
[2010-01-25 00:26:28,112] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,112] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,115] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,115] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,115] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,115] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,115] DEBUG - RelaxSchema.recurse() : element SortChild
[2010-01-25 00:26:28,116] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:26:28,116] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:26:28,118] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:26:28,118] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,119] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:26:28,119] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,120] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Test.rng]
[2010-01-25 00:26:28,129] DEBUG - FileResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:28,131] DEBUG - FileResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:28,140] DEBUG - RelaxSchema.addBaseFields() : evaluating address-book
[2010-01-25 00:26:28,140] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,140] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,141] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,142] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,142] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,143] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,143] DEBUG - RelaxSchema.recurse() : element AddressBook
[2010-01-25 00:26:28,144] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:26:28,144] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:26:28,148] DEBUG - RelaxClass() : ancestor count for [Email] = 1
[2010-01-25 00:26:28,148] DEBUG - RelaxSchema.recurse() : element Email
[2010-01-25 00:26:28,150] DEBUG - RelaxClass() : ancestor count for [Enabled] = 1
[2010-01-25 00:26:28,150] DEBUG - RelaxSchema.recurse() : element Enabled
[2010-01-25 00:26:28,152] DEBUG - RelaxSchema.ref() : follow [address]
[2010-01-25 00:26:28,153] DEBUG - RelaxSchema.addBaseFields() : evaluating address
[2010-01-25 00:26:28,153] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,153] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,154] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,154] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,155] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,155] DEBUG - RelaxClass() : ancestor count for [Address] = 1
[2010-01-25 00:26:28,155] DEBUG - RelaxSchema.recurse() : element Address
[2010-01-25 00:26:28,160] DEBUG - RelaxClass() : ancestor count for [Street] = 2
[2010-01-25 00:26:28,160] DEBUG - RelaxSchema.recurse() : element Street
[2010-01-25 00:26:28,161] DEBUG - RelaxClass() : ancestor count for [City] = 2
[2010-01-25 00:26:28,161] DEBUG - RelaxSchema.recurse() : element City
[2010-01-25 00:26:28,162] DEBUG - RelaxClass() : ancestor count for [State] = 2
[2010-01-25 00:26:28,162] DEBUG - RelaxSchema.recurse() : element State
[2010-01-25 00:26:28,163] DEBUG - RelaxClass() : ancestor count for [ZipCode] = 2
[2010-01-25 00:26:28,163] DEBUG - RelaxSchema.recurse() : element ZipCode
[2010-01-25 00:26:28,169] DEBUG - RelaxClass() : ancestor count for [Region] = 2
[2010-01-25 00:26:28,169] DEBUG - RelaxSchema.recurse() : element Region
[2010-01-25 00:26:28,171] DEBUG - RelaxClass() : ancestor count for [Region] = 2
[2010-01-25 00:26:28,171] DEBUG - RelaxSchema.recurse() : element Region
[2010-01-25 00:26:28,171] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:26:28,171] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,172] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:26:28,172] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,174] DEBUG - RelaxSchema.ref() : follow [status]
[2010-01-25 00:26:28,174] DEBUG - RelaxClass() : ancestor count for [Status] = 1
[2010-01-25 00:26:28,174] DEBUG - RelaxSchema.recurse() : element Status
[2010-01-25 00:26:28,175] DEBUG - RelaxSchema.ref() : follow [statistics]
[2010-01-25 00:26:28,176] DEBUG - RelaxSchema.addBaseFields() : evaluating statistics
[2010-01-25 00:26:28,176] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,176] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,176] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,177] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,177] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,179] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,179] DEBUG - RelaxClass() : ancestor count for [Statistics] = 1
[2010-01-25 00:26:28,179] DEBUG - RelaxSchema.recurse() : element Statistics
[2010-01-25 00:26:28,181] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:26:28,181] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,182] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:26:28,182] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,182] DEBUG - RelaxClass() : ancestor count for [Favorite.rng] = 1
[2010-01-25 00:26:28,183] DEBUG - RelaxClass() : ancestor count for [Favorite.rng] = 1
[2010-01-25 00:26:28,183] DEBUG - RelaxSchema.addBaseFields() : evaluating remover
[2010-01-25 00:26:28,183] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,183] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,183] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,185] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,185] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,186] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,187] DEBUG - RelaxClass() : ancestor count for [Remover] = 1
[2010-01-25 00:26:28,187] DEBUG - RelaxSchema.recurse() : element Remover
[2010-01-25 00:26:28,187] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:26:28,187] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:26:28,189] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:26:28,189] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,190] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:26:28,190] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,192] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:26:28,192] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,193] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:26:28,193] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,204] DEBUG - RelaxSchema.addBaseFields() : evaluating cache
[2010-01-25 00:26:28,204] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,204] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,204] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,204] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,205] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,205] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,206] DEBUG - RelaxSchema.recurse() : element Cache
[2010-01-25 00:26:28,206] DEBUG - RelaxClass() : ancestor count for [Oid] = 1
[2010-01-25 00:26:28,206] DEBUG - RelaxSchema.recurse() : element Oid
[2010-01-25 00:26:28,214] DEBUG - RelaxClass() : ancestor count for [Otype] = 1
[2010-01-25 00:26:28,214] DEBUG - RelaxSchema.recurse() : element Otype
[2010-01-25 00:26:28,216] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:26:28,216] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,217] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:26:28,217] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,221] DEBUG - RelaxSchema.addBaseFields() : evaluating interleave
[2010-01-25 00:26:28,221] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:26:28,221] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:26:28,222] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:26:28,222] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:26:28,222] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:26:28,222] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:26:28,222] DEBUG - RelaxSchema.recurse() : element Interleave
[2010-01-25 00:26:28,223] DEBUG - RelaxClass() : ancestor count for [Ordering] = 1
[2010-01-25 00:26:28,223] DEBUG - RelaxSchema.recurse() : element Ordering
[2010-01-25 00:26:28,225] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:26:28,225] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:26:28,226] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:26:28,226] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:26:28,233] DEBUG - DomainClass.resolveExternalRefs() : ext [Levelthree.rng]
[2010-01-25 00:26:28,240] DEBUG - DomainClass.resolveExternalRefs() : ext [interleave.rng]
[2010-01-25 00:26:28,241] DEBUG - DomainClass.resolveExternalRefs() : ext [SortChild.rng]
[2010-01-25 00:26:28,242] DEBUG - DomainClass.resolveExternalRefs() : ext [Favorite.rng]
[2010-01-25 00:26:28,253] INFO  - SchemaLoader.load() : load class [BoolTest]
[2010-01-25 00:26:28,870] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class BoolTest { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="bool-test"><optional><attribute name="available"><data type="boolean"/></attribute></optional><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Boolean.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['available','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        available(nullable : true,)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <available nullable ="true"/>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Boolean available
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "BoolTest".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:29,079] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [BoolTest]
[2010-01-25 00:26:29,079] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [BoolTest]
[2010-01-25 00:26:29,080] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:29,121] DEBUG - PersistenceLoader.addBaseClass() : load BoolTest
[2010-01-25 00:26:29,121] INFO  - SchemaLoader.load() : load class [Levelthree]
[2010-01-25 00:26:29,277] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Levelthree { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="levelthree"><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Levelthree.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['Leveltwo',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Levelthree".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:29,332] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Levelthree]
[2010-01-25 00:26:29,332] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Levelthree]
[2010-01-25 00:26:29,332] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:29,432] DEBUG - PersistenceLoader.addBaseClass() : load Levelthree
[2010-01-25 00:26:29,434] INFO  - SchemaLoader.load() : load class [Leveltwo]
[2010-01-25 00:26:29,567] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Leveltwo { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['levelthree','lastUpdated','created',]

    static final Collection<String> children = ['levelthree',]

    static final Collection<String> parents = ['Levelone',]

    // one-to-many
    static hasMany = [levelthree : Levelthree,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        levelthree(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <levelthree nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Long id
    Date lastUpdated
    Date created

    List    levelthree

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Leveltwo".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:29,601] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Leveltwo]
[2010-01-25 00:26:29,601] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Leveltwo]
[2010-01-25 00:26:29,601] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 1 properties
[2010-01-25 00:26:29,619] DEBUG - PersistenceLoader.addBaseClass() : load Leveltwo
[2010-01-25 00:26:29,619] INFO  - SchemaLoader.load() : load class [Levelone]
[2010-01-25 00:26:29,806] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Levelone { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="levelone"><oneOrMore><element name="leveltwo"><oneOrMore><externalRef href="Levelthree.rng"/></oneOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></oneOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Complex.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['leveltwo','lastUpdated','created',]

    static final Collection<String> children = ['leveltwo',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [leveltwo : Leveltwo,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        leveltwo(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <leveltwo nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Long id
    Date lastUpdated
    Date created

    List    leveltwo

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Levelone".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:29,842] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Levelone]
[2010-01-25 00:26:29,842] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Levelone]
[2010-01-25 00:26:29,842] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 1 properties
[2010-01-25 00:26:29,859] DEBUG - PersistenceLoader.addBaseClass() : load Levelone
[2010-01-25 00:26:29,860] INFO  - SchemaLoader.load() : load class [Favorite]
[2010-01-25 00:26:30,042] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Favorite { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="favorite" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><attribute name="user-id"><data type="integer"/></attribute><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Favorite.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['userId','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        userId(nullable : false,)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <userId nullable ="false"/>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer userId
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Favorite".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:30,067] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Favorite]
[2010-01-25 00:26:30,068] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Favorite]
[2010-01-25 00:26:30,068] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:30,087] DEBUG - PersistenceLoader.addBaseClass() : load Favorite
[2010-01-25 00:26:30,088] INFO  - SchemaLoader.load() : load class [Interleave]
[2010-01-25 00:26:30,180] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Interleave { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'
            ordering type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="interleave"><element name="ordering"><data type="string"><param name="maxLength">100000</param></data></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "interleave.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['ordering','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        ordering(maxSize : 100000,nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <ordering maxSize ="100000"nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String ordering
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Interleave".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:30,203] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Interleave]
[2010-01-25 00:26:30,203] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Interleave]
[2010-01-25 00:26:30,203] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:30,222] DEBUG - PersistenceLoader.addBaseClass() : load Interleave
[2010-01-25 00:26:30,222] INFO  - SchemaLoader.load() : load class [KidOne]
[2010-01-25 00:26:30,354] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidOne { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidOne".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:30,377] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidOne]
[2010-01-25 00:26:30,377] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidOne]
[2010-01-25 00:26:30,377] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:30,393] DEBUG - PersistenceLoader.addBaseClass() : load KidOne
[2010-01-25 00:26:30,394] INFO  - SchemaLoader.load() : load class [KidTwo]
[2010-01-25 00:26:30,618] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidTwo { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidTwo".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:30,643] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidTwo]
[2010-01-25 00:26:30,643] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidTwo]
[2010-01-25 00:26:30,643] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:30,657] DEBUG - PersistenceLoader.addBaseClass() : load KidTwo
[2010-01-25 00:26:30,657] INFO  - SchemaLoader.load() : load class [KidThree]
[2010-01-25 00:26:30,783] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidThree { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidThree".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:30,818] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidThree]
[2010-01-25 00:26:30,818] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidThree]
[2010-01-25 00:26:30,819] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:30,834] DEBUG - PersistenceLoader.addBaseClass() : load KidThree
[2010-01-25 00:26:30,834] INFO  - SchemaLoader.load() : load class [MixedKids]
[2010-01-25 00:26:30,960] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class MixedKids { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><define name="kid-one"><element name="kid-one"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="kid-two"><element name="kid-two"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="kid-three"><element name="kid-three"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><start><element name="mixed-kids"><element name="title"><text/></element><interleave><zeroOrMore><ref name="kid-one"/></zeroOrMore><zeroOrMore><ref name="kid-two"/></zeroOrMore></interleave><zeroOrMore><ref name="kid-three"/></zeroOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Mixed.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','interleave','kidOne','kidTwo','kidThree','lastUpdated','created',]

    static final Collection<String> children = ['interleave','kidOne','kidTwo','kidThree',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [kidOne : KidOne,kidTwo : KidTwo,kidThree : KidThree,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        interleave(nullable : true,)
        kidOne(nullable : true,)
        kidTwo(nullable : true,)
        kidThree(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <interleave nullable ="true"/>
            <kidOne nullable ="true"/>
            <kidTwo nullable ="true"/>
            <kidThree nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    Interleave interleave


    // fields
    String title
    Long id
    Date lastUpdated
    Date created

    List    kidOne
    List    kidTwo
    List    kidThree

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "MixedKids".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:30,999] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [MixedKids]
[2010-01-25 00:26:30,999] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [MixedKids]
[2010-01-25 00:26:30,999] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 3 properties
[2010-01-25 00:26:31,024] DEBUG - PersistenceLoader.addBaseClass() : load MixedKids
[2010-01-25 00:26:31,024] INFO  - SchemaLoader.load() : load class [SortChild]
[2010-01-25 00:26:31,201] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class SortChild { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="sort-child" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "SortChild.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['Sort',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "SortChild".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:31,231] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [SortChild]
[2010-01-25 00:26:31,231] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [SortChild]
[2010-01-25 00:26:31,232] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:31,254] DEBUG - PersistenceLoader.addBaseClass() : load SortChild
[2010-01-25 00:26:31,254] INFO  - SchemaLoader.load() : load class [Sort]
[2010-01-25 00:26:31,366] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Sort { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="sort" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><element name="sort1"><text/></element><element name="sort2"><text/></element><optional><externalRef href="SortChild.rng"/></optional><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Sort.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['sort1','sort2','sortChild','lastUpdated','created',]

    static final Collection<String> children = ['sortChild',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        sort1(nullable : false,)
        sort2(nullable : false,)
        sortChild(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <sort1 nullable ="false"/>
            <sort2 nullable ="false"/>
            <sortChild nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    SortChild sortChild


    // fields
    String sort1
    String sort2
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Sort".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:31,399] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Sort]
[2010-01-25 00:26:31,399] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Sort]
[2010-01-25 00:26:31,399] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:31,418] DEBUG - PersistenceLoader.addBaseClass() : load Sort
[2010-01-25 00:26:31,418] INFO  - SchemaLoader.load() : load class [Address]
[2010-01-25 00:26:31,558] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Address { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id','type',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['street','city','state','zipCode','region','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        id(nullable : true,)
        type(nullable : false,inList : ["home","work",], )
        street(nullable : false,)
        city(nullable : false,)
        state(nullable : false,)
        zipCode(nullable : false,)
        region(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <id nullable ="true"/>
            <type nullable ="false"inList ="["home"""work""]" />
            <street nullable ="false"/>
            <city nullable ="false"/>
            <state nullable ="false"/>
            <zipCode nullable ="false"/>
            <region nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer id
    String type
    String[] street
    String city
    String state
    Integer zipCode
    String[] region
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Address".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:31,579] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Address]
[2010-01-25 00:26:31,579] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Address]
[2010-01-25 00:26:31,579] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:31,594] DEBUG - PersistenceLoader.addBaseClass() : load Address
[2010-01-25 00:26:31,594] INFO  - SchemaLoader.load() : load class [Statistics]
[2010-01-25 00:26:31,669] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Statistics { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['accessed','size','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        accessed(nullable : false,)
        size(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <accessed nullable ="false"/>
            <size nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer accessed
    Long size
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Statistics".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:31,691] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Statistics]
[2010-01-25 00:26:31,691] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Statistics]
[2010-01-25 00:26:31,691] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:31,792] DEBUG - PersistenceLoader.addBaseClass() : load Statistics
[2010-01-25 00:26:31,792] INFO  - SchemaLoader.load() : load class [Remover]
[2010-01-25 00:26:31,867] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Remover { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Remover".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:31,892] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Remover]
[2010-01-25 00:26:31,892] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Remover]
[2010-01-25 00:26:31,892] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:31,904] DEBUG - PersistenceLoader.addBaseClass() : load Remover
[2010-01-25 00:26:31,904] INFO  - SchemaLoader.load() : load class [AddressBook]
[2010-01-25 00:26:31,979] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class AddressBook { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><define name="address"><element name="address"><optional><attribute name="id"><data type="integer"/></attribute></optional><attribute name="type"><choice><value>home</value><value>work</value></choice></attribute><oneOrMore><element name="street"><text/></element></oneOrMore><element name="city"><text/></element><element name="state"><text/></element><element name="zip-code"><data type="integer"/></element><optional><element name="region"><text/></element><element name="region"><text/></element></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="status"><element name="status"><choice><value>new</value><value>reviewed</value></choice></element></define><define name="statistics"><element name="statistics"><attribute name="accessed"><data type="integer"/></attribute><attribute name="size"><data type="long"/></attribute><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><start><element name="address-book"><optional><attribute name="address-count"><text/></attribute></optional><element name="name"><data type="string"><param name="maxLength">100</param></data></element><optional><element name="email"><text/></element></optional><optional><element name="enabled"><empty/></element></optional><zeroOrMore><ref name="address"/></zeroOrMore><optional><ref name="status"/></optional><ref name="statistics"/><externalRef href="Favorite.rng"/><externalRef href="Favorite.rng"/><optional><element name="remover"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></optional><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Test.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['addressCount','id',]

    // primitives that should be empty
    static final Collection<String> empty = ['enabled',]

    static final Collection<String> elements = ['name','email','enabled','address','status','statistics','favorite','remover','lastUpdated','created',]

    static final Collection<String> children = ['address','statistics','favorite','remover',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [address : Address,favorite : Favorite,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        addressCount(nullable : true,)
        name(maxSize : 100,nullable : false,)
        email(nullable : true,)
        enabled(nullable : false,)
        address(nullable : true,)
        status(nullable : true,inList : ["new","reviewed",], )
        statistics(nullable : false,)
        favorite(nullable : false,)
        remover(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <addressCount nullable ="true"/>
            <name maxSize ="100"nullable ="false"/>
            <email nullable ="true"/>
            <enabled nullable ="false"/>
            <address nullable ="true"/>
            <status nullable ="true"inList ="["new"""reviewed""]" />
            <statistics nullable ="false"/>
            <favorite nullable ="false"/>
            <remover nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    Statistics statistics
    Remover remover


    // fields
    String addressCount
    String name
    String email
    Boolean enabled
    String status
    Long id
    Date lastUpdated
    Date created

    List    address
    List    favorite

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "AddressBook".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:32,025] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [AddressBook]
[2010-01-25 00:26:32,025] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [AddressBook]
[2010-01-25 00:26:32,025] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 2 properties
[2010-01-25 00:26:32,036] DEBUG - PersistenceLoader.addBaseClass() : load AddressBook
[2010-01-25 00:26:32,036] INFO  - SchemaLoader.load() : load class [Cache]
[2010-01-25 00:26:32,107] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Cache { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="cache"><element name="oid"><text/></element><element name="otype"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "cache.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['oid','otype','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        oid(nullable : false,)
        otype(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <oid nullable ="false"/>
            <otype nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String oid
    String otype
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Cache".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:26:32,127] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Cache]
[2010-01-25 00:26:32,127] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Cache]
[2010-01-25 00:26:32,127] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:26:32,141] DEBUG - PersistenceLoader.addBaseClass() : load Cache
[2010-01-25 00:26:32,985] INFO  - Hibernate 3.3.1.GA
[2010-01-25 00:26:32,988] INFO  - hibernate.properties not found
[2010-01-25 00:26:32,994] INFO  - Bytecode provider name : javassist
[2010-01-25 00:26:32,998] INFO  - using JDK 1.4 java.sql.Timestamp handling
[2010-01-25 00:26:33,053] INFO  - configuring from url: file:/Users/rgrey/Work/persistence/etc/hibernate.cfg.xml
[2010-01-25 00:26:33,268] INFO  - Configured SessionFactory: null
[2010-01-25 00:26:33,305] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:26:33,368] INFO  - Running hbm2ddl schema update
[2010-01-25 00:26:33,368] INFO  - fetching database metadata
[2010-01-25 00:26:33,371] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:26:33,372] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:26:33,372] INFO  - autocommit mode: false
[2010-01-25 00:26:33,671] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:26:33,671] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:26:34,084] INFO  - updating schema
[2010-01-25 00:26:35,711] INFO  - table found: .APP.ADDRESS
[2010-01-25 00:26:35,711] INFO  - columns: [created, type, street, region, xmlcache, state, last_updated, city, id, zip_code, version]
[2010-01-25 00:26:35,711] INFO  - foreign keys: []
[2010-01-25 00:26:35,711] INFO  - indexes: [sql100124042657690]
[2010-01-25 00:26:35,751] INFO  - table found: .APP.ADDRESS_BOOK
[2010-01-25 00:26:35,751] INFO  - columns: [created, enabled, xmlcache, email, status, statistics_id, address_count, last_updated, name, remover_id, id, version]
[2010-01-25 00:26:35,751] INFO  - foreign keys: [fkfb8b05459d996fa, fkfb8b054e5d50ada]
[2010-01-25 00:26:35,751] INFO  - indexes: [sql100124042657740, sql100124042658320, sql100124042658280]
[2010-01-25 00:26:35,761] INFO  - table found: .APP.ADDRESS_BOOK_ADDRESS
[2010-01-25 00:26:35,761] INFO  - columns: [address_id, address_book_address_id, address_idx]
[2010-01-25 00:26:35,761] INFO  - foreign keys: []
[2010-01-25 00:26:35,761] INFO  - indexes: []
[2010-01-25 00:26:35,774] INFO  - table found: .APP.ADDRESS_BOOK_FAVORITE
[2010-01-25 00:26:35,774] INFO  - columns: [favorite_idx, address_book_favorite_id, favorite_id]
[2010-01-25 00:26:35,774] INFO  - foreign keys: []
[2010-01-25 00:26:35,774] INFO  - indexes: []
[2010-01-25 00:26:35,795] INFO  - table found: .APP.BOOL_TEST
[2010-01-25 00:26:35,795] INFO  - columns: [created, available, xmlcache, last_updated, name, id, version]
[2010-01-25 00:26:35,795] INFO  - foreign keys: []
[2010-01-25 00:26:35,795] INFO  - indexes: [sql100124042657800]
[2010-01-25 00:26:35,809] INFO  - table found: .APP.CACHE
[2010-01-25 00:26:35,809] INFO  - columns: [created, oid, xmlcache, last_updated, otype, id, version]
[2010-01-25 00:26:35,809] INFO  - foreign keys: []
[2010-01-25 00:26:35,809] INFO  - indexes: [sql100124042657810]
[2010-01-25 00:26:35,820] INFO  - table found: .APP.FAVORITE
[2010-01-25 00:26:35,820] INFO  - columns: [created, user_id, xmlcache, last_updated, name, id, version]
[2010-01-25 00:26:35,820] INFO  - foreign keys: []
[2010-01-25 00:26:35,820] INFO  - indexes: [sql100124042657840]
[2010-01-25 00:26:35,834] INFO  - table found: .APP.INTERLEAVE
[2010-01-25 00:26:35,834] INFO  - columns: [created, ordering, xmlcache, last_updated, id, version]
[2010-01-25 00:26:35,834] INFO  - foreign keys: []
[2010-01-25 00:26:35,834] INFO  - indexes: [sql100124042657860]
[2010-01-25 00:26:35,844] INFO  - table found: .APP.KID_ONE
[2010-01-25 00:26:35,844] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:26:35,844] INFO  - foreign keys: []
[2010-01-25 00:26:35,844] INFO  - indexes: [sql100124042657890]
[2010-01-25 00:26:35,859] INFO  - table found: .APP.KID_THREE
[2010-01-25 00:26:35,859] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:26:35,859] INFO  - foreign keys: []
[2010-01-25 00:26:35,859] INFO  - indexes: [sql100124042657910]
[2010-01-25 00:26:35,877] INFO  - table found: .APP.KID_TWO
[2010-01-25 00:26:35,877] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:26:35,877] INFO  - foreign keys: []
[2010-01-25 00:26:35,877] INFO  - indexes: [sql100124042657920]
[2010-01-25 00:26:35,888] INFO  - table found: .APP.LEVELONE
[2010-01-25 00:26:35,888] INFO  - columns: [created, xmlcache, last_updated, id, version]
[2010-01-25 00:26:35,888] INFO  - foreign keys: []
[2010-01-25 00:26:35,888] INFO  - indexes: [sql100124042657940]
[2010-01-25 00:26:35,898] INFO  - table found: .APP.LEVELONE_LEVELTWO
[2010-01-25 00:26:35,898] INFO  - columns: [leveltwo_id, leveltwo_idx, levelone_leveltwo_id]
[2010-01-25 00:26:35,898] INFO  - foreign keys: []
[2010-01-25 00:26:35,899] INFO  - indexes: []
[2010-01-25 00:26:35,908] INFO  - table found: .APP.LEVELTHREE
[2010-01-25 00:26:35,908] INFO  - columns: [created, xmlcache, last_updated, name, id, version]
[2010-01-25 00:26:35,908] INFO  - foreign keys: []
[2010-01-25 00:26:35,908] INFO  - indexes: [sql100124042657960]
[2010-01-25 00:26:35,918] INFO  - table found: .APP.LEVELTWO
[2010-01-25 00:26:35,918] INFO  - columns: [created, xmlcache, last_updated, id, version]
[2010-01-25 00:26:35,918] INFO  - foreign keys: []
[2010-01-25 00:26:35,918] INFO  - indexes: [sql100124042658140]
[2010-01-25 00:26:35,950] INFO  - table found: .APP.LEVELTWO_LEVELTHREE
[2010-01-25 00:26:35,950] INFO  - columns: [levelthree_idx, leveltwo_levelthree_id, levelthree_id]
[2010-01-25 00:26:35,950] INFO  - foreign keys: []
[2010-01-25 00:26:35,950] INFO  - indexes: []
[2010-01-25 00:26:35,968] INFO  - table found: .APP.MIXED_KIDS
[2010-01-25 00:26:35,968] INFO  - columns: [created, title, xmlcache, last_updated, interleave_id, id, version]
[2010-01-25 00:26:35,968] INFO  - foreign keys: [fk13caac31770fcbfa]
[2010-01-25 00:26:35,968] INFO  - indexes: [sql100124042658160, sql100124042658340]
[2010-01-25 00:26:35,981] INFO  - table found: .APP.MIXED_KIDS_KID_ONE
[2010-01-25 00:26:35,981] INFO  - columns: [mixed_kids_kid_one_id, kid_one_id, kid_one_idx]
[2010-01-25 00:26:35,981] INFO  - foreign keys: []
[2010-01-25 00:26:35,981] INFO  - indexes: []
[2010-01-25 00:26:35,992] INFO  - table found: .APP.MIXED_KIDS_KID_THREE
[2010-01-25 00:26:35,992] INFO  - columns: [mixed_kids_kid_three_id, kid_three_idx, kid_three_id]
[2010-01-25 00:26:35,992] INFO  - foreign keys: []
[2010-01-25 00:26:35,992] INFO  - indexes: []
[2010-01-25 00:26:35,999] INFO  - table found: .APP.MIXED_KIDS_KID_TWO
[2010-01-25 00:26:35,999] INFO  - columns: [kid_two_id, mixed_kids_kid_two_id, kid_two_idx]
[2010-01-25 00:26:35,999] INFO  - foreign keys: []
[2010-01-25 00:26:35,999] INFO  - indexes: []
[2010-01-25 00:26:36,008] INFO  - table found: .APP.REMOVER
[2010-01-25 00:26:36,008] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:26:36,008] INFO  - foreign keys: []
[2010-01-25 00:26:36,008] INFO  - indexes: [sql100124042658200]
[2010-01-25 00:26:36,030] INFO  - table found: .APP.SORT
[2010-01-25 00:26:36,030] INFO  - columns: [created, sort2, sort_child_id, sort1, xmlcache, last_updated, id, version]
[2010-01-25 00:26:36,030] INFO  - foreign keys: [fk35f59e577cc69d]
[2010-01-25 00:26:36,030] INFO  - indexes: [sql100124042658350, sql100124042658220]
[2010-01-25 00:26:36,037] INFO  - table found: .APP.SORT_CHILD
[2010-01-25 00:26:36,037] INFO  - columns: [created, xmlcache, last_updated, name, id, version]
[2010-01-25 00:26:36,038] INFO  - foreign keys: []
[2010-01-25 00:26:36,038] INFO  - indexes: [sql100124042658240]
[2010-01-25 00:26:36,050] INFO  - table found: .APP.STATISTICS
[2010-01-25 00:26:36,050] INFO  - columns: [created, accessed, xmlcache, size, last_updated, id, version]
[2010-01-25 00:26:36,050] INFO  - foreign keys: []
[2010-01-25 00:26:36,050] INFO  - indexes: [sql100124042658260]
[2010-01-25 00:26:36,079] INFO  - table found: .APP.HIBERNATE_UNIQUE_KEY
[2010-01-25 00:26:36,079] INFO  - columns: [next_hi]
[2010-01-25 00:26:36,080] INFO  - foreign keys: []
[2010-01-25 00:26:36,080] INFO  - indexes: []
[2010-01-25 00:26:36,393] INFO  - schema update complete
[2010-01-25 00:26:36,394] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:26:36,394] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:26:36,394] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:26:36,403] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:26:36,403] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:26:36,403] INFO  - autocommit mode: false
[2010-01-25 00:26:36,403] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:26:36,403] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:26:36,406] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-25 00:26:36,406] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-25 00:26:36,409] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:26:36,410] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-25 00:26:36,412] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-25 00:26:36,412] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-25 00:26:36,412] INFO  - Automatic session close at end of transaction: disabled
[2010-01-25 00:26:36,413] INFO  - Scrollable result sets: enabled
[2010-01-25 00:26:36,413] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-25 00:26:36,413] INFO  - Connection release mode: auto
[2010-01-25 00:26:36,414] INFO  - Maximum outer join fetch depth: 1
[2010-01-25 00:26:36,414] INFO  - Default batch fetch size: 1
[2010-01-25 00:26:36,414] INFO  - Generate SQL with comments: disabled
[2010-01-25 00:26:36,414] INFO  - Order SQL updates by primary key: disabled
[2010-01-25 00:26:36,414] INFO  - Order SQL inserts for batching: disabled
[2010-01-25 00:26:36,414] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-25 00:26:36,419] INFO  - Using ASTQueryTranslatorFactory
[2010-01-25 00:26:36,419] INFO  - Query language substitutions: {}
[2010-01-25 00:26:36,420] INFO  - JPA-QL strict compliance: disabled
[2010-01-25 00:26:36,420] INFO  - Second-level cache: enabled
[2010-01-25 00:26:36,420] INFO  - Query cache: enabled
[2010-01-25 00:26:36,424] INFO  - Cache region factory : org.hibernate.cache.impl.bridge.RegionFactoryCacheProviderBridge
[2010-01-25 00:26:36,425] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-25 00:26:36,427] INFO  - Optimize cache for minimal puts: disabled
[2010-01-25 00:26:36,427] INFO  - Cache region prefix: arv
[2010-01-25 00:26:36,427] INFO  - Structured second-level cache entries: disabled
[2010-01-25 00:26:36,427] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-25 00:26:36,430] INFO  - Statistics: disabled
[2010-01-25 00:26:36,430] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-25 00:26:36,431] INFO  - Default entity-mode: pojo
[2010-01-25 00:26:36,431] INFO  - Named query checking : enabled
[2010-01-25 00:26:36,471] INFO  - building session factory
[2010-01-25 00:26:36,510] WARN  - Could not find configuration [arv.BoolTest]; using defaults.
[2010-01-25 00:26:36,784] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:26:36,878] WARN  - Could not find configuration [arv.Sort]; using defaults.
[2010-01-25 00:26:36,902] WARN  - Could not find configuration [arv.KidTwo]; using defaults.
[2010-01-25 00:26:36,928] WARN  - Could not find configuration [arv.MixedKids]; using defaults.
[2010-01-25 00:26:36,951] WARN  - Could not find configuration [arv.KidThree]; using defaults.
[2010-01-25 00:26:36,971] WARN  - Could not find configuration [arv.Favorite]; using defaults.
[2010-01-25 00:26:36,990] WARN  - Could not find configuration [arv.Levelthree]; using defaults.
[2010-01-25 00:26:37,010] WARN  - Could not find configuration [arv.Interleave]; using defaults.
[2010-01-25 00:26:37,027] WARN  - Could not find configuration [arv.SortChild]; using defaults.
[2010-01-25 00:26:37,060] WARN  - Could not find configuration [arv.Leveltwo]; using defaults.
[2010-01-25 00:26:37,076] WARN  - Could not find configuration [arv.Address]; using defaults.
[2010-01-25 00:26:37,097] WARN  - Could not find configuration [arv.Levelone]; using defaults.
[2010-01-25 00:26:37,113] WARN  - Could not find configuration [arv.Cache]; using defaults.
[2010-01-25 00:26:37,132] WARN  - Could not find configuration [arv.KidOne]; using defaults.
[2010-01-25 00:26:37,146] WARN  - Could not find configuration [arv.Remover]; using defaults.
[2010-01-25 00:26:37,159] WARN  - Could not find configuration [arv.AddressBook]; using defaults.
[2010-01-25 00:26:37,183] WARN  - Could not find configuration [arv.Statistics]; using defaults.
[2010-01-25 00:26:37,279] INFO  - Not binding factory to JNDI, no JNDI name configured
[2010-01-25 00:26:37,280] INFO  - starting update timestamps cache at region: arv.org.hibernate.cache.UpdateTimestampsCache
[2010-01-25 00:26:37,281] WARN  - Could not find configuration [arv.org.hibernate.cache.UpdateTimestampsCache]; using defaults.
[2010-01-25 00:26:37,283] INFO  - starting query cache at region: arv.org.hibernate.cache.StandardQueryCache
[2010-01-25 00:26:37,284] WARN  - Could not find configuration [arv.org.hibernate.cache.StandardQueryCache]; using defaults.
[2010-01-25 00:26:37,286] DEBUG - PersistenceLoader.load() : loaded 17 class(es)
[2010-01-25 00:26:37,365] DEBUG - XmlSerializer() : loaded 17 classes
[2010-01-25 00:26:37,398] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:37,415] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:37,423] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:37,703] DEBUG - XmlSerializer.save() : timing 316 at [extract]
[2010-01-25 00:26:37,756] DEBUG - XmlSerializer.save() : timing 53 at [lock]
[2010-01-25 00:26:37,769] DEBUG - XmlSerializer.save() : timing 13 at [changed]
[2010-01-25 00:26:37,796] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:37,892] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:26:37,893] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:26:37,917] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:37,917] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:37,919] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:37,923] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:37,928] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:37,928] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:37,928] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:37,929] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:37,932] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:37,937] DEBUG - XmlSerializer.save() : timing 168 at [storeAll]
[2010-01-25 00:26:37,961] DEBUG - XmlSerializer.save() : timing 24 at [findupdate]
[2010-01-25 00:26:37,971] DEBUG - UpdateCache.update() : update [class AddressBook], id [688128]
[2010-01-25 00:26:37,987] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:38,125] DEBUG - PooledThread.queue() : priority 1
[2010-01-25 00:26:38,126] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,127] DEBUG - UpdateCache.update() : update [class Address], id [557056]
[2010-01-25 00:26:38,127] DEBUG - UpdateThread.update() : begin 5704430
[2010-01-25 00:26:38,128] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:38,136] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,136] DEBUG - UpdateCache.update() : update [class Statistics], id [589824]
[2010-01-25 00:26:38,138] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:38,141] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,141] DEBUG - UpdateCache.update() : update [class Favorite], id [622592]
[2010-01-25 00:26:38,142] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:38,145] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,145] DEBUG - UpdateCache.update() : update [class Favorite], id [622593]
[2010-01-25 00:26:38,154] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:38,156] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,156] DEBUG - UpdateCache.update() : update [class Remover], id [655360]
[2010-01-25 00:26:38,158] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:38,160] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,160] DEBUG - UpdateCache.update() : update [class AddressBook], id [688128]
[2010-01-25 00:26:38,160] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:38,177] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,177] DEBUG - UpdateCache.update() : update [class Address], id [557056]
[2010-01-25 00:26:38,177] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:38,183] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,183] DEBUG - UpdateCache.update() : update [class Statistics], id [589824]
[2010-01-25 00:26:38,183] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:38,187] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,187] DEBUG - UpdateCache.update() : update [class Favorite], id [622592]
[2010-01-25 00:26:38,187] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:38,190] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,190] DEBUG - UpdateCache.update() : update [class Favorite], id [622593]
[2010-01-25 00:26:38,190] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:38,196] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,196] DEBUG - UpdateCache.update() : update [class Remover], id [655360]
[2010-01-25 00:26:38,196] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:38,198] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,198] DEBUG - XmlSerializer.save() : timing 237 at [cache]
[2010-01-25 00:26:38,637] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:26:38,637] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:26:38,641] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:38,641] DEBUG - XmlSerializer.save() : timing 443 at [save]
[2010-01-25 00:26:38,641] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:38,642] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:38,663] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:38,665] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:38,712] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:38,717] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:38,719] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:38,747] DEBUG - XmlSerializer.save() : timing 36 at [extract]
[2010-01-25 00:26:38,747] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:38,747] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:38,748] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:38,749] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:38,749] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:38,750] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:38,751] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:38,752] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:38,752] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:38,752] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:38,752] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:38,753] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:38,753] DEBUG - XmlSerializer.save() : timing 6 at [storeAll]
[2010-01-25 00:26:38,754] DEBUG - UpdateThread.update() : update 163841, type class AddressBook
[2010-01-25 00:26:38,756] DEBUG - XmlSerializer.save() : timing 3 at [findupdate]
[2010-01-25 00:26:38,756] DEBUG - UpdateCache.update() : update [class AddressBook], id [688129]
[2010-01-25 00:26:38,757] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:38,769] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,769] DEBUG - UpdateCache.update() : update [class Address], id [557057]
[2010-01-25 00:26:38,769] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:38,786] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,786] DEBUG - UpdateCache.update() : update [class Statistics], id [589825]
[2010-01-25 00:26:38,786] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:38,790] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,790] DEBUG - UpdateCache.update() : update [class Favorite], id [622594]
[2010-01-25 00:26:38,791] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:38,794] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,794] DEBUG - UpdateCache.update() : update [class Favorite], id [622595]
[2010-01-25 00:26:38,794] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:38,795] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,795] DEBUG - UpdateCache.update() : update [class Remover], id [655361]
[2010-01-25 00:26:38,796] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:38,798] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,798] DEBUG - UpdateCache.update() : update [class AddressBook], id [688129]
[2010-01-25 00:26:38,799] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:38,809] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:38,809] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,810] DEBUG - UpdateCache.update() : update [class Address], id [557057]
[2010-01-25 00:26:38,810] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:38,813] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,813] DEBUG - UpdateCache.update() : update [class Statistics], id [589825]
[2010-01-25 00:26:38,813] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:38,817] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,817] DEBUG - UpdateCache.update() : update [class Favorite], id [622594]
[2010-01-25 00:26:38,817] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:38,819] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,819] DEBUG - UpdateCache.update() : update [class Favorite], id [622595]
[2010-01-25 00:26:38,819] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:38,820] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,821] DEBUG - UpdateCache.update() : update [class Remover], id [655361]
[2010-01-25 00:26:38,821] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:38,825] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:38,825] DEBUG - XmlSerializer.save() : timing 69 at [cache]
[2010-01-25 00:26:38,859] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:38,859] DEBUG - XmlSerializer.save() : timing 34 at [save]
[2010-01-25 00:26:38,859] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:38,859] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:38,875] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:38,877] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:38,906] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:38,911] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:38,916] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:38,942] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:38,954] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:38,961] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:38,962] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:38,965] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:38,966] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:38,994] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:26:38,995] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:26:39,019] DEBUG - XmlSerializer.save() : timing 65 at [extract]
[2010-01-25 00:26:39,019] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:39,021] DEBUG - XmlSerializer.save() : timing 2 at [lock]
[2010-01-25 00:26:39,021] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,057] DEBUG - LockItem.unlock() : 13 current
[2010-01-25 00:26:39,057] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,058] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:39,058] DEBUG - UpdateThread.update() : total 333, complete 1
[2010-01-25 00:26:39,059] DEBUG - UpdateThread.update() : update 32769, type class Address
[2010-01-25 00:26:39,061] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,069] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,070] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,075] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:26:39,075] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:26:39,078] DEBUG - XmlCompare.next(): hit  <status>new</status> vs.  <address type="home">
[2010-01-25 00:26:39,088] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:39,088] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,088] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:39,088] DEBUG - UpdateThread.update() : total 333, complete 2
[2010-01-25 00:26:39,089] DEBUG - UpdateThread.update() : update 65537, type class Statistics
[2010-01-25 00:26:39,094] DEBUG - XmlCompare.compare() : [[688129:address-book]]
[2010-01-25 00:26:39,094] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:39,094] DEBUG - XmlSerializer.save() : timing 73 at [changed]
[2010-01-25 00:26:39,096] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,097] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:39,098] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:26:39,098] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:26:39,110] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,110] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:39,111] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,111] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:39,111] DEBUG - UpdateThread.update() : total 333, complete 3
[2010-01-25 00:26:39,111] DEBUG - UpdateThread.update() : update 98306, type class Favorite
[2010-01-25 00:26:39,111] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,112] DEBUG - XmlSerializer().storeAll() : old [557057]
[2010-01-25 00:26:39,112] DEBUG - XmlSerializer().storeAll() : new [557057, null]
[2010-01-25 00:26:39,113] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,113] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,115] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 557057, Address : 557058]], old [[Address : 557057, Address : 557058]]
[2010-01-25 00:26:39,116] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:26:39,116] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:26:39,122] DEBUG - XmlSerializer().storeAll() : old [622594, 622595]
[2010-01-25 00:26:39,122] DEBUG - XmlSerializer().storeAll() : new [622594, 622595]
[2010-01-25 00:26:39,124] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [688129]
[2010-01-25 00:26:39,124] DEBUG - XmlSerializer.save() : timing 30 at [storeAll]
[2010-01-25 00:26:39,127] DEBUG - XmlSerializer.save() : timing 3 at [findupdate]
[2010-01-25 00:26:39,127] DEBUG - UpdateCache.update() : update [class AddressBook], id [688129]
[2010-01-25 00:26:39,127] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,129] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:39,129] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,129] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:39,129] DEBUG - UpdateThread.update() : total 333, complete 4
[2010-01-25 00:26:39,129] DEBUG - UpdateThread.update() : update 98307, type class Favorite
[2010-01-25 00:26:39,130] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,132] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,133] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,135] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:26:39,135] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:26:39,144] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:39,144] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,144] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:39,144] DEBUG - UpdateThread.update() : total 333, complete 5
[2010-01-25 00:26:39,144] DEBUG - UpdateThread.update() : update 131073, type class Remover
[2010-01-25 00:26:39,144] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:39,146] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,146] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:39,148] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:26:39,148] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:26:39,149] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,149] DEBUG - UpdateCache.update() : update [class Address], id [557058]
[2010-01-25 00:26:39,149] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,152] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,152] DEBUG - XmlSerializer.save() : timing 25 at [cache]
[2010-01-25 00:26:39,169] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:39,169] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,169] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:39,169] DEBUG - UpdateThread.update() : total 333, complete 6
[2010-01-25 00:26:39,169] DEBUG - UpdateThread.update() : update 163841, type class AddressBook
[2010-01-25 00:26:39,171] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,174] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,176] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:39,176] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,177] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:39,177] DEBUG - UpdateThread.update() : total 333, complete 7
[2010-01-25 00:26:39,177] DEBUG - UpdateThread.update() : update 32769, type class Address
[2010-01-25 00:26:39,178] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:39,178] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:39,178] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,178] DEBUG - XmlSerializer.save() : timing 26 at [save]
[2010-01-25 00:26:39,178] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:39,178] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:39,182] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,186] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,186] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:39,189] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,189] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,189] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,189] DEBUG - UpdateThread.update() : total 333, complete 8
[2010-01-25 00:26:39,190] DEBUG - UpdateThread.update() : update 65537, type class Statistics
[2010-01-25 00:26:39,190] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:39,190] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,195] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,197] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,197] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,197] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,197] DEBUG - UpdateThread.update() : total 333, complete 9
[2010-01-25 00:26:39,197] DEBUG - UpdateThread.update() : update 98306, type class Favorite
[2010-01-25 00:26:39,197] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,199] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,201] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,201] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,201] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,201] DEBUG - UpdateThread.update() : total 333, complete 10
[2010-01-25 00:26:39,201] DEBUG - UpdateThread.update() : update 98307, type class Favorite
[2010-01-25 00:26:39,213] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,214] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,216] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,216] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,216] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,216] DEBUG - UpdateThread.update() : total 333, complete 11
[2010-01-25 00:26:39,216] DEBUG - UpdateThread.update() : update 131073, type class Remover
[2010-01-25 00:26:39,217] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,218] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,221] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,221] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,221] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,221] DEBUG - UpdateThread.update() : total 333, complete 12
[2010-01-25 00:26:39,221] DEBUG - UpdateThread.update() : update 163841, type class AddressBook
[2010-01-25 00:26:39,223] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,225] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,227] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:39,230] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,230] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,230] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,230] DEBUG - UpdateThread.update() : total 333, complete 13
[2010-01-25 00:26:39,231] DEBUG - UpdateThread.update() : update 32770, type class Address
[2010-01-25 00:26:39,233] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,233] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:39,235] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:39,235] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,237] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,240] DEBUG - UpdateCache.remove() : size before 13
[2010-01-25 00:26:39,240] DEBUG - UpdateCache.remove() : size after 13
[2010-01-25 00:26:39,244] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,244] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,244] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,244] DEBUG - UpdateThread.update() : total 333, complete 14
[2010-01-25 00:26:39,245] DEBUG - UpdateThread.update() : update 163842, type class AddressBook
[2010-01-25 00:26:39,247] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,251] DEBUG - XmlSerializer.save() : timing 24 at [extract]
[2010-01-25 00:26:39,251] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:39,252] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-25 00:26:39,253] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,253] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:39,254] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:39,255] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:39,257] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:39,258] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:39,259] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:39,259] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:39,259] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:39,261] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:39,262] DEBUG - XmlSerializer.save() : timing 10 at [storeAll]
[2010-01-25 00:26:39,264] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:26:39,264] DEBUG - UpdateCache.update() : update [class AddressBook], id [688130]
[2010-01-25 00:26:39,264] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,279] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,281] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,281] DEBUG - UpdateCache.update() : update [class Address], id [557059]
[2010-01-25 00:26:39,281] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,282] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,286] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,286] DEBUG - UpdateCache.update() : update [class Statistics], id [589826]
[2010-01-25 00:26:39,286] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:39,287] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,287] DEBUG - UpdateCache.update() : update [class Favorite], id [622596]
[2010-01-25 00:26:39,287] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,289] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,289] DEBUG - UpdateCache.update() : update [class Favorite], id [622597]
[2010-01-25 00:26:39,289] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,290] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,291] DEBUG - UpdateCache.update() : update [class Remover], id [655362]
[2010-01-25 00:26:39,291] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:39,292] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,292] DEBUG - UpdateCache.update() : update [class AddressBook], id [688130]
[2010-01-25 00:26:39,292] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,295] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,295] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,303] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:39,303] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,303] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,303] DEBUG - UpdateThread.update() : total 333, complete 15
[2010-01-25 00:26:39,304] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,304] DEBUG - UpdateCache.update() : update [class Address], id [557059]
[2010-01-25 00:26:39,304] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,304] DEBUG - UpdateThread.update() : update 32771, type class Address
[2010-01-25 00:26:39,306] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,307] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,307] DEBUG - UpdateCache.update() : update [class Statistics], id [589826]
[2010-01-25 00:26:39,307] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:39,308] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,308] DEBUG - UpdateCache.update() : update [class Favorite], id [622596]
[2010-01-25 00:26:39,308] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,308] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,310] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,310] DEBUG - UpdateCache.update() : update [class Favorite], id [622597]
[2010-01-25 00:26:39,310] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,311] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,312] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,312] DEBUG - UpdateCache.update() : update [class Remover], id [655362]
[2010-01-25 00:26:39,312] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:39,314] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,314] DEBUG - XmlSerializer.save() : timing 50 at [cache]
[2010-01-25 00:26:39,316] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,317] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,324] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,324] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,324] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,324] DEBUG - UpdateThread.update() : total 333, complete 16
[2010-01-25 00:26:39,324] DEBUG - UpdateThread.update() : update 65538, type class Statistics
[2010-01-25 00:26:39,325] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:39,326] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,327] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:39,329] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,329] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,338] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,338] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,338] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,338] DEBUG - UpdateThread.update() : total 333, complete 17
[2010-01-25 00:26:39,338] DEBUG - UpdateThread.update() : update 98308, type class Favorite
[2010-01-25 00:26:39,338] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,341] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,342] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,344] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,345] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,356] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,356] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,356] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,356] DEBUG - UpdateThread.update() : total 333, complete 18
[2010-01-25 00:26:39,356] DEBUG - UpdateThread.update() : update 98309, type class Favorite
[2010-01-25 00:26:39,356] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:39,356] DEBUG - XmlSerializer.save() : timing 42 at [save]
[2010-01-25 00:26:39,356] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:39,356] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,357] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:39,358] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,358] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,360] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,360] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,363] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,363] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,363] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,363] DEBUG - UpdateThread.update() : total 333, complete 19
[2010-01-25 00:26:39,363] DEBUG - UpdateThread.update() : update 131074, type class Remover
[2010-01-25 00:26:39,364] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:39,365] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:39,366] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,366] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:39,367] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,367] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,368] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:39,370] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,370] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,370] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,370] DEBUG - UpdateThread.update() : total 333, complete 20
[2010-01-25 00:26:39,371] DEBUG - UpdateThread.update() : update 163842, type class AddressBook
[2010-01-25 00:26:39,372] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,375] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,377] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,377] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,377] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,377] DEBUG - UpdateThread.update() : total 333, complete 21
[2010-01-25 00:26:39,377] DEBUG - UpdateThread.update() : update 32771, type class Address
[2010-01-25 00:26:39,380] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,381] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,383] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,383] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,384] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,384] DEBUG - UpdateThread.update() : total 333, complete 22
[2010-01-25 00:26:39,385] DEBUG - UpdateThread.update() : update 65538, type class Statistics
[2010-01-25 00:26:39,391] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,392] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,395] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,395] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,395] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,395] DEBUG - UpdateThread.update() : total 333, complete 23
[2010-01-25 00:26:39,395] DEBUG - UpdateThread.update() : update 98308, type class Favorite
[2010-01-25 00:26:39,396] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,397] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,399] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,399] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,399] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,399] DEBUG - UpdateThread.update() : total 333, complete 24
[2010-01-25 00:26:39,400] DEBUG - UpdateThread.update() : update 98309, type class Favorite
[2010-01-25 00:26:39,400] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,401] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,404] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,404] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,404] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,404] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,404] DEBUG - UpdateThread.update() : total 333, complete 25
[2010-01-25 00:26:39,405] DEBUG - UpdateThread.update() : update 131074, type class Remover
[2010-01-25 00:26:39,405] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,406] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,408] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,408] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,408] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,408] DEBUG - UpdateThread.update() : total 333, complete 26
[2010-01-25 00:26:39,409] DEBUG - UpdateThread.update() : update 163842, type class AddressBook
[2010-01-25 00:26:39,410] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,412] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,413] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,413] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,414] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,414] DEBUG - UpdateThread.update() : total 333, complete 27
[2010-01-25 00:26:39,414] DEBUG - UpdateThread.update() : update 163843, type class AddressBook
[2010-01-25 00:26:39,416] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,417] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:39,421] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:39,423] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:39,459] DEBUG - XmlSerializer.save() : timing 43 at [extract]
[2010-01-25 00:26:39,460] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:39,470] DEBUG - XmlSerializer.save() : timing 11 at [lock]
[2010-01-25 00:26:39,470] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,486] DEBUG - XmlCompare.next(): hit  <name>robs address book</name> vs.  <name>set another name</name>
[2010-01-25 00:26:39,502] DEBUG - XmlCompare.compare() : [[688130:address-book]]
[2010-01-25 00:26:39,502] DEBUG - XmlSerializer.save() : timing 32 at [changed]
[2010-01-25 00:26:39,504] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [set another name], old [robs address book]
[2010-01-25 00:26:39,506] DEBUG - XmlSerializer().storeAll() : old [557059]
[2010-01-25 00:26:39,506] DEBUG - XmlSerializer().storeAll() : new [557059]
[2010-01-25 00:26:39,511] DEBUG - XmlSerializer().storeAll() : old [622596, 622597]
[2010-01-25 00:26:39,511] DEBUG - XmlSerializer().storeAll() : new [622596, 622597]
[2010-01-25 00:26:39,512] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [688130]
[2010-01-25 00:26:39,512] DEBUG - XmlSerializer.save() : timing 10 at [storeAll]
[2010-01-25 00:26:39,517] DEBUG - XmlSerializer.save() : timing 5 at [findupdate]
[2010-01-25 00:26:39,517] DEBUG - UpdateCache.update() : update [class AddressBook], id [688130]
[2010-01-25 00:26:39,517] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,519] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,521] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,527] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,527] DEBUG - XmlSerializer.save() : timing 10 at [cache]
[2010-01-25 00:26:39,540] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:26:39,540] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:39,540] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:39,540] DEBUG - XmlSerializer.save() : timing 13 at [save]
[2010-01-25 00:26:39,540] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:39,540] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:26:39,551] DEBUG - Queries.load() :  load from stream [queries.xml]
[2010-01-25 00:26:39,564] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,564] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,573] DEBUG - LockItem.unlock() : 19 current
[2010-01-25 00:26:39,573] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,573] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,573] DEBUG - UpdateThread.update() : total 333, complete 28
[2010-01-25 00:26:39,573] DEBUG - UpdateThread.update() : update 32772, type class Address
[2010-01-25 00:26:39,574] DEBUG - Queries.load() :  loaded 9
[2010-01-25 00:26:39,575] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,579] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,580] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,582] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:26:39,583] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,583] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,595] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,595] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,595] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,595] DEBUG - UpdateThread.update() : total 333, complete 29
[2010-01-25 00:26:39,595] DEBUG - UpdateThread.update() : update 32773, type class Address
[2010-01-25 00:26:39,597] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,599] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,600] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,602] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,602] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,614] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,614] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,614] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,617] DEBUG - UpdateThread.update() : total 333, complete 30
[2010-01-25 00:26:39,617] DEBUG - UpdateThread.update() : update 32774, type class Address
[2010-01-25 00:26:39,618] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,620] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,620] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,622] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,622] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,626] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,626] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,626] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,626] DEBUG - UpdateThread.update() : total 333, complete 31
[2010-01-25 00:26:39,627] DEBUG - UpdateThread.update() : update 32775, type class Address
[2010-01-25 00:26:39,628] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,631] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,632] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,634] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,634] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,638] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,638] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,638] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,638] DEBUG - UpdateThread.update() : total 333, complete 32
[2010-01-25 00:26:39,638] DEBUG - UpdateThread.update() : update 32776, type class Address
[2010-01-25 00:26:39,639] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,643] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,645] DEBUG - XmlSerializer.sqlLoad() : timing 24 at [query]
[2010-01-25 00:26:39,647] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,649] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,649] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,652] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,653] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,653] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,653] DEBUG - UpdateThread.update() : total 333, complete 33
[2010-01-25 00:26:39,653] DEBUG - UpdateThread.update() : update 32777, type class Address
[2010-01-25 00:26:39,654] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,663] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,664] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,668] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,668] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,673] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,673] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,673] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,673] DEBUG - UpdateThread.update() : total 333, complete 34
[2010-01-25 00:26:39,673] DEBUG - UpdateThread.update() : update 32778, type class Address
[2010-01-25 00:26:39,673] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:39,674] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,676] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,677] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,680] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,680] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,680] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:39,682] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:39,688] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,689] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,689] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,689] DEBUG - UpdateThread.update() : total 333, complete 35
[2010-01-25 00:26:39,689] DEBUG - UpdateThread.update() : update 32779, type class Address
[2010-01-25 00:26:39,692] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,694] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,694] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,696] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,696] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,699] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,699] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,699] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,699] DEBUG - UpdateThread.update() : total 333, complete 36
[2010-01-25 00:26:39,700] DEBUG - UpdateThread.update() : update 32780, type class Address
[2010-01-25 00:26:39,716] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,719] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,719] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,721] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,721] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,725] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,725] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,725] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,725] DEBUG - UpdateThread.update() : total 333, complete 37
[2010-01-25 00:26:39,725] DEBUG - UpdateThread.update() : update 32781, type class Address
[2010-01-25 00:26:39,726] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,729] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,731] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,734] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,734] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,738] DEBUG - XmlSerializer.save() : timing 65 at [extract]
[2010-01-25 00:26:39,738] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:39,738] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,738] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,738] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,738] DEBUG - UpdateThread.update() : total 333, complete 38
[2010-01-25 00:26:39,738] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:39,738] DEBUG - UpdateThread.update() : update 32782, type class Address
[2010-01-25 00:26:39,739] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,740] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,741] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,742] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,743] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,744] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,744] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,745] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,745] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,746] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,747] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,747] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,747] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,747] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,754] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,757] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,757] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,757] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,757] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,757] DEBUG - UpdateThread.update() : total 333, complete 39
[2010-01-25 00:26:39,758] DEBUG - UpdateThread.update() : update 32783, type class Address
[2010-01-25 00:26:39,758] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,758] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,759] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,760] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:39,760] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:39,760] DEBUG - XmlSerializer().storeAll() : new [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
[2010-01-25 00:26:39,761] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,761] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:39,762] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,762] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:39,763] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:39,763] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:39,763] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:39,763] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:39,763] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,763] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,763] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:39,764] DEBUG - XmlSerializer.save() : timing 26 at [storeAll]
[2010-01-25 00:26:39,767] DEBUG - XmlSerializer.save() : timing 3 at [findupdate]
[2010-01-25 00:26:39,767] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,767] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,767] DEBUG - UpdateCache.update() : update [class AddressBook], id [688131]
[2010-01-25 00:26:39,767] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,767] DEBUG - UpdateThread.update() : total 333, complete 40
[2010-01-25 00:26:39,767] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,767] DEBUG - UpdateThread.update() : update 32784, type class Address
[2010-01-25 00:26:39,768] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,776] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,776] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,778] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,778] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,783] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,783] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,783] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,783] DEBUG - UpdateThread.update() : total 333, complete 41
[2010-01-25 00:26:39,783] DEBUG - UpdateThread.update() : update 32785, type class Address
[2010-01-25 00:26:39,784] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,786] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,787] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,790] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,790] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,794] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,794] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,794] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,794] DEBUG - UpdateThread.update() : total 333, complete 42
[2010-01-25 00:26:39,794] DEBUG - UpdateThread.update() : update 65539, type class Statistics
[2010-01-25 00:26:39,794] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:39,797] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,797] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:39,798] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:26:39,799] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:26:39,802] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,802] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,802] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,802] DEBUG - UpdateThread.update() : total 333, complete 43
[2010-01-25 00:26:39,802] DEBUG - UpdateThread.update() : update 98310, type class Favorite
[2010-01-25 00:26:39,803] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,804] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,805] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,805] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,805] DEBUG - UpdateCache.update() : update [class Address], id [557060]
[2010-01-25 00:26:39,805] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,807] DEBUG - UpdateCache.remove() : size before 21
[2010-01-25 00:26:39,807] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,807] DEBUG - UpdateCache.update() : update [class Address], id [557061]
[2010-01-25 00:26:39,807] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,807] DEBUG - UpdateCache.remove() : size after 21
[2010-01-25 00:26:39,808] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,808] DEBUG - UpdateCache.update() : update [class Address], id [557062]
[2010-01-25 00:26:39,808] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,810] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,810] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,810] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,810] DEBUG - UpdateThread.update() : total 333, complete 44
[2010-01-25 00:26:39,810] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,810] DEBUG - UpdateCache.update() : update [class Address], id [557063]
[2010-01-25 00:26:39,810] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,810] DEBUG - UpdateThread.update() : update 98311, type class Favorite
[2010-01-25 00:26:39,811] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,811] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,812] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,812] DEBUG - UpdateCache.update() : update [class Address], id [557064]
[2010-01-25 00:26:39,812] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,812] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,813] DEBUG - UpdateCache.remove() : size before 24
[2010-01-25 00:26:39,813] DEBUG - UpdateCache.remove() : size after 24
[2010-01-25 00:26:39,813] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,813] DEBUG - UpdateCache.update() : update [class Address], id [557065]
[2010-01-25 00:26:39,813] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,815] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,815] DEBUG - UpdateCache.update() : update [class Address], id [557066]
[2010-01-25 00:26:39,815] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,817] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,817] DEBUG - UpdateCache.update() : update [class Address], id [557067]
[2010-01-25 00:26:39,818] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,818] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,818] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,818] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,818] DEBUG - UpdateThread.update() : total 333, complete 45
[2010-01-25 00:26:39,818] DEBUG - UpdateThread.update() : update 131075, type class Remover
[2010-01-25 00:26:39,819] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:39,820] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,820] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:39,820] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,820] DEBUG - UpdateCache.update() : update [class Address], id [557068]
[2010-01-25 00:26:39,820] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,821] DEBUG - UpdateCache.remove() : size before 28
[2010-01-25 00:26:39,822] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,822] DEBUG - UpdateCache.update() : update [class Address], id [557069]
[2010-01-25 00:26:39,822] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,822] DEBUG - UpdateCache.remove() : size after 29
[2010-01-25 00:26:39,830] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,830] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,831] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,831] DEBUG - UpdateThread.update() : total 333, complete 46
[2010-01-25 00:26:39,831] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,831] DEBUG - UpdateCache.update() : update [class Address], id [557070]
[2010-01-25 00:26:39,831] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,831] DEBUG - UpdateThread.update() : update 163843, type class AddressBook
[2010-01-25 00:26:39,832] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,833] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,833] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,833] DEBUG - UpdateCache.update() : update [class Address], id [557071]
[2010-01-25 00:26:39,833] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,835] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,835] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,835] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,835] DEBUG - UpdateThread.update() : total 333, complete 47
[2010-01-25 00:26:39,835] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,835] DEBUG - UpdateCache.update() : update [class Address], id [557072]
[2010-01-25 00:26:39,835] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,835] DEBUG - UpdateThread.update() : update 32772, type class Address
[2010-01-25 00:26:39,836] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,837] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,837] DEBUG - UpdateCache.update() : update [class Address], id [557073]
[2010-01-25 00:26:39,837] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,838] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,839] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,839] DEBUG - UpdateCache.update() : update [class Statistics], id [589827]
[2010-01-25 00:26:39,839] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:39,840] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,840] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,840] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,840] DEBUG - UpdateThread.update() : total 333, complete 48
[2010-01-25 00:26:39,840] DEBUG - UpdateThread.update() : update 32773, type class Address
[2010-01-25 00:26:39,840] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,841] DEBUG - UpdateCache.update() : update [class Favorite], id [622598]
[2010-01-25 00:26:39,841] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,841] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,842] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,842] DEBUG - UpdateCache.update() : update [class Favorite], id [622599]
[2010-01-25 00:26:39,842] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,842] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,843] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,843] DEBUG - UpdateCache.update() : update [class Remover], id [655363]
[2010-01-25 00:26:39,843] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:39,844] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,844] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,844] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,844] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,844] DEBUG - UpdateThread.update() : total 333, complete 49
[2010-01-25 00:26:39,844] DEBUG - UpdateCache.update() : update [class AddressBook], id [688131]
[2010-01-25 00:26:39,844] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:39,844] DEBUG - UpdateThread.update() : update 32774, type class Address
[2010-01-25 00:26:39,845] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,846] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,849] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,849] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,849] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,849] DEBUG - UpdateThread.update() : total 333, complete 50
[2010-01-25 00:26:39,849] DEBUG - UpdateThread.update() : update 32775, type class Address
[2010-01-25 00:26:39,850] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,851] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,854] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,854] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,854] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,854] DEBUG - UpdateThread.update() : total 333, complete 51
[2010-01-25 00:26:39,854] DEBUG - UpdateThread.update() : update 32776, type class Address
[2010-01-25 00:26:39,855] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,862] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,864] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,864] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,864] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,864] DEBUG - UpdateThread.update() : total 333, complete 52
[2010-01-25 00:26:39,864] DEBUG - UpdateThread.update() : update 32777, type class Address
[2010-01-25 00:26:39,865] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,866] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,868] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,868] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,868] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,868] DEBUG - UpdateThread.update() : total 333, complete 53
[2010-01-25 00:26:39,868] DEBUG - UpdateThread.update() : update 32778, type class Address
[2010-01-25 00:26:39,869] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,879] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,879] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,879] DEBUG - UpdateCache.update() : update [class Address], id [557060]
[2010-01-25 00:26:39,879] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,881] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,881] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,881] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,881] DEBUG - UpdateThread.update() : total 333, complete 54
[2010-01-25 00:26:39,881] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,881] DEBUG - UpdateCache.update() : update [class Address], id [557061]
[2010-01-25 00:26:39,881] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,881] DEBUG - UpdateThread.update() : update 32779, type class Address
[2010-01-25 00:26:39,882] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,882] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,883] DEBUG - UpdateCache.update() : update [class Address], id [557062]
[2010-01-25 00:26:39,883] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,883] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,885] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,886] DEBUG - UpdateCache.update() : update [class Address], id [557063]
[2010-01-25 00:26:39,886] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,887] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,887] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,887] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,887] DEBUG - UpdateThread.update() : total 333, complete 55
[2010-01-25 00:26:39,887] DEBUG - UpdateThread.update() : update 32780, type class Address
[2010-01-25 00:26:39,888] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,888] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,888] DEBUG - UpdateCache.update() : update [class Address], id [557064]
[2010-01-25 00:26:39,888] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,890] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,890] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,890] DEBUG - UpdateCache.update() : update [class Address], id [557065]
[2010-01-25 00:26:39,891] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,892] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,892] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,892] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,892] DEBUG - UpdateThread.update() : total 333, complete 56
[2010-01-25 00:26:39,892] DEBUG - UpdateThread.update() : update 32781, type class Address
[2010-01-25 00:26:39,893] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,893] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,894] DEBUG - UpdateCache.update() : update [class Address], id [557066]
[2010-01-25 00:26:39,894] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,894] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,895] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,895] DEBUG - UpdateCache.update() : update [class Address], id [557067]
[2010-01-25 00:26:39,896] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,897] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,897] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,897] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,897] DEBUG - UpdateThread.update() : total 333, complete 57
[2010-01-25 00:26:39,897] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,897] DEBUG - UpdateThread.update() : update 32782, type class Address
[2010-01-25 00:26:39,897] DEBUG - UpdateCache.update() : update [class Address], id [557068]
[2010-01-25 00:26:39,897] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,898] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,899] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,900] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,904] DEBUG - UpdateCache.update() : update [class Address], id [557069]
[2010-01-25 00:26:39,904] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,905] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,905] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,905] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,905] DEBUG - UpdateThread.update() : total 333, complete 58
[2010-01-25 00:26:39,906] DEBUG - UpdateThread.update() : update 32783, type class Address
[2010-01-25 00:26:39,906] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,906] DEBUG - UpdateCache.update() : update [class Address], id [557070]
[2010-01-25 00:26:39,906] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,906] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,907] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,907] DEBUG - UpdateCache.update() : update [class Address], id [557071]
[2010-01-25 00:26:39,907] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,908] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,909] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,909] DEBUG - UpdateCache.update() : update [class Address], id [557072]
[2010-01-25 00:26:39,909] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,910] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,910] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,910] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,910] DEBUG - UpdateThread.update() : total 333, complete 59
[2010-01-25 00:26:39,910] DEBUG - UpdateThread.update() : update 32784, type class Address
[2010-01-25 00:26:39,911] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,912] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,913] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,914] DEBUG - UpdateCache.update() : update [class Address], id [557073]
[2010-01-25 00:26:39,914] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:39,915] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,915] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,915] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,915] DEBUG - UpdateThread.update() : total 333, complete 60
[2010-01-25 00:26:39,915] DEBUG - UpdateThread.update() : update 32785, type class Address
[2010-01-25 00:26:39,916] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,916] DEBUG - UpdateCache.update() : update [class Statistics], id [589827]
[2010-01-25 00:26:39,916] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:39,917] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,917] DEBUG - UpdateCache.update() : update [class Favorite], id [622598]
[2010-01-25 00:26:39,917] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,918] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,918] DEBUG - UpdateCache.update() : update [class Favorite], id [622599]
[2010-01-25 00:26:39,918] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:39,919] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,919] DEBUG - UpdateCache.update() : update [class Remover], id [655363]
[2010-01-25 00:26:39,919] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:39,920] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:39,920] DEBUG - XmlSerializer.save() : timing 153 at [cache]
[2010-01-25 00:26:39,920] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,921] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,924] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,924] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,925] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,925] DEBUG - UpdateThread.update() : total 333, complete 61
[2010-01-25 00:26:39,925] DEBUG - UpdateThread.update() : update 65539, type class Statistics
[2010-01-25 00:26:39,925] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,930] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,945] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,945] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,945] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,945] DEBUG - UpdateThread.update() : total 333, complete 62
[2010-01-25 00:26:39,945] DEBUG - UpdateThread.update() : update 98310, type class Favorite
[2010-01-25 00:26:39,945] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,947] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,949] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,949] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,949] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,949] DEBUG - UpdateThread.update() : total 333, complete 63
[2010-01-25 00:26:39,949] DEBUG - UpdateThread.update() : update 98311, type class Favorite
[2010-01-25 00:26:39,949] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,950] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,952] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,952] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,952] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,953] DEBUG - UpdateThread.update() : total 333, complete 64
[2010-01-25 00:26:39,953] DEBUG - UpdateThread.update() : update 131075, type class Remover
[2010-01-25 00:26:39,953] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,954] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,956] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,956] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,956] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,956] DEBUG - UpdateThread.update() : total 333, complete 65
[2010-01-25 00:26:39,957] DEBUG - UpdateThread.update() : update 163843, type class AddressBook
[2010-01-25 00:26:39,958] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,959] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,962] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,962] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,962] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,962] DEBUG - UpdateThread.update() : total 333, complete 66
[2010-01-25 00:26:39,962] DEBUG - UpdateThread.update() : update 32772, type class Address
[2010-01-25 00:26:39,968] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,970] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,971] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,971] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,971] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,971] DEBUG - UpdateThread.update() : total 333, complete 67
[2010-01-25 00:26:39,972] DEBUG - UpdateThread.update() : update 163843, type class AddressBook
[2010-01-25 00:26:39,972] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,973] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,975] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,975] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,976] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,976] DEBUG - UpdateThread.update() : total 333, complete 68
[2010-01-25 00:26:39,976] DEBUG - UpdateThread.update() : update 32772, type class Address
[2010-01-25 00:26:39,978] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,982] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,985] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,985] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,985] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,985] DEBUG - UpdateThread.update() : total 333, complete 69
[2010-01-25 00:26:39,986] DEBUG - UpdateThread.update() : update 163843, type class AddressBook
[2010-01-25 00:26:39,990] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,993] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:39,993] DEBUG - XmlSerializer.save() : timing 73 at [save]
[2010-01-25 00:26:39,993] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:39,994] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:39,994] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:39,996] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:39,996] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:39,996] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:39,996] DEBUG - UpdateThread.update() : total 333, complete 70
[2010-01-25 00:26:39,996] DEBUG - UpdateThread.update() : update 32772, type class Address
[2010-01-25 00:26:39,997] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:39,998] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,000] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,000] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,000] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,000] DEBUG - UpdateThread.update() : total 333, complete 71
[2010-01-25 00:26:40,000] DEBUG - UpdateThread.update() : update 163844, type class AddressBook
[2010-01-25 00:26:40,003] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,011] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,013] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,025] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,028] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,037] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,037] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,044] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:40,044] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,044] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,044] DEBUG - UpdateThread.update() : total 333, complete 72
[2010-01-25 00:26:40,045] DEBUG - UpdateThread.update() : update 32786, type class Address
[2010-01-25 00:26:40,046] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,047] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,048] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,050] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,050] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,053] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,053] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,053] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,053] DEBUG - UpdateThread.update() : total 333, complete 73
[2010-01-25 00:26:40,053] DEBUG - UpdateThread.update() : update 65540, type class Statistics
[2010-01-25 00:26:40,054] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,055] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,055] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,057] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,057] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,063] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,063] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,063] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,063] DEBUG - UpdateThread.update() : total 333, complete 74
[2010-01-25 00:26:40,063] DEBUG - UpdateThread.update() : update 98312, type class Favorite
[2010-01-25 00:26:40,063] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,064] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,065] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,065] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,065] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,068] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,068] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,068] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,068] DEBUG - UpdateThread.update() : total 333, complete 75
[2010-01-25 00:26:40,068] DEBUG - UpdateThread.update() : update 98313, type class Favorite
[2010-01-25 00:26:40,068] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,069] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,069] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,070] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,070] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,073] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,073] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,073] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,073] DEBUG - UpdateThread.update() : total 333, complete 76
[2010-01-25 00:26:40,073] DEBUG - UpdateThread.update() : update 131076, type class Remover
[2010-01-25 00:26:40,074] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,075] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,075] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,075] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,076] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,076] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,078] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,079] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,079] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,079] DEBUG - UpdateThread.update() : total 333, complete 77
[2010-01-25 00:26:40,079] DEBUG - UpdateThread.update() : update 163844, type class AddressBook
[2010-01-25 00:26:40,081] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,083] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,085] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,085] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,085] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,085] DEBUG - UpdateThread.update() : total 333, complete 78
[2010-01-25 00:26:40,085] DEBUG - UpdateThread.update() : update 32786, type class Address
[2010-01-25 00:26:40,086] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,087] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,089] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,089] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,089] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,089] DEBUG - UpdateThread.update() : total 333, complete 79
[2010-01-25 00:26:40,089] DEBUG - UpdateThread.update() : update 65540, type class Statistics
[2010-01-25 00:26:40,089] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,091] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,094] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,094] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,094] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,094] DEBUG - UpdateThread.update() : total 333, complete 80
[2010-01-25 00:26:40,094] DEBUG - UpdateThread.update() : update 98312, type class Favorite
[2010-01-25 00:26:40,094] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,095] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,096] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:40,097] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,097] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,097] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,097] DEBUG - UpdateThread.update() : total 333, complete 81
[2010-01-25 00:26:40,098] DEBUG - UpdateThread.update() : update 98313, type class Favorite
[2010-01-25 00:26:40,098] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,099] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,102] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,102] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,102] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,102] DEBUG - UpdateThread.update() : total 333, complete 82
[2010-01-25 00:26:40,102] DEBUG - UpdateThread.update() : update 131076, type class Remover
[2010-01-25 00:26:40,103] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,103] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,104] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,105] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,105] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,105] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,105] DEBUG - UpdateThread.update() : total 333, complete 83
[2010-01-25 00:26:40,106] DEBUG - UpdateThread.update() : update 163844, type class AddressBook
[2010-01-25 00:26:40,106] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,107] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,112] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,115] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,115] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,115] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,115] DEBUG - UpdateThread.update() : total 333, complete 84
[2010-01-25 00:26:40,118] DEBUG - UpdateThread.update() : update 65540, type class Statistics
[2010-01-25 00:26:40,118] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,122] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,123] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,123] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,123] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,123] DEBUG - UpdateThread.update() : total 333, complete 85
[2010-01-25 00:26:40,124] DEBUG - UpdateThread.update() : update 163845, type class AddressBook
[2010-01-25 00:26:40,125] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,139] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,141] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,150] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,150] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,154] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:40,154] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,154] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,154] DEBUG - UpdateThread.update() : total 333, complete 86
[2010-01-25 00:26:40,154] DEBUG - UpdateThread.update() : update 32787, type class Address
[2010-01-25 00:26:40,164] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,165] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,166] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,168] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,168] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,171] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,171] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,171] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,171] DEBUG - UpdateThread.update() : total 333, complete 87
[2010-01-25 00:26:40,175] DEBUG - UpdateThread.update() : update 65541, type class Statistics
[2010-01-25 00:26:40,176] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,177] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,177] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,178] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,178] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,180] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,181] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,181] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,181] DEBUG - UpdateThread.update() : total 333, complete 88
[2010-01-25 00:26:40,181] DEBUG - UpdateThread.update() : update 98314, type class Favorite
[2010-01-25 00:26:40,181] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,183] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,183] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,184] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,184] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,185] DEBUG - XmlSerializer.save() : timing 89 at [extract]
[2010-01-25 00:26:40,185] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:40,186] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:40,186] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,187] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,187] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,187] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,187] DEBUG - UpdateThread.update() : total 333, complete 89
[2010-01-25 00:26:40,187] DEBUG - UpdateThread.update() : update 98315, type class Favorite
[2010-01-25 00:26:40,188] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,189] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,189] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,190] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,190] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,193] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,193] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,193] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,193] DEBUG - UpdateThread.update() : total 333, complete 90
[2010-01-25 00:26:40,193] DEBUG - UpdateThread.update() : update 131077, type class Remover
[2010-01-25 00:26:40,194] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,194] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,195] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,195] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,195] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,198] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,198] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,198] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,198] DEBUG - UpdateThread.update() : total 333, complete 91
[2010-01-25 00:26:40,199] DEBUG - UpdateThread.update() : update 163845, type class AddressBook
[2010-01-25 00:26:40,199] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,200] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,202] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,202] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,202] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,203] DEBUG - UpdateThread.update() : total 333, complete 92
[2010-01-25 00:26:40,203] DEBUG - UpdateThread.update() : update 32787, type class Address
[2010-01-25 00:26:40,204] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,205] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,209] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,209] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,209] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,209] DEBUG - UpdateThread.update() : total 333, complete 93
[2010-01-25 00:26:40,209] DEBUG - UpdateThread.update() : update 65541, type class Statistics
[2010-01-25 00:26:40,210] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,211] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,212] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,212] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,213] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,213] DEBUG - UpdateThread.update() : total 333, complete 94
[2010-01-25 00:26:40,213] DEBUG - UpdateThread.update() : update 98314, type class Favorite
[2010-01-25 00:26:40,214] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,215] DEBUG - XmlCompare.next(): hit  <name>robs address book</name> vs.  <name>robs address book1</name>
[2010-01-25 00:26:40,215] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,216] DEBUG - XmlCompare.next(): hit   <street>1382 5th Ave</street> vs.   <street>1</street>
[2010-01-25 00:26:40,217] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,217] DEBUG - XmlCompare.next(): hit   <street>Apt. 2</street> vs.   <city>San Francisco</city>
[2010-01-25 00:26:40,217] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,217] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,217] DEBUG - UpdateThread.update() : total 333, complete 95
[2010-01-25 00:26:40,217] DEBUG - UpdateThread.update() : update 98315, type class Favorite
[2010-01-25 00:26:40,217] DEBUG - XmlCompare.next(): hit   <street>Bldg. 14</street> vs.   <state>CA</state>
[2010-01-25 00:26:40,218] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,218] DEBUG - XmlCompare.next(): hit   <street>Station. 12</street> vs.   <zip-code>94122</zip-code>
[2010-01-25 00:26:40,218] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <region>USA</region>
[2010-01-25 00:26:40,219] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <region>North America</region>
[2010-01-25 00:26:40,219] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.  </address>
[2010-01-25 00:26:40,220] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,220] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.  <address id="557060" type="home">
[2010-01-25 00:26:40,220] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <street>1</street>
[2010-01-25 00:26:40,221] DEBUG - XmlCompare.next(): hit  </address> vs.   <city>San Francisco</city>
[2010-01-25 00:26:40,222] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,222] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,222] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,222] DEBUG - UpdateThread.update() : total 333, complete 96
[2010-01-25 00:26:40,226] DEBUG - UpdateThread.update() : update 131077, type class Remover
[2010-01-25 00:26:40,227] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,228] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,229] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,229] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,229] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,230] DEBUG - UpdateThread.update() : total 333, complete 97
[2010-01-25 00:26:40,230] DEBUG - UpdateThread.update() : update 98314, type class Favorite
[2010-01-25 00:26:40,230] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,231] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,233] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,233] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,233] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,233] DEBUG - UpdateThread.update() : total 333, complete 98
[2010-01-25 00:26:40,233] DEBUG - UpdateThread.update() : update 163845, type class AddressBook
[2010-01-25 00:26:40,234] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,235] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,237] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,237] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,237] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,237] DEBUG - UpdateThread.update() : total 333, complete 99
[2010-01-25 00:26:40,237] DEBUG - UpdateThread.update() : update 163846, type class AddressBook
[2010-01-25 00:26:40,239] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,255] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,256] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,268] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,268] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,278] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:26:40,278] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,278] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,278] DEBUG - UpdateThread.update() : total 333, complete 100
[2010-01-25 00:26:40,278] DEBUG - UpdateThread.update() : update 32788, type class Address
[2010-01-25 00:26:40,279] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,280] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,281] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,282] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,282] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,283] DEBUG - XmlCompare.compare() : [[557060:address, 688131:address-book]]
[2010-01-25 00:26:40,283] DEBUG - XmlSerializer.save() : timing 97 at [changed]
[2010-01-25 00:26:40,284] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book1], old [robs address book]
[2010-01-25 00:26:40,288] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,289] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,289] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,289] DEBUG - UpdateThread.update() : total 333, complete 101
[2010-01-25 00:26:40,289] DEBUG - UpdateThread.update() : update 65542, type class Statistics
[2010-01-25 00:26:40,289] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,290] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1]], old [[Station. 12, Bldg. 14, Apt. 2, 1382 5th Ave]]
[2010-01-25 00:26:40,290] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,291] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,291] DEBUG - XmlSerializer().storeAll() :  save [Address], id [557060]
[2010-01-25 00:26:40,291] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,292] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,296] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,296] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,296] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,296] DEBUG - UpdateThread.update() : total 333, complete 102
[2010-01-25 00:26:40,296] DEBUG - UpdateThread.update() : update 98316, type class Favorite
[2010-01-25 00:26:40,296] DEBUG - XmlSerializer().storeAll() : old [557060, 557061, 557062, 557063, 557064, 557065, 557066, 557067, 557068, 557069, 557070, 557071, 557072, 557073]
[2010-01-25 00:26:40,296] DEBUG - XmlSerializer().storeAll() : new [557060, 557061, 557062, 557063, 557064, 557065, 557066, 557067, 557068, 557069, 557070, 557071, 557072, 557073]
[2010-01-25 00:26:40,297] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,298] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,298] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,299] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,299] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,301] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,301] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,301] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,302] DEBUG - UpdateThread.update() : total 333, complete 103
[2010-01-25 00:26:40,302] DEBUG - UpdateThread.update() : update 98317, type class Favorite
[2010-01-25 00:26:40,302] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,303] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,303] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 557060, Address : 557061, Address : 557062, Address : 557063, Address : 557064, Address : 557065, Address : 557066, Address : 557067, Address : 557068, Address : 557069, Address : 557070, Address : 557071, Address : 557072, Address : 557073]], old [[Address : 557060, Address : 557061, Address : 557062, Address : 557063, Address : 557064, Address : 557065, Address : 557066, Address : 557067, Address : 557068, Address : 557069, Address : 557070, Address : 557071, Address : 557072, Address : 557073]]
[2010-01-25 00:26:40,303] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,307] DEBUG - XmlSerializer().storeAll() : old [622598, 622599]
[2010-01-25 00:26:40,307] DEBUG - XmlSerializer().storeAll() : new [622598, 622599]
[2010-01-25 00:26:40,307] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,307] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,308] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [688131]
[2010-01-25 00:26:40,308] DEBUG - XmlSerializer.save() : timing 25 at [storeAll]
[2010-01-25 00:26:40,310] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:26:40,310] DEBUG - UpdateCache.update() : update [class AddressBook], id [688131]
[2010-01-25 00:26:40,310] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,310] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,310] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,310] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,310] DEBUG - UpdateThread.update() : total 333, complete 104
[2010-01-25 00:26:40,310] DEBUG - UpdateThread.update() : update 131078, type class Remover
[2010-01-25 00:26:40,312] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,313] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,314] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,315] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,315] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,318] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,318] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,318] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,318] DEBUG - UpdateThread.update() : total 333, complete 105
[2010-01-25 00:26:40,318] DEBUG - UpdateThread.update() : update 163846, type class AddressBook
[2010-01-25 00:26:40,319] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,320] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,322] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,322] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,322] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,322] DEBUG - UpdateThread.update() : total 333, complete 106
[2010-01-25 00:26:40,322] DEBUG - UpdateThread.update() : update 32788, type class Address
[2010-01-25 00:26:40,323] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,327] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,329] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,329] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,329] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,330] DEBUG - UpdateThread.update() : total 333, complete 107
[2010-01-25 00:26:40,330] DEBUG - UpdateThread.update() : update 65542, type class Statistics
[2010-01-25 00:26:40,330] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,333] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,335] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,335] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,335] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,335] DEBUG - UpdateThread.update() : total 333, complete 108
[2010-01-25 00:26:40,335] DEBUG - UpdateThread.update() : update 98316, type class Favorite
[2010-01-25 00:26:40,336] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,336] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,336] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,337] DEBUG - UpdateCache.update() : update [class Address], id [557060]
[2010-01-25 00:26:40,337] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,338] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,338] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,338] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,338] DEBUG - UpdateThread.update() : total 333, complete 109
[2010-01-25 00:26:40,338] DEBUG - UpdateThread.update() : update 98317, type class Favorite
[2010-01-25 00:26:40,338] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,339] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,339] DEBUG - XmlSerializer.save() : timing 29 at [cache]
[2010-01-25 00:26:40,339] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,341] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,341] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,341] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,341] DEBUG - UpdateThread.update() : total 333, complete 110
[2010-01-25 00:26:40,342] DEBUG - UpdateThread.update() : update 131078, type class Remover
[2010-01-25 00:26:40,343] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,344] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,346] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,346] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,346] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,346] DEBUG - UpdateThread.update() : total 333, complete 111
[2010-01-25 00:26:40,346] DEBUG - UpdateThread.update() : update 163846, type class AddressBook
[2010-01-25 00:26:40,347] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,348] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,350] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,350] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,350] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,350] DEBUG - UpdateThread.update() : total 333, complete 112
[2010-01-25 00:26:40,350] DEBUG - UpdateThread.update() : update 65542, type class Statistics
[2010-01-25 00:26:40,350] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,351] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,354] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,354] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,354] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,354] DEBUG - UpdateThread.update() : total 333, complete 113
[2010-01-25 00:26:40,354] DEBUG - UpdateThread.update() : update 294912, type class Levelone
[2010-01-25 00:26:40,365] DEBUG - LockItem.unlock() : 19 current
[2010-01-25 00:26:40,365] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:40,365] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,365] DEBUG - XmlSerializer.save() : timing 26 at [save]
[2010-01-25 00:26:40,365] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:40,365] DEBUG - testUpdateTiming() : timing 290 at [save1]
[2010-01-25 00:26:40,365] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,368] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:40,388] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:40,392] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,394] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,440] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,441] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:40,445] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,445] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,446] DEBUG - XmlSerializer.save() : timing 58 at [extract]
[2010-01-25 00:26:40,446] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:40,447] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:40,448] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,459] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:26:40,459] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,459] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,459] DEBUG - UpdateThread.update() : total 333, complete 114
[2010-01-25 00:26:40,459] DEBUG - UpdateThread.update() : update 262144, type class Leveltwo
[2010-01-25 00:26:40,460] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:40,464] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,464] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:40,472] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,473] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,477] DEBUG - XmlCompare.next(): hit  <name>robs address book1</name> vs.  <name>robs address book11</name>
[2010-01-25 00:26:40,479] DEBUG - XmlCompare.next(): hit   <street>1</street> vs.   <street>2</street>
[2010-01-25 00:26:40,488] DEBUG - LockItem.unlock() : 22 current
[2010-01-25 00:26:40,488] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,488] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,488] DEBUG - UpdateThread.update() : total 333, complete 115
[2010-01-25 00:26:40,488] DEBUG - UpdateThread.update() : update 229376, type class Levelthree
[2010-01-25 00:26:40,488] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <street>1</street>
[2010-01-25 00:26:40,489] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <city>San Francisco</city>
[2010-01-25 00:26:40,489] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.   <state>CA</state>
[2010-01-25 00:26:40,490] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.   <zip-code>94122</zip-code>
[2010-01-25 00:26:40,490] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <region>USA</region>
[2010-01-25 00:26:40,490] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:40,490] DEBUG - XmlCompare.next(): hit  </address> vs.   <region>North America</region>
[2010-01-25 00:26:40,491] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,491] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:40,492] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,492] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,501] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,501] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,501] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,501] DEBUG - UpdateThread.update() : total 333, complete 116
[2010-01-25 00:26:40,502] DEBUG - UpdateThread.update() : update 229377, type class Levelthree
[2010-01-25 00:26:40,502] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:40,503] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,503] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:40,505] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,505] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,508] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,508] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,508] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,508] DEBUG - UpdateThread.update() : total 333, complete 117
[2010-01-25 00:26:40,509] DEBUG - UpdateThread.update() : update 262145, type class Leveltwo
[2010-01-25 00:26:40,509] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:40,515] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,515] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:40,517] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,518] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,520] DEBUG - LockItem.unlock() : 21 current
[2010-01-25 00:26:40,520] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,520] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,520] DEBUG - UpdateThread.update() : total 333, complete 118
[2010-01-25 00:26:40,520] DEBUG - UpdateThread.update() : update 229378, type class Levelthree
[2010-01-25 00:26:40,520] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:40,522] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,523] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:40,523] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,523] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,526] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,526] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,526] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,526] DEBUG - UpdateThread.update() : total 333, complete 119
[2010-01-25 00:26:40,526] DEBUG - UpdateThread.update() : update 294912, type class Levelone
[2010-01-25 00:26:40,526] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,527] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,529] DEBUG - XmlCompare.compare() : [[557060:address, 688131:address-book]]
[2010-01-25 00:26:40,529] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,529] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,529] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,529] DEBUG - UpdateThread.update() : total 333, complete 120
[2010-01-25 00:26:40,529] DEBUG - XmlSerializer.save() : timing 82 at [changed]
[2010-01-25 00:26:40,529] DEBUG - UpdateThread.update() : update 262144, type class Leveltwo
[2010-01-25 00:26:40,530] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book11], old [robs address book1]
[2010-01-25 00:26:40,530] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,531] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,532] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,533] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,533] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,533] DEBUG - UpdateThread.update() : total 333, complete 121
[2010-01-25 00:26:40,533] DEBUG - UpdateThread.update() : update 229376, type class Levelthree
[2010-01-25 00:26:40,534] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1, 2]], old [[1]]
[2010-01-25 00:26:40,534] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,534] DEBUG - XmlSerializer().storeAll() :  save [Address], id [557060]
[2010-01-25 00:26:40,535] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,536] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,536] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,536] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,536] DEBUG - UpdateThread.update() : total 333, complete 122
[2010-01-25 00:26:40,537] DEBUG - UpdateThread.update() : update 229377, type class Levelthree
[2010-01-25 00:26:40,537] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,538] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,540] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,540] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,540] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,540] DEBUG - UpdateThread.update() : total 333, complete 123
[2010-01-25 00:26:40,540] DEBUG - XmlSerializer().storeAll() : old [557060, 557061, 557062, 557063, 557064, 557065, 557066, 557067, 557068, 557069, 557070, 557071, 557072, 557073]
[2010-01-25 00:26:40,540] DEBUG - XmlSerializer().storeAll() : new [557060, 557061, 557062, 557063, 557064, 557065, 557066, 557067, 557068, 557069, 557070, 557071, 557072, 557073]
[2010-01-25 00:26:40,540] DEBUG - UpdateThread.update() : update 262145, type class Leveltwo
[2010-01-25 00:26:40,540] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,542] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,543] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,543] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,543] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,543] DEBUG - UpdateThread.update() : total 333, complete 124
[2010-01-25 00:26:40,544] DEBUG - UpdateThread.update() : update 229378, type class Levelthree
[2010-01-25 00:26:40,545] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,546] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,548] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,548] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,548] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,548] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 557060, Address : 557061, Address : 557062, Address : 557063, Address : 557064, Address : 557065, Address : 557066, Address : 557067, Address : 557068, Address : 557069, Address : 557070, Address : 557071, Address : 557072, Address : 557073]], old [[Address : 557060, Address : 557061, Address : 557062, Address : 557063, Address : 557064, Address : 557065, Address : 557066, Address : 557067, Address : 557068, Address : 557069, Address : 557070, Address : 557071, Address : 557072, Address : 557073]]
[2010-01-25 00:26:40,548] DEBUG - UpdateThread.update() : total 333, complete 125
[2010-01-25 00:26:40,548] DEBUG - UpdateThread.update() : update 229376, type class Levelthree
[2010-01-25 00:26:40,550] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,551] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,551] DEBUG - XmlSerializer().storeAll() : old [622598, 622599]
[2010-01-25 00:26:40,551] DEBUG - XmlSerializer().storeAll() : new [622598, 622599]
[2010-01-25 00:26:40,552] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [688131]
[2010-01-25 00:26:40,552] DEBUG - XmlSerializer.save() : timing 23 at [storeAll]
[2010-01-25 00:26:40,552] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,552] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,552] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,552] DEBUG - UpdateThread.update() : total 333, complete 126
[2010-01-25 00:26:40,553] DEBUG - UpdateThread.update() : update 294912, type class Levelone
[2010-01-25 00:26:40,553] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,554] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,559] DEBUG - XmlSerializer.save() : timing 7 at [findupdate]
[2010-01-25 00:26:40,559] DEBUG - UpdateCache.update() : update [class AddressBook], id [688131]
[2010-01-25 00:26:40,559] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,559] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,559] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,559] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,559] DEBUG - UpdateThread.update() : total 333, complete 127
[2010-01-25 00:26:40,559] DEBUG - UpdateThread.update() : update 262144, type class Leveltwo
[2010-01-25 00:26:40,560] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,561] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,567] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,567] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,567] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,567] DEBUG - UpdateThread.update() : total 333, complete 128
[2010-01-25 00:26:40,567] DEBUG - UpdateThread.update() : update 163847, type class AddressBook
[2010-01-25 00:26:40,569] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,576] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,576] DEBUG - UpdateCache.update() : update [class Address], id [557060]
[2010-01-25 00:26:40,576] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,578] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,578] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-25 00:26:40,590] DEBUG - LockItem.unlock() : 19 current
[2010-01-25 00:26:40,590] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:40,590] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,590] DEBUG - XmlSerializer.save() : timing 12 at [save]
[2010-01-25 00:26:40,590] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:40,590] DEBUG - testUpdateTiming() : timing 225 at [save2]
[2010-01-25 00:26:40,590] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,590] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,591] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,599] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,599] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,604] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:40,604] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,604] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,604] DEBUG - UpdateThread.update() : total 333, complete 129
[2010-01-25 00:26:40,604] DEBUG - UpdateThread.update() : update 32789, type class Address
[2010-01-25 00:26:40,605] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,606] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,607] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,608] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,608] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,615] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,615] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,615] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,615] DEBUG - UpdateThread.update() : total 333, complete 130
[2010-01-25 00:26:40,615] DEBUG - UpdateThread.update() : update 65543, type class Statistics
[2010-01-25 00:26:40,615] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:40,615] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,616] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,618] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,619] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,619] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,619] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,621] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,621] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,621] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,621] DEBUG - UpdateThread.update() : total 333, complete 131
[2010-01-25 00:26:40,622] DEBUG - UpdateThread.update() : update 98318, type class Favorite
[2010-01-25 00:26:40,622] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,623] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,623] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,624] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,624] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,627] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,628] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,629] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,629] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,629] DEBUG - UpdateThread.update() : total 333, complete 132
[2010-01-25 00:26:40,629] DEBUG - UpdateThread.update() : update 98319, type class Favorite
[2010-01-25 00:26:40,629] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,630] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,630] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,631] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,631] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,633] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,633] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,633] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,633] DEBUG - UpdateThread.update() : total 333, complete 133
[2010-01-25 00:26:40,633] DEBUG - UpdateThread.update() : update 131079, type class Remover
[2010-01-25 00:26:40,634] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,635] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,635] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,636] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,636] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,662] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,665] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,665] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,665] DEBUG - UpdateThread.update() : total 333, complete 134
[2010-01-25 00:26:40,666] DEBUG - UpdateThread.update() : update 163847, type class AddressBook
[2010-01-25 00:26:40,667] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,667] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,669] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,669] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,669] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,669] DEBUG - UpdateThread.update() : total 333, complete 135
[2010-01-25 00:26:40,670] DEBUG - UpdateThread.update() : update 32789, type class Address
[2010-01-25 00:26:40,670] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,672] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,673] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,674] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,674] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,674] DEBUG - UpdateThread.update() : total 333, complete 136
[2010-01-25 00:26:40,674] DEBUG - UpdateThread.update() : update 65543, type class Statistics
[2010-01-25 00:26:40,674] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,675] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,677] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,677] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,677] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,677] DEBUG - UpdateThread.update() : total 333, complete 137
[2010-01-25 00:26:40,677] DEBUG - UpdateThread.update() : update 98318, type class Favorite
[2010-01-25 00:26:40,677] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,678] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,680] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,680] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,680] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,680] DEBUG - UpdateThread.update() : total 333, complete 138
[2010-01-25 00:26:40,680] DEBUG - UpdateThread.update() : update 98319, type class Favorite
[2010-01-25 00:26:40,680] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,681] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,683] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,683] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,683] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,683] DEBUG - UpdateThread.update() : total 333, complete 139
[2010-01-25 00:26:40,684] DEBUG - UpdateThread.update() : update 131079, type class Remover
[2010-01-25 00:26:40,684] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,685] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,687] DEBUG - XmlSerializer.save() : timing 72 at [extract]
[2010-01-25 00:26:40,687] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:40,688] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,688] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,688] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,688] DEBUG - UpdateThread.update() : total 333, complete 140
[2010-01-25 00:26:40,688] DEBUG - UpdateThread.update() : update 163848, type class AddressBook
[2010-01-25 00:26:40,688] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:40,689] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,689] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,708] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,710] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,715] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,715] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,718] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:26:40,718] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,718] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,718] DEBUG - UpdateThread.update() : total 333, complete 141
[2010-01-25 00:26:40,719] DEBUG - UpdateThread.update() : update 32790, type class Address
[2010-01-25 00:26:40,722] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,723] DEBUG - XmlCompare.next(): hit  <name>robs address book11</name> vs.  <name>robs address book111</name>
[2010-01-25 00:26:40,724] DEBUG - XmlCompare.next(): hit   <street>2</street> vs.   <street>3</street>
[2010-01-25 00:26:40,724] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,724] DEBUG - XmlCompare.next(): hit   <street>1</street> vs.   <street>2</street>
[2010-01-25 00:26:40,724] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <street>1</street>
[2010-01-25 00:26:40,725] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <city>San Francisco</city>
[2010-01-25 00:26:40,725] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.   <state>CA</state>
[2010-01-25 00:26:40,725] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,725] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.   <zip-code>94122</zip-code>
[2010-01-25 00:26:40,725] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <region>USA</region>
[2010-01-25 00:26:40,725] DEBUG - XmlCompare.next(): hit  </address> vs.   <region>North America</region>
[2010-01-25 00:26:40,726] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,726] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,729] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,729] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,729] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,729] DEBUG - UpdateThread.update() : total 333, complete 142
[2010-01-25 00:26:40,729] DEBUG - UpdateThread.update() : update 65543, type class Statistics
[2010-01-25 00:26:40,730] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,731] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,733] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,733] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,733] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,733] DEBUG - UpdateThread.update() : total 333, complete 143
[2010-01-25 00:26:40,733] DEBUG - UpdateThread.update() : update 98320, type class Favorite
[2010-01-25 00:26:40,734] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,734] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,735] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,736] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,736] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,738] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,738] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,738] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,739] DEBUG - UpdateThread.update() : total 333, complete 144
[2010-01-25 00:26:40,739] DEBUG - UpdateThread.update() : update 98321, type class Favorite
[2010-01-25 00:26:40,739] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,740] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,741] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,742] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,742] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,745] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,745] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,745] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,745] DEBUG - UpdateThread.update() : total 333, complete 145
[2010-01-25 00:26:40,746] DEBUG - UpdateThread.update() : update 131080, type class Remover
[2010-01-25 00:26:40,746] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,747] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,747] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,748] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,748] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,753] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,753] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,753] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,753] DEBUG - UpdateThread.update() : total 333, complete 146
[2010-01-25 00:26:40,753] DEBUG - UpdateThread.update() : update 163848, type class AddressBook
[2010-01-25 00:26:40,754] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,755] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,757] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,757] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,757] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,757] DEBUG - UpdateThread.update() : total 333, complete 147
[2010-01-25 00:26:40,757] DEBUG - UpdateThread.update() : update 32790, type class Address
[2010-01-25 00:26:40,758] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,760] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,762] DEBUG - XmlCompare.compare() : [[557060:address, 688131:address-book]]
[2010-01-25 00:26:40,762] DEBUG - XmlSerializer.save() : timing 74 at [changed]
[2010-01-25 00:26:40,763] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book111], old [robs address book11]
[2010-01-25 00:26:40,763] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,763] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,763] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,763] DEBUG - UpdateThread.update() : total 333, complete 148
[2010-01-25 00:26:40,763] DEBUG - UpdateThread.update() : update 98320, type class Favorite
[2010-01-25 00:26:40,763] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,764] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,766] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1, 2, 3]], old [[1, 2]]
[2010-01-25 00:26:40,767] DEBUG - XmlSerializer().storeAll() :  save [Address], id [557060]
[2010-01-25 00:26:40,767] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,767] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,767] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,767] DEBUG - UpdateThread.update() : total 333, complete 149
[2010-01-25 00:26:40,767] DEBUG - UpdateThread.update() : update 98321, type class Favorite
[2010-01-25 00:26:40,767] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,768] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,770] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,770] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,770] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,770] DEBUG - UpdateThread.update() : total 333, complete 150
[2010-01-25 00:26:40,770] DEBUG - UpdateThread.update() : update 131080, type class Remover
[2010-01-25 00:26:40,771] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,772] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,772] DEBUG - XmlSerializer().storeAll() : old [557060, 557061, 557062, 557063, 557064, 557065, 557066, 557067, 557068, 557069, 557070, 557071, 557072, 557073]
[2010-01-25 00:26:40,772] DEBUG - XmlSerializer().storeAll() : new [557060, 557061, 557062, 557063, 557064, 557065, 557066, 557067, 557068, 557069, 557070, 557071, 557072, 557073]
[2010-01-25 00:26:40,774] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,774] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,774] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,774] DEBUG - UpdateThread.update() : total 333, complete 151
[2010-01-25 00:26:40,774] DEBUG - UpdateThread.update() : update 163849, type class AddressBook
[2010-01-25 00:26:40,776] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,777] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 557060, Address : 557061, Address : 557062, Address : 557063, Address : 557064, Address : 557065, Address : 557066, Address : 557067, Address : 557068, Address : 557069, Address : 557070, Address : 557071, Address : 557072, Address : 557073]], old [[Address : 557060, Address : 557061, Address : 557062, Address : 557063, Address : 557064, Address : 557065, Address : 557066, Address : 557067, Address : 557068, Address : 557069, Address : 557070, Address : 557071, Address : 557072, Address : 557073]]
[2010-01-25 00:26:40,779] DEBUG - XmlSerializer().storeAll() : old [622598, 622599]
[2010-01-25 00:26:40,779] DEBUG - XmlSerializer().storeAll() : new [622598, 622599]
[2010-01-25 00:26:40,780] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [688131]
[2010-01-25 00:26:40,781] DEBUG - XmlSerializer.save() : timing 19 at [storeAll]
[2010-01-25 00:26:40,783] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:26:40,783] DEBUG - UpdateCache.update() : update [class AddressBook], id [688131]
[2010-01-25 00:26:40,783] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,791] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,792] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,800] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,800] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,801] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,801] DEBUG - UpdateCache.update() : update [class Address], id [557060]
[2010-01-25 00:26:40,801] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,803] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,803] DEBUG - XmlSerializer.save() : timing 20 at [cache]
[2010-01-25 00:26:40,804] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:26:40,804] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,804] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:26:40,804] DEBUG - UpdateThread.update() : total 333, complete 152
[2010-01-25 00:26:40,805] DEBUG - UpdateThread.update() : update 32791, type class Address
[2010-01-25 00:26:40,805] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,807] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,807] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,809] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,809] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,810] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:26:40,810] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:40,810] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:40,810] DEBUG - XmlSerializer.save() : timing 7 at [save]
[2010-01-25 00:26:40,810] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:40,810] DEBUG - testUpdateTiming() : timing 220 at [save3]
[2010-01-25 00:26:40,812] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:40,812] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,813] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,813] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,813] DEBUG - UpdateThread.update() : total 333, complete 153
[2010-01-25 00:26:40,813] DEBUG - UpdateThread.update() : update 65544, type class Statistics
[2010-01-25 00:26:40,813] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,814] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,814] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,815] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,815] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,822] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,822] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,822] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,822] DEBUG - UpdateThread.update() : total 333, complete 154
[2010-01-25 00:26:40,822] DEBUG - UpdateThread.update() : update 98322, type class Favorite
[2010-01-25 00:26:40,822] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,823] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,825] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,825] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,825] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,826] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,826] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,830] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,830] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,830] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,830] DEBUG - UpdateThread.update() : total 333, complete 155
[2010-01-25 00:26:40,830] DEBUG - UpdateThread.update() : update 98323, type class Favorite
[2010-01-25 00:26:40,830] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,831] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,832] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,838] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,839] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,845] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,845] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,845] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,845] DEBUG - UpdateThread.update() : total 333, complete 156
[2010-01-25 00:26:40,845] DEBUG - UpdateThread.update() : update 131081, type class Remover
[2010-01-25 00:26:40,846] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,847] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,847] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,848] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:26:40,848] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:26:40,850] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,850] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,850] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,850] DEBUG - UpdateThread.update() : total 333, complete 157
[2010-01-25 00:26:40,851] DEBUG - UpdateThread.update() : update 163849, type class AddressBook
[2010-01-25 00:26:40,852] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,853] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,855] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,855] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,855] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,855] DEBUG - UpdateThread.update() : total 333, complete 158
[2010-01-25 00:26:40,855] DEBUG - UpdateThread.update() : update 32791, type class Address
[2010-01-25 00:26:40,856] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,857] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,859] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,859] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,859] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,859] DEBUG - UpdateThread.update() : total 333, complete 159
[2010-01-25 00:26:40,859] DEBUG - UpdateThread.update() : update 65544, type class Statistics
[2010-01-25 00:26:40,859] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,860] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,862] DEBUG - XmlSerializer.save() : timing 51 at [extract]
[2010-01-25 00:26:40,862] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:40,862] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:40,862] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,862] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,862] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,862] DEBUG - UpdateThread.update() : total 333, complete 160
[2010-01-25 00:26:40,862] DEBUG - UpdateThread.update() : update 98322, type class Favorite
[2010-01-25 00:26:40,863] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:40,863] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,863] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:40,863] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:40,864] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,864] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:40,864] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:40,865] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:40,865] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:40,865] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:40,865] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:40,865] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,865] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,865] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,865] DEBUG - UpdateThread.update() : total 333, complete 161
[2010-01-25 00:26:40,865] DEBUG - UpdateThread.update() : update 98323, type class Favorite
[2010-01-25 00:26:40,866] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:40,866] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,866] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:26:40,867] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,867] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:40,867] DEBUG - UpdateCache.update() : update [class AddressBook], id [688132]
[2010-01-25 00:26:40,867] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,868] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,868] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,868] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,868] DEBUG - UpdateThread.update() : total 333, complete 162
[2010-01-25 00:26:40,868] DEBUG - UpdateThread.update() : update 131081, type class Remover
[2010-01-25 00:26:40,869] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:40,870] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,871] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,871] DEBUG - UpdateCache.update() : update [class Address], id [557074]
[2010-01-25 00:26:40,871] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,872] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,873] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,873] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,873] DEBUG - UpdateThread.update() : total 333, complete 163
[2010-01-25 00:26:40,873] DEBUG - UpdateThread.update() : update 163850, type class AddressBook
[2010-01-25 00:26:40,873] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,873] DEBUG - UpdateCache.update() : update [class Statistics], id [589828]
[2010-01-25 00:26:40,873] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,874] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,874] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,874] DEBUG - UpdateCache.update() : update [class Favorite], id [622600]
[2010-01-25 00:26:40,874] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,875] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,875] DEBUG - UpdateCache.update() : update [class Favorite], id [622601]
[2010-01-25 00:26:40,876] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,877] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,877] DEBUG - UpdateCache.update() : update [class Remover], id [655364]
[2010-01-25 00:26:40,877] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,878] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,878] DEBUG - UpdateCache.update() : update [class AddressBook], id [688132]
[2010-01-25 00:26:40,878] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,882] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,882] DEBUG - UpdateCache.update() : update [class Address], id [557074]
[2010-01-25 00:26:40,882] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,883] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,883] DEBUG - UpdateCache.update() : update [class Statistics], id [589828]
[2010-01-25 00:26:40,883] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,884] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,884] DEBUG - UpdateCache.update() : update [class Favorite], id [622600]
[2010-01-25 00:26:40,884] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,885] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,885] DEBUG - UpdateCache.update() : update [class Favorite], id [622601]
[2010-01-25 00:26:40,885] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,887] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,887] DEBUG - UpdateCache.update() : update [class Remover], id [655364]
[2010-01-25 00:26:40,887] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,887] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,888] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:40,888] DEBUG - XmlSerializer.save() : timing 21 at [cache]
[2010-01-25 00:26:40,888] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,899] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:26:40,899] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:26:40,912] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:40,912] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,912] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,912] DEBUG - UpdateThread.update() : total 333, complete 164
[2010-01-25 00:26:40,912] DEBUG - UpdateThread.update() : update 32792, type class Address
[2010-01-25 00:26:40,913] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,916] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,920] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:40,922] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:26:40,922] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:26:40,922] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,922] DEBUG - XmlSerializer.save() : timing 34 at [save]
[2010-01-25 00:26:40,922] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:40,923] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:40,933] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,935] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,935] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,935] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,935] DEBUG - UpdateThread.update() : total 333, complete 165
[2010-01-25 00:26:40,935] DEBUG - UpdateThread.update() : update 65545, type class Statistics
[2010-01-25 00:26:40,935] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,936] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,936] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,937] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:40,937] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:26:40,937] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:26:40,940] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,940] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,940] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,940] DEBUG - UpdateThread.update() : total 333, complete 166
[2010-01-25 00:26:40,940] DEBUG - UpdateThread.update() : update 98324, type class Favorite
[2010-01-25 00:26:40,940] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,941] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,942] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,943] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:26:40,943] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:26:40,948] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,948] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,948] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,948] DEBUG - UpdateThread.update() : total 333, complete 167
[2010-01-25 00:26:40,948] DEBUG - UpdateThread.update() : update 98325, type class Favorite
[2010-01-25 00:26:40,948] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,949] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,950] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:40,950] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:26:40,950] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:26:40,952] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,952] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,953] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,953] DEBUG - UpdateThread.update() : total 333, complete 168
[2010-01-25 00:26:40,953] DEBUG - UpdateThread.update() : update 131082, type class Remover
[2010-01-25 00:26:40,954] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,954] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:40,955] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:40,955] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:26:40,955] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:26:40,957] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:40,957] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:40,958] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:40,958] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:40,958] DEBUG - UpdateThread.update() : total 333, complete 169
[2010-01-25 00:26:40,958] DEBUG - UpdateThread.update() : update 458752, type class MixedKids
[2010-01-25 00:26:40,961] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:40,965] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:40,983] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,004] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:41,024] DEBUG - XmlSerializer.save() : timing 63 at [extract]
[2010-01-25 00:26:41,024] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:41,025] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:41,025] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,035] DEBUG - XmlCompare.next(): hit  <statistics accessed="100" size="100" id="589828"> vs.  <statistics accessed="200" size="100" id="589828">
[2010-01-25 00:26:41,046] DEBUG - XmlCompare.compare() : [[589828:statistics, 688132:address-book]]
[2010-01-25 00:26:41,046] DEBUG - XmlSerializer.save() : timing 21 at [changed]
[2010-01-25 00:26:41,048] DEBUG - XmlSerializer().storeAll() : old [557074]
[2010-01-25 00:26:41,048] DEBUG - XmlSerializer().storeAll() : new [557074]
[2010-01-25 00:26:41,049] DEBUG - XmlSerializer().storeAll() : update timestamp on class Statistics for field accessed. New Val [200], old [100]
[2010-01-25 00:26:41,051] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [589828]
[2010-01-25 00:26:41,053] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field statistics. New Val [Statistics : 589828], old [Statistics : 589828]
[2010-01-25 00:26:41,054] DEBUG - XmlSerializer().storeAll() : old [622600, 622601]
[2010-01-25 00:26:41,054] DEBUG - XmlSerializer().storeAll() : new [622600, 622601]
[2010-01-25 00:26:41,055] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [688132]
[2010-01-25 00:26:41,055] DEBUG - XmlSerializer.save() : timing 9 at [storeAll]
[2010-01-25 00:26:41,056] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:41,056] DEBUG - UpdateCache.update() : update [class AddressBook], id [688132]
[2010-01-25 00:26:41,056] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,061] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,061] DEBUG - UpdateCache.update() : update [class Statistics], id [589828]
[2010-01-25 00:26:41,061] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,062] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,062] DEBUG - XmlSerializer.save() : timing 6 at [cache]
[2010-01-25 00:26:41,084] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:41,084] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:41,084] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,084] DEBUG - XmlSerializer.save() : timing 22 at [save]
[2010-01-25 00:26:41,084] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:41,084] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:26:41,084] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:26:41,094] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-25 00:26:41,099] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,102] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,104] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,116] DEBUG - XmlSerializer.save() : timing 18 at [extract]
[2010-01-25 00:26:41,116] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:41,116] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:41,117] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:41,118] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,118] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:41,118] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:41,119] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:41,119] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:41,119] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,119] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:41,119] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:41,120] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:41,120] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:26:41,121] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:41,121] DEBUG - UpdateCache.update() : update [class AddressBook], id [688133]
[2010-01-25 00:26:41,121] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,125] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,125] DEBUG - UpdateCache.update() : update [class Address], id [557075]
[2010-01-25 00:26:41,125] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,132] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,132] DEBUG - UpdateCache.update() : update [class Statistics], id [589829]
[2010-01-25 00:26:41,132] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,133] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,133] DEBUG - UpdateCache.update() : update [class Favorite], id [622602]
[2010-01-25 00:26:41,134] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,134] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,134] DEBUG - UpdateCache.update() : update [class Favorite], id [622603]
[2010-01-25 00:26:41,134] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,135] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,135] DEBUG - UpdateCache.update() : update [class Remover], id [655365]
[2010-01-25 00:26:41,135] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,136] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,136] DEBUG - UpdateCache.update() : update [class AddressBook], id [688133]
[2010-01-25 00:26:41,136] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,141] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,141] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,141] DEBUG - UpdateCache.update() : update [class Address], id [557075]
[2010-01-25 00:26:41,141] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,143] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:41,143] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,143] DEBUG - UpdateCache.update() : update [class Statistics], id [589829]
[2010-01-25 00:26:41,143] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,145] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,145] DEBUG - UpdateCache.update() : update [class Favorite], id [622602]
[2010-01-25 00:26:41,145] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,146] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,146] DEBUG - UpdateCache.update() : update [class Favorite], id [622603]
[2010-01-25 00:26:41,146] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,147] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,147] DEBUG - UpdateCache.update() : update [class Remover], id [655365]
[2010-01-25 00:26:41,147] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,148] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,148] DEBUG - XmlSerializer.save() : timing 27 at [cache]
[2010-01-25 00:26:41,151] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,151] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,166] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:41,166] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,166] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,166] DEBUG - UpdateThread.update() : total 333, complete 170
[2010-01-25 00:26:41,167] DEBUG - UpdateThread.update() : update 425984, type class Interleave
[2010-01-25 00:26:41,168] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:41,168] DEBUG - XmlSerializer.save() : timing 20 at [save]
[2010-01-25 00:26:41,168] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:41,168] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,169] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:26:41,171] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,171] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:26:41,172] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,172] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,175] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,176] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,185] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,185] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,185] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,185] DEBUG - UpdateThread.update() : total 333, complete 171
[2010-01-25 00:26:41,185] DEBUG - UpdateThread.update() : update 327680, type class KidOne
[2010-01-25 00:26:41,185] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,186] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,187] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,187] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,187] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,194] DEBUG - XmlSerializer.sqlLoad() : query [query.fav.by.id]
[2010-01-25 00:26:41,194] DEBUG - XmlSerializer.sqlLoad() : sql [from Favorite where id = ?]
[2010-01-25 00:26:41,198] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,198] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,198] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,198] DEBUG - UpdateThread.update() : total 333, complete 172
[2010-01-25 00:26:41,201] DEBUG - UpdateThread.update() : update 327681, type class KidOne
[2010-01-25 00:26:41,201] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,203] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,203] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,204] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,204] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,206] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,207] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,207] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,207] DEBUG - UpdateThread.update() : total 333, complete 173
[2010-01-25 00:26:41,207] DEBUG - UpdateThread.update() : update 327682, type class KidOne
[2010-01-25 00:26:41,207] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,208] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,208] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,209] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,209] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,210] DEBUG - XmlSerializer.sqlLoad() : timing 8 at [query]
[2010-01-25 00:26:41,210] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,211] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,211] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,211] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,211] DEBUG - UpdateThread.update() : total 333, complete 174
[2010-01-25 00:26:41,211] DEBUG - UpdateThread.update() : update 360448, type class KidTwo
[2010-01-25 00:26:41,211] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,211] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:41,212] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,213] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:41,214] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,214] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,220] DEBUG - XmlSerializer.save() : timing 9 at [extract]
[2010-01-25 00:26:41,220] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:41,221] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:41,221] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,222] DEBUG - XmlCompare.next(): hit  <name>gary</name> vs.  <name>ice cream!</name>
[2010-01-25 00:26:41,223] DEBUG - XmlCompare.compare() : [[622602:favorite]]
[2010-01-25 00:26:41,223] DEBUG - XmlSerializer.save() : timing 2 at [changed]
[2010-01-25 00:26:41,223] DEBUG - XmlSerializer().storeAll() : update timestamp on class Favorite for field name. New Val [ice cream!], old [gary]
[2010-01-25 00:26:41,224] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [622602]
[2010-01-25 00:26:41,224] DEBUG - XmlSerializer.save() : timing 1 at [storeAll]
[2010-01-25 00:26:41,224] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,224] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,224] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,224] DEBUG - UpdateThread.update() : total 333, complete 175
[2010-01-25 00:26:41,224] DEBUG - UpdateThread.update() : update 393216, type class KidThree
[2010-01-25 00:26:41,224] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:41,225] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:26:41,226] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,226] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:26:41,227] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,227] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,234] DEBUG - UpdateCache.updateCache() : process [select parent from AddressBook parent join parent.favorite as favorite where favorite.id = 622602]
[2010-01-25 00:26:41,237] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,237] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,237] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,237] DEBUG - UpdateThread.update() : total 333, complete 176
[2010-01-25 00:26:41,237] DEBUG - UpdateThread.update() : update 458752, type class MixedKids
[2010-01-25 00:26:41,238] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,244] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,246] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,246] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,246] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,246] DEBUG - UpdateThread.update() : total 333, complete 177
[2010-01-25 00:26:41,246] DEBUG - UpdateThread.update() : update 327680, type class KidOne
[2010-01-25 00:26:41,247] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,247] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,249] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,249] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,249] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,249] DEBUG - UpdateThread.update() : total 333, complete 178
[2010-01-25 00:26:41,249] DEBUG - UpdateThread.update() : update 327681, type class KidOne
[2010-01-25 00:26:41,250] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,251] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,252] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,252] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,252] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,252] DEBUG - UpdateThread.update() : total 333, complete 179
[2010-01-25 00:26:41,252] DEBUG - UpdateThread.update() : update 327682, type class KidOne
[2010-01-25 00:26:41,253] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,255] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,257] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,257] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,257] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,257] DEBUG - UpdateThread.update() : total 333, complete 180
[2010-01-25 00:26:41,257] DEBUG - UpdateThread.update() : update 360448, type class KidTwo
[2010-01-25 00:26:41,257] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,258] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,279] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,279] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,279] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,279] DEBUG - UpdateThread.update() : total 333, complete 181
[2010-01-25 00:26:41,279] DEBUG - UpdateThread.update() : update 393216, type class KidThree
[2010-01-25 00:26:41,279] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,280] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,283] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,283] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,283] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,283] DEBUG - UpdateThread.update() : total 333, complete 182
[2010-01-25 00:26:41,283] DEBUG - UpdateThread.update() : update 458753, type class MixedKids
[2010-01-25 00:26:41,284] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:41,288] DEBUG - UpdateCache.update() : update [class Favorite], id [622602]
[2010-01-25 00:26:41,288] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,291] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,291] DEBUG - UpdateCache.update() : update [class AddressBook], id [688133]
[2010-01-25 00:26:41,291] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,300] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,301] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:41,302] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,302] DEBUG - XmlSerializer.save() : timing 78 at [cache]
[2010-01-25 00:26:41,305] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:41,305] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:41,305] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:41,305] DEBUG - XmlSerializer.save() : timing 3 at [save]
[2010-01-25 00:26:41,305] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:41,305] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:26:41,305] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:26:41,310] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-25 00:26:41,311] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,311] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,320] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,322] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:41,322] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,322] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,322] DEBUG - UpdateThread.update() : total 333, complete 183
[2010-01-25 00:26:41,322] DEBUG - UpdateThread.update() : update 425985, type class Interleave
[2010-01-25 00:26:41,323] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:26:41,324] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,324] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:26:41,325] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,326] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,328] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,329] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,329] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,329] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,329] DEBUG - UpdateThread.update() : total 333, complete 184
[2010-01-25 00:26:41,329] DEBUG - UpdateThread.update() : update 327683, type class KidOne
[2010-01-25 00:26:41,331] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,331] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,332] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,333] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,333] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,333] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,335] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,335] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,335] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,335] DEBUG - UpdateThread.update() : total 333, complete 185
[2010-01-25 00:26:41,336] DEBUG - UpdateThread.update() : update 327684, type class KidOne
[2010-01-25 00:26:41,336] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,337] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,337] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,338] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,338] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,340] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,340] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,340] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,340] DEBUG - UpdateThread.update() : total 333, complete 186
[2010-01-25 00:26:41,340] DEBUG - UpdateThread.update() : update 327685, type class KidOne
[2010-01-25 00:26:41,341] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,342] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,342] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,343] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,343] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,345] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,345] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,345] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,345] DEBUG - UpdateThread.update() : total 333, complete 187
[2010-01-25 00:26:41,346] DEBUG - UpdateThread.update() : update 360449, type class KidTwo
[2010-01-25 00:26:41,346] DEBUG - XmlSerializer.save() : timing 26 at [extract]
[2010-01-25 00:26:41,346] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:41,346] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:41,346] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:41,347] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,347] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:41,347] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,347] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:41,348] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:41,348] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:41,348] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:41,349] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:41,349] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,349] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,349] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,349] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:41,349] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:41,349] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:41,350] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:26:41,351] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:41,351] DEBUG - UpdateCache.update() : update [class AddressBook], id [688134]
[2010-01-25 00:26:41,351] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,353] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,353] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,353] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,353] DEBUG - UpdateThread.update() : total 333, complete 188
[2010-01-25 00:26:41,353] DEBUG - UpdateThread.update() : update 393217, type class KidThree
[2010-01-25 00:26:41,353] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:26:41,358] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,359] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:26:41,360] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:26:41,360] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:26:41,362] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,362] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,362] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,362] DEBUG - UpdateThread.update() : total 333, complete 189
[2010-01-25 00:26:41,362] DEBUG - UpdateThread.update() : update 163851, type class AddressBook
[2010-01-25 00:26:41,362] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,362] DEBUG - UpdateCache.update() : update [class Address], id [557076]
[2010-01-25 00:26:41,362] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,363] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,364] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,364] DEBUG - UpdateCache.update() : update [class Statistics], id [589830]
[2010-01-25 00:26:41,364] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,365] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,365] DEBUG - UpdateCache.update() : update [class Favorite], id [622604]
[2010-01-25 00:26:41,365] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,366] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,366] DEBUG - UpdateCache.update() : update [class Favorite], id [622605]
[2010-01-25 00:26:41,366] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,367] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,367] DEBUG - UpdateCache.update() : update [class Remover], id [655366]
[2010-01-25 00:26:41,367] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,368] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,368] DEBUG - UpdateCache.update() : update [class AddressBook], id [688134]
[2010-01-25 00:26:41,368] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,372] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,372] DEBUG - UpdateCache.update() : update [class Address], id [557076]
[2010-01-25 00:26:41,372] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,374] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,374] DEBUG - UpdateCache.update() : update [class Statistics], id [589830]
[2010-01-25 00:26:41,374] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,374] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,375] DEBUG - UpdateCache.update() : update [class Favorite], id [622604]
[2010-01-25 00:26:41,375] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,375] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,375] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,376] DEBUG - UpdateCache.update() : update [class Favorite], id [622605]
[2010-01-25 00:26:41,376] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,376] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,376] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,376] DEBUG - UpdateCache.update() : update [class Remover], id [655366]
[2010-01-25 00:26:41,376] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,377] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,377] DEBUG - XmlSerializer.save() : timing 26 at [cache]
[2010-01-25 00:26:41,382] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,382] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,387] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:41,387] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,387] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,387] DEBUG - UpdateThread.update() : total 333, complete 190
[2010-01-25 00:26:41,387] DEBUG - UpdateThread.update() : update 32793, type class Address
[2010-01-25 00:26:41,388] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,390] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,390] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,392] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,392] DEBUG - XmlSerializer.save() : timing 15 at [save]
[2010-01-25 00:26:41,392] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:41,392] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,392] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,392] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,395] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,395] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,395] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,395] DEBUG - UpdateThread.update() : total 333, complete 191
[2010-01-25 00:26:41,395] DEBUG - UpdateThread.update() : update 65546, type class Statistics
[2010-01-25 00:26:41,396] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,396] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,397] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,397] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,397] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,398] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,398] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,400] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,400] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,400] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,400] DEBUG - UpdateThread.update() : total 333, complete 192
[2010-01-25 00:26:41,400] DEBUG - UpdateThread.update() : update 98326, type class Favorite
[2010-01-25 00:26:41,401] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,402] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,402] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,403] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,403] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,414] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,421] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,422] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,423] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,423] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,423] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,423] DEBUG - UpdateThread.update() : total 333, complete 193
[2010-01-25 00:26:41,424] DEBUG - UpdateThread.update() : update 98327, type class Favorite
[2010-01-25 00:26:41,425] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,426] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,426] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,427] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,427] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,429] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,429] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,429] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,429] DEBUG - UpdateThread.update() : total 333, complete 194
[2010-01-25 00:26:41,429] DEBUG - UpdateThread.update() : update 131083, type class Remover
[2010-01-25 00:26:41,429] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,430] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,430] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,431] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,431] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,433] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,433] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,433] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,433] DEBUG - UpdateThread.update() : total 333, complete 195
[2010-01-25 00:26:41,433] DEBUG - UpdateThread.update() : update 163851, type class AddressBook
[2010-01-25 00:26:41,434] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,435] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,437] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,437] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,437] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,437] DEBUG - UpdateThread.update() : total 333, complete 196
[2010-01-25 00:26:41,437] DEBUG - UpdateThread.update() : update 32793, type class Address
[2010-01-25 00:26:41,438] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,439] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,440] DEBUG - XmlSerializer.save() : timing 26 at [extract]
[2010-01-25 00:26:41,440] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:41,441] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:41,441] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,441] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:41,441] DEBUG - UpdateThread.update() : total 333, complete 197
[2010-01-25 00:26:41,441] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:41,441] DEBUG - UpdateThread.update() : update 65546, type class Statistics
[2010-01-25 00:26:41,441] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,441] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,442] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,443] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:41,443] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,443] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:41,443] DEBUG - UpdateThread.update() : total 333, complete 198
[2010-01-25 00:26:41,444] DEBUG - UpdateThread.update() : update 98326, type class Favorite
[2010-01-25 00:26:41,444] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,445] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,447] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:41,447] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,447] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:41,447] DEBUG - UpdateThread.update() : total 333, complete 199
[2010-01-25 00:26:41,448] DEBUG - UpdateThread.update() : update 98327, type class Favorite
[2010-01-25 00:26:41,448] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,449] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,451] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:41,451] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,451] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:41,451] DEBUG - UpdateThread.update() : total 333, complete 200
[2010-01-25 00:26:41,451] DEBUG - UpdateThread.update() : update 131083, type class Remover
[2010-01-25 00:26:41,451] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,452] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,460] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:41,460] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,460] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:41,461] DEBUG - UpdateThread.update() : total 333, complete 201
[2010-01-25 00:26:41,461] DEBUG - UpdateThread.update() : update 163852, type class AddressBook
[2010-01-25 00:26:41,463] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,477] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,478] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,478] DEBUG - XmlCompare.next(): hit  <statistics accessed="100" size="100" id="589830"> vs.  <statistics accessed="1000" size="100" id="589830">
[2010-01-25 00:26:41,480] DEBUG - XmlCompare.compare() : [[589830:statistics, 688134:address-book]]
[2010-01-25 00:26:41,480] DEBUG - XmlSerializer.save() : timing 39 at [changed]
[2010-01-25 00:26:41,482] DEBUG - XmlSerializer().storeAll() : old [557076]
[2010-01-25 00:26:41,482] DEBUG - XmlSerializer().storeAll() : new [557076]
[2010-01-25 00:26:41,482] DEBUG - XmlSerializer().storeAll() : update timestamp on class Statistics for field accessed. New Val [1000], old [100]
[2010-01-25 00:26:41,482] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [589830]
[2010-01-25 00:26:41,483] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field statistics. New Val [Statistics : 589830], old [Statistics : 589830]
[2010-01-25 00:26:41,484] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,484] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,484] DEBUG - XmlSerializer().storeAll() : old [622604, 622605]
[2010-01-25 00:26:41,484] DEBUG - XmlSerializer().storeAll() : new [622604, 622605]
[2010-01-25 00:26:41,484] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [688134]
[2010-01-25 00:26:41,485] DEBUG - XmlSerializer.save() : timing 5 at [storeAll]
[2010-01-25 00:26:41,485] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:41,486] DEBUG - UpdateCache.update() : update [class AddressBook], id [688134]
[2010-01-25 00:26:41,486] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,487] DEBUG - LockItem.unlock() : 12 current
[2010-01-25 00:26:41,487] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,487] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:41,487] DEBUG - UpdateThread.update() : total 333, complete 202
[2010-01-25 00:26:41,487] DEBUG - UpdateThread.update() : update 32794, type class Address
[2010-01-25 00:26:41,488] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,490] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,490] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,490] DEBUG - UpdateCache.update() : update [class Statistics], id [589830]
[2010-01-25 00:26:41,490] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,490] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,491] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,491] DEBUG - XmlSerializer.save() : timing 6 at [cache]
[2010-01-25 00:26:41,492] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,492] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,495] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:41,495] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,495] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:41,495] DEBUG - UpdateThread.update() : total 333, complete 203
[2010-01-25 00:26:41,495] DEBUG - UpdateThread.update() : update 65547, type class Statistics
[2010-01-25 00:26:41,495] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:41,495] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:41,495] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,495] DEBUG - XmlSerializer.save() : timing 4 at [save]
[2010-01-25 00:26:41,495] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:41,495] DEBUG - XmlSerializer.sqlLoad() : query [query.stats.by.id]
[2010-01-25 00:26:41,495] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,496] DEBUG - XmlSerializer.sqlLoad() : sql [from Statistics where id = ?]
[2010-01-25 00:26:41,496] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,497] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,497] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,497] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,500] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,500] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,500] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,500] DEBUG - UpdateThread.update() : total 333, complete 204
[2010-01-25 00:26:41,500] DEBUG - UpdateThread.update() : update 98328, type class Favorite
[2010-01-25 00:26:41,501] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,502] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,502] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,503] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,503] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,505] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,505] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,505] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,505] DEBUG - UpdateThread.update() : total 333, complete 205
[2010-01-25 00:26:41,505] DEBUG - UpdateThread.update() : update 98329, type class Favorite
[2010-01-25 00:26:41,506] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,510] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,510] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,511] DEBUG - XmlSerializer.sqlLoad() : timing 10 at [query]
[2010-01-25 00:26:41,511] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,511] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,513] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,513] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,513] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,513] DEBUG - UpdateThread.update() : total 333, complete 206
[2010-01-25 00:26:41,514] DEBUG - UpdateThread.update() : update 131084, type class Remover
[2010-01-25 00:26:41,514] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,515] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,515] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,516] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,516] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:26:41,516] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:26:41,518] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:26:41,519] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,519] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,519] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,519] DEBUG - UpdateThread.update() : total 333, complete 207
[2010-01-25 00:26:41,519] DEBUG - UpdateThread.update() : update 163852, type class AddressBook
[2010-01-25 00:26:41,520] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,521] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,525] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,525] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,525] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,525] DEBUG - UpdateThread.update() : total 333, complete 208
[2010-01-25 00:26:41,525] DEBUG - UpdateThread.update() : update 32794, type class Address
[2010-01-25 00:26:41,526] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,526] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,528] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,528] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,528] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,528] DEBUG - UpdateThread.update() : total 333, complete 209
[2010-01-25 00:26:41,529] DEBUG - UpdateThread.update() : update 65547, type class Statistics
[2010-01-25 00:26:41,529] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,530] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,531] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,531] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,531] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,531] DEBUG - UpdateThread.update() : total 333, complete 210
[2010-01-25 00:26:41,532] DEBUG - UpdateThread.update() : update 98328, type class Favorite
[2010-01-25 00:26:41,532] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,532] DEBUG - XmlSerializer.save() : timing 16 at [extract]
[2010-01-25 00:26:41,533] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:41,533] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,533] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:41,534] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,534] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,534] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,534] DEBUG - UpdateThread.update() : total 333, complete 211
[2010-01-25 00:26:41,534] DEBUG - UpdateThread.update() : update 98329, type class Favorite
[2010-01-25 00:26:41,535] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,536] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,538] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,538] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,538] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,538] DEBUG - UpdateThread.update() : total 333, complete 212
[2010-01-25 00:26:41,538] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:26:41,538] DEBUG - UpdateThread.update() : update 131084, type class Remover
[2010-01-25 00:26:41,538] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,539] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,542] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:26:41,542] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:26:41,542] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:26:41,542] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,542] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,542] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,542] DEBUG - UpdateThread.update() : total 333, complete 213
[2010-01-25 00:26:41,542] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,542] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:41,542] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:26:41,542] DEBUG - UpdateThread.update() : update 163853, type class AddressBook
[2010-01-25 00:26:41,543] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,545] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:26:41,546] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,546] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:41,546] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:26:41,546] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,546] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:41,546] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:26:41,549] DEBUG - XmlSerializer.save() : timing 16 at [storeAll]
[2010-01-25 00:26:41,549] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:41,550] DEBUG - UpdateCache.update() : update [class Levelone], id [819200]
[2010-01-25 00:26:41,550] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:41,553] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,553] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786432]
[2010-01-25 00:26:41,554] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:41,559] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,560] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,560] DEBUG - UpdateCache.update() : update [class Levelthree], id [753664]
[2010-01-25 00:26:41,560] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:41,561] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,561] DEBUG - UpdateCache.update() : update [class Levelthree], id [753665]
[2010-01-25 00:26:41,561] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,561] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:41,562] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,562] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786433]
[2010-01-25 00:26:41,563] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:41,564] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,564] DEBUG - UpdateCache.update() : update [class Levelthree], id [753666]
[2010-01-25 00:26:41,564] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:41,565] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,565] DEBUG - UpdateCache.update() : update [class Levelone], id [819200]
[2010-01-25 00:26:41,565] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:41,566] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,566] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,568] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,568] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786432]
[2010-01-25 00:26:41,568] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:41,570] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:41,570] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,570] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,570] DEBUG - UpdateThread.update() : total 333, complete 214
[2010-01-25 00:26:41,570] DEBUG - UpdateThread.update() : update 32795, type class Address
[2010-01-25 00:26:41,570] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,570] DEBUG - UpdateCache.update() : update [class Levelthree], id [753664]
[2010-01-25 00:26:41,570] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:41,571] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,571] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,571] DEBUG - UpdateCache.update() : update [class Levelthree], id [753665]
[2010-01-25 00:26:41,571] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:41,572] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,572] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,572] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786433]
[2010-01-25 00:26:41,572] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:41,573] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,574] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,574] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,575] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,575] DEBUG - UpdateCache.update() : update [class Levelthree], id [753666]
[2010-01-25 00:26:41,575] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:41,577] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,577] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,577] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,577] DEBUG - UpdateThread.update() : total 333, complete 215
[2010-01-25 00:26:41,577] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,577] DEBUG - XmlSerializer.save() : timing 28 at [cache]
[2010-01-25 00:26:41,577] DEBUG - UpdateThread.update() : update 65548, type class Statistics
[2010-01-25 00:26:41,577] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,578] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,578] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,579] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,579] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,582] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,582] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,582] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,582] DEBUG - UpdateThread.update() : total 333, complete 216
[2010-01-25 00:26:41,582] DEBUG - UpdateThread.update() : update 98330, type class Favorite
[2010-01-25 00:26:41,583] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,584] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,584] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,585] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,585] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,601] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,601] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,601] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,601] DEBUG - UpdateThread.update() : total 333, complete 217
[2010-01-25 00:26:41,601] DEBUG - UpdateThread.update() : update 98331, type class Favorite
[2010-01-25 00:26:41,602] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,603] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,603] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,604] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,604] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,606] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,606] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,606] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,606] DEBUG - UpdateThread.update() : total 333, complete 218
[2010-01-25 00:26:41,606] DEBUG - UpdateThread.update() : update 131085, type class Remover
[2010-01-25 00:26:41,607] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,608] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,608] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,609] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,609] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,612] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,612] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,612] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,613] DEBUG - UpdateThread.update() : total 333, complete 219
[2010-01-25 00:26:41,613] DEBUG - UpdateThread.update() : update 163853, type class AddressBook
[2010-01-25 00:26:41,614] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,615] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,617] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,617] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,617] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,617] DEBUG - UpdateThread.update() : total 333, complete 220
[2010-01-25 00:26:41,617] DEBUG - UpdateThread.update() : update 32795, type class Address
[2010-01-25 00:26:41,618] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,619] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,621] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,621] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,621] DEBUG - XmlSerializer.save() : timing 44 at [save]
[2010-01-25 00:26:41,621] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:41,621] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,621] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,621] DEBUG - UpdateThread.update() : total 333, complete 221
[2010-01-25 00:26:41,621] DEBUG - UpdateThread.update() : update 65548, type class Statistics
[2010-01-25 00:26:41,622] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,622] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,623] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,624] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:26:41,625] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,625] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,625] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,625] DEBUG - UpdateThread.update() : total 333, complete 222
[2010-01-25 00:26:41,625] DEBUG - UpdateThread.update() : update 98330, type class Favorite
[2010-01-25 00:26:41,625] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,626] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,631] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,631] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,631] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,631] DEBUG - UpdateThread.update() : total 333, complete 223
[2010-01-25 00:26:41,632] DEBUG - UpdateThread.update() : update 98331, type class Favorite
[2010-01-25 00:26:41,632] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,633] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,635] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,635] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,635] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,635] DEBUG - UpdateThread.update() : total 333, complete 224
[2010-01-25 00:26:41,635] DEBUG - UpdateThread.update() : update 131085, type class Remover
[2010-01-25 00:26:41,635] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,636] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,638] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,638] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,638] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,638] DEBUG - UpdateThread.update() : total 333, complete 225
[2010-01-25 00:26:41,638] DEBUG - UpdateThread.update() : update 163854, type class AddressBook
[2010-01-25 00:26:41,642] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,645] DEBUG - XmlSerializer.sqlLoad() : query [query.lthree.by.id]
[2010-01-25 00:26:41,646] DEBUG - XmlSerializer.sqlLoad() : sql [from Levelthree where id = ?]
[2010-01-25 00:26:41,659] DEBUG - XmlSerializer.sqlLoad() : timing 9 at [query]
[2010-01-25 00:26:41,659] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,661] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,662] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,669] DEBUG - XmlSerializer.save() : timing 10 at [extract]
[2010-01-25 00:26:41,670] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:41,670] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,670] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,670] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:41,670] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:41,672] DEBUG - XmlCompare.next(): hit  <name>child</name> vs.  <name>childNEW</name>
[2010-01-25 00:26:41,672] DEBUG - XmlCompare.compare() : [[753664:levelthree]]
[2010-01-25 00:26:41,672] DEBUG - XmlSerializer.save() : timing 2 at [changed]
[2010-01-25 00:26:41,672] DEBUG - XmlSerializer().storeAll() : update timestamp on class Levelthree for field name. New Val [childNEW], old [child]
[2010-01-25 00:26:41,673] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:41,673] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,673] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,673] DEBUG - UpdateThread.update() : total 333, complete 226
[2010-01-25 00:26:41,673] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [753664]
[2010-01-25 00:26:41,673] DEBUG - UpdateThread.update() : update 32796, type class Address
[2010-01-25 00:26:41,674] DEBUG - XmlSerializer.save() : timing 2 at [storeAll]
[2010-01-25 00:26:41,674] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:41,674] DEBUG - UpdateCache.updateCache() : process [select parent from Leveltwo parent join parent.levelthree as levelthree where levelthree.id = 753664]
[2010-01-25 00:26:41,674] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,676] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,677] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,679] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,679] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,686] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,686] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,686] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,686] DEBUG - UpdateThread.update() : total 333, complete 227
[2010-01-25 00:26:41,687] DEBUG - UpdateThread.update() : update 65549, type class Statistics
[2010-01-25 00:26:41,687] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,688] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,688] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,689] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,689] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,691] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,691] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,691] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,691] DEBUG - UpdateThread.update() : total 333, complete 228
[2010-01-25 00:26:41,691] DEBUG - UpdateThread.update() : update 98332, type class Favorite
[2010-01-25 00:26:41,692] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,693] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,693] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,694] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,694] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,696] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,696] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,696] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,696] DEBUG - UpdateThread.update() : total 333, complete 229
[2010-01-25 00:26:41,696] DEBUG - UpdateThread.update() : update 98333, type class Favorite
[2010-01-25 00:26:41,696] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,697] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,698] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,699] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,699] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,701] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,701] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,701] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,701] DEBUG - UpdateThread.update() : total 333, complete 230
[2010-01-25 00:26:41,701] DEBUG - UpdateThread.update() : update 131086, type class Remover
[2010-01-25 00:26:41,702] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,703] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,703] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,704] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,704] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,707] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,707] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,707] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,707] DEBUG - UpdateThread.update() : total 333, complete 231
[2010-01-25 00:26:41,708] DEBUG - UpdateThread.update() : update 163854, type class AddressBook
[2010-01-25 00:26:41,708] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,709] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,711] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,711] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,711] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,711] DEBUG - UpdateThread.update() : total 333, complete 232
[2010-01-25 00:26:41,712] DEBUG - UpdateThread.update() : update 32796, type class Address
[2010-01-25 00:26:41,712] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,713] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,715] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,715] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,715] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,715] DEBUG - UpdateThread.update() : total 333, complete 233
[2010-01-25 00:26:41,715] DEBUG - UpdateThread.update() : update 65549, type class Statistics
[2010-01-25 00:26:41,716] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,717] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,717] DEBUG - UpdateCache.updateCache() : process [select parent from Levelone parent join parent.leveltwo as leveltwo where leveltwo.id = 786432]
[2010-01-25 00:26:41,718] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,718] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,718] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,718] DEBUG - UpdateThread.update() : total 333, complete 234
[2010-01-25 00:26:41,719] DEBUG - UpdateThread.update() : update 98332, type class Favorite
[2010-01-25 00:26:41,719] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,720] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,721] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,721] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,721] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,721] DEBUG - UpdateThread.update() : total 333, complete 235
[2010-01-25 00:26:41,722] DEBUG - UpdateThread.update() : update 98333, type class Favorite
[2010-01-25 00:26:41,722] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,723] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,735] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,735] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,735] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,735] DEBUG - UpdateThread.update() : total 333, complete 236
[2010-01-25 00:26:41,735] DEBUG - UpdateThread.update() : update 131086, type class Remover
[2010-01-25 00:26:41,735] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,736] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,738] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:41,738] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,738] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,738] DEBUG - UpdateThread.update() : total 333, complete 237
[2010-01-25 00:26:41,738] DEBUG - UpdateThread.update() : update 163855, type class AddressBook
[2010-01-25 00:26:41,740] DEBUG - UpdateCache.update() : update [class Levelthree], id [753664]
[2010-01-25 00:26:41,740] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:41,741] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,741] DEBUG - UpdateCache.update() : update [class Levelone], id [819200]
[2010-01-25 00:26:41,741] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:41,742] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,754] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,754] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786432]
[2010-01-25 00:26:41,754] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:41,756] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,756] DEBUG - XmlSerializer.save() : timing 82 at [cache]
[2010-01-25 00:26:41,757] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,758] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,760] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:26:41,760] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:41,760] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:26:41,760] DEBUG - XmlSerializer.save() : timing 4 at [save]
[2010-01-25 00:26:41,760] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:41,760] DEBUG - XmlSerializer.sqlLoad() : query [query.lone.by.id]
[2010-01-25 00:26:41,760] DEBUG - XmlSerializer.sqlLoad() : sql [from Levelone where id = ?]
[2010-01-25 00:26:41,765] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,766] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,768] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:41,768] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,768] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,768] DEBUG - UpdateThread.update() : total 333, complete 238
[2010-01-25 00:26:41,768] DEBUG - UpdateThread.update() : update 32797, type class Address
[2010-01-25 00:26:41,770] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,770] DEBUG - XmlSerializer.sqlLoad() : timing 6 at [query]
[2010-01-25 00:26:41,771] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,772] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,773] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,773] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,773] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,776] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,776] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,776] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,776] DEBUG - UpdateThread.update() : total 333, complete 239
[2010-01-25 00:26:41,776] DEBUG - UpdateThread.update() : update 65550, type class Statistics
[2010-01-25 00:26:41,777] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,778] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,778] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,778] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,779] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,779] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,780] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,781] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,781] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,781] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,781] DEBUG - UpdateThread.update() : total 333, complete 240
[2010-01-25 00:26:41,782] DEBUG - UpdateThread.update() : update 98334, type class Favorite
[2010-01-25 00:26:41,782] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,783] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,783] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,787] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,787] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,790] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,790] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,790] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,790] DEBUG - UpdateThread.update() : total 333, complete 241
[2010-01-25 00:26:41,790] DEBUG - UpdateThread.update() : update 98335, type class Favorite
[2010-01-25 00:26:41,790] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,791] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,791] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,792] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,792] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,794] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,794] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,794] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,794] DEBUG - UpdateThread.update() : total 333, complete 242
[2010-01-25 00:26:41,794] DEBUG - UpdateThread.update() : update 131087, type class Remover
[2010-01-25 00:26:41,795] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,795] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,796] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,796] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:26:41,796] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:26:41,798] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,798] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,798] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,798] DEBUG - UpdateThread.update() : total 333, complete 243
[2010-01-25 00:26:41,799] DEBUG - UpdateThread.update() : update 163855, type class AddressBook
[2010-01-25 00:26:41,799] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,801] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,802] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,802] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,802] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,802] DEBUG - UpdateThread.update() : total 333, complete 244
[2010-01-25 00:26:41,803] DEBUG - UpdateThread.update() : update 32797, type class Address
[2010-01-25 00:26:41,806] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,807] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,809] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,809] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,809] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,809] DEBUG - UpdateThread.update() : total 333, complete 245
[2010-01-25 00:26:41,809] DEBUG - UpdateThread.update() : update 65550, type class Statistics
[2010-01-25 00:26:41,810] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,810] DEBUG - XmlSerializer.save() : timing 37 at [extract]
[2010-01-25 00:26:41,810] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:41,810] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:41,811] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,811] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:41,812] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,812] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:41,813] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,813] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:41,813] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,813] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,813] DEBUG - UpdateThread.update() : total 333, complete 246
[2010-01-25 00:26:41,813] DEBUG - UpdateThread.update() : update 98334, type class Favorite
[2010-01-25 00:26:41,813] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,813] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:41,815] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:41,815] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,815] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:41,815] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,815] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:41,815] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:41,816] DEBUG - XmlSerializer.save() : timing 6 at [storeAll]
[2010-01-25 00:26:41,816] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:41,817] DEBUG - UpdateCache.update() : update [class AddressBook], id [688135]
[2010-01-25 00:26:41,817] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,818] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,818] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,818] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,818] DEBUG - UpdateThread.update() : total 333, complete 247
[2010-01-25 00:26:41,818] DEBUG - UpdateThread.update() : update 98335, type class Favorite
[2010-01-25 00:26:41,819] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,819] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,821] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,821] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,821] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,821] DEBUG - UpdateThread.update() : total 333, complete 248
[2010-01-25 00:26:41,821] DEBUG - UpdateThread.update() : update 131087, type class Remover
[2010-01-25 00:26:41,822] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,822] DEBUG - UpdateCache.update() : update [class Address], id [557077]
[2010-01-25 00:26:41,822] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,822] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,823] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,824] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,824] DEBUG - UpdateCache.update() : update [class Statistics], id [589831]
[2010-01-25 00:26:41,824] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,825] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,825] DEBUG - UpdateCache.update() : update [class Favorite], id [622606]
[2010-01-25 00:26:41,825] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,826] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,826] DEBUG - UpdateCache.update() : update [class Favorite], id [622607]
[2010-01-25 00:26:41,827] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,827] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,827] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,827] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,827] DEBUG - UpdateThread.update() : total 333, complete 249
[2010-01-25 00:26:41,827] DEBUG - UpdateThread.update() : update 163855, type class AddressBook
[2010-01-25 00:26:41,827] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,827] DEBUG - UpdateCache.update() : update [class Remover], id [655367]
[2010-01-25 00:26:41,827] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,828] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,828] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,828] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,828] DEBUG - UpdateCache.update() : update [class AddressBook], id [688135]
[2010-01-25 00:26:41,829] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,831] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,831] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,831] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,831] DEBUG - UpdateThread.update() : total 333, complete 250
[2010-01-25 00:26:41,831] DEBUG - UpdateThread.update() : update 98335, type class Favorite
[2010-01-25 00:26:41,832] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,833] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,834] DEBUG - UpdateCache.update() : update [class Address], id [557077]
[2010-01-25 00:26:41,834] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,834] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,835] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,835] DEBUG - UpdateCache.update() : update [class Statistics], id [589831]
[2010-01-25 00:26:41,835] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,836] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,836] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,836] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,836] DEBUG - UpdateThread.update() : total 333, complete 251
[2010-01-25 00:26:41,836] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,836] DEBUG - UpdateCache.update() : update [class Favorite], id [622606]
[2010-01-25 00:26:41,836] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,837] DEBUG - UpdateThread.update() : update 98334, type class Favorite
[2010-01-25 00:26:41,837] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,837] DEBUG - UpdateCache.update() : update [class Favorite], id [622607]
[2010-01-25 00:26:41,837] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,837] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,838] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,838] DEBUG - UpdateCache.update() : update [class Remover], id [655367]
[2010-01-25 00:26:41,838] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,838] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,839] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,839] DEBUG - XmlSerializer.save() : timing 23 at [cache]
[2010-01-25 00:26:41,840] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,840] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,840] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,840] DEBUG - UpdateThread.update() : total 333, complete 252
[2010-01-25 00:26:41,840] DEBUG - UpdateThread.update() : update 458754, type class MixedKids
[2010-01-25 00:26:41,842] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:41,860] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,861] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:41,861] DEBUG - XmlSerializer.save() : timing 22 at [save]
[2010-01-25 00:26:41,861] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:41,861] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:41,861] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,865] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,867] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,868] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:26:41,868] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:26:41,874] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:41,874] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,874] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,874] DEBUG - UpdateThread.update() : total 333, complete 253
[2010-01-25 00:26:41,874] DEBUG - UpdateThread.update() : update 425986, type class Interleave
[2010-01-25 00:26:41,875] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:26:41,876] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,876] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:26:41,877] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:26:41,877] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:26:41,880] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,880] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,880] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,880] DEBUG - UpdateThread.update() : total 333, complete 254
[2010-01-25 00:26:41,880] DEBUG - UpdateThread.update() : update 327686, type class KidOne
[2010-01-25 00:26:41,880] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,881] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,882] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,882] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:26:41,883] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:26:41,885] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,885] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,885] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,885] DEBUG - UpdateThread.update() : total 333, complete 255
[2010-01-25 00:26:41,885] DEBUG - UpdateThread.update() : update 327687, type class KidOne
[2010-01-25 00:26:41,886] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,886] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,887] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,887] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:26:41,887] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:26:41,889] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,890] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,890] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,890] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,890] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,890] DEBUG - UpdateThread.update() : total 333, complete 256
[2010-01-25 00:26:41,890] DEBUG - UpdateThread.update() : update 327688, type class KidOne
[2010-01-25 00:26:41,890] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,891] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,892] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:41,892] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:26:41,892] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:26:41,893] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,894] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,895] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,895] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,895] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,895] DEBUG - UpdateThread.update() : total 333, complete 257
[2010-01-25 00:26:41,895] DEBUG - UpdateThread.update() : update 360450, type class KidTwo
[2010-01-25 00:26:41,895] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:41,896] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,897] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:41,897] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:26:41,897] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:26:41,900] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,900] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,900] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,900] DEBUG - UpdateThread.update() : total 333, complete 258
[2010-01-25 00:26:41,901] DEBUG - UpdateThread.update() : update 393218, type class KidThree
[2010-01-25 00:26:41,904] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:26:41,905] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,905] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:26:41,906] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:26:41,906] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:26:41,909] DEBUG - XmlSerializer.save() : timing 19 at [extract]
[2010-01-25 00:26:41,909] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:41,909] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:41,910] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:41,910] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,910] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:41,911] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [589831]
[2010-01-25 00:26:41,911] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:41,911] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:41,912] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,912] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:41,912] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:41,912] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:41,912] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:26:41,913] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,913] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,913] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,913] DEBUG - UpdateThread.update() : total 333, complete 259
[2010-01-25 00:26:41,913] DEBUG - UpdateThread.update() : update 458754, type class MixedKids
[2010-01-25 00:26:41,913] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:41,913] DEBUG - UpdateCache.update() : update [class AddressBook], id [688136]
[2010-01-25 00:26:41,913] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,913] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,914] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,917] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,917] DEBUG - UpdateCache.update() : update [class Address], id [557078]
[2010-01-25 00:26:41,917] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,919] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,919] DEBUG - UpdateCache.update() : update [class Statistics], id [589831]
[2010-01-25 00:26:41,919] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,920] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,920] DEBUG - UpdateCache.update() : update [class Favorite], id [622608]
[2010-01-25 00:26:41,920] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,921] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,921] DEBUG - UpdateCache.update() : update [class Favorite], id [622609]
[2010-01-25 00:26:41,921] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,922] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,922] DEBUG - UpdateCache.update() : update [class Remover], id [655368]
[2010-01-25 00:26:41,922] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,923] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,923] DEBUG - UpdateCache.update() : update [class AddressBook], id [688136]
[2010-01-25 00:26:41,923] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,923] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,924] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,924] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,924] DEBUG - UpdateThread.update() : total 333, complete 260
[2010-01-25 00:26:41,924] DEBUG - UpdateThread.update() : update 327686, type class KidOne
[2010-01-25 00:26:41,924] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,925] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,926] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,926] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,926] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,926] DEBUG - UpdateThread.update() : total 333, complete 261
[2010-01-25 00:26:41,926] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,927] DEBUG - UpdateCache.update() : update [class Address], id [557078]
[2010-01-25 00:26:41,927] DEBUG - UpdateThread.update() : update 327687, type class KidOne
[2010-01-25 00:26:41,927] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,928] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,928] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,928] DEBUG - UpdateCache.update() : update [class Favorite], id [622608]
[2010-01-25 00:26:41,928] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,929] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,929] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,929] DEBUG - UpdateCache.update() : update [class Favorite], id [622609]
[2010-01-25 00:26:41,929] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,929] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,930] DEBUG - UpdateCache.update() : update [class Remover], id [655368]
[2010-01-25 00:26:41,930] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:41,930] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,930] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,930] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,930] DEBUG - UpdateThread.update() : total 333, complete 262
[2010-01-25 00:26:41,930] DEBUG - UpdateThread.update() : update 327688, type class KidOne
[2010-01-25 00:26:41,930] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,930] DEBUG - XmlSerializer.save() : timing 17 at [cache]
[2010-01-25 00:26:41,931] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,931] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,933] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,933] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,933] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,933] DEBUG - UpdateThread.update() : total 333, complete 263
[2010-01-25 00:26:41,933] DEBUG - UpdateThread.update() : update 360450, type class KidTwo
[2010-01-25 00:26:41,934] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,935] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,936] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,936] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,936] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,936] DEBUG - UpdateThread.update() : total 333, complete 264
[2010-01-25 00:26:41,936] DEBUG - UpdateThread.update() : update 393218, type class KidThree
[2010-01-25 00:26:41,937] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,938] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,942] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,942] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,942] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,942] DEBUG - UpdateThread.update() : total 333, complete 265
[2010-01-25 00:26:41,942] DEBUG - UpdateThread.update() : update 458754, type class MixedKids
[2010-01-25 00:26:41,944] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,945] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,945] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,945] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:41,945] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:26:41,945] DEBUG - XmlSerializer.save() : timing 15 at [save]
[2010-01-25 00:26:41,945] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:41,945] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,946] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,946] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,946] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,946] DEBUG - UpdateThread.update() : total 333, complete 266
[2010-01-25 00:26:41,947] DEBUG - UpdateThread.update() : update 327686, type class KidOne
[2010-01-25 00:26:41,947] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,948] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,948] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,949] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,949] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,949] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,949] DEBUG - UpdateThread.update() : total 333, complete 267
[2010-01-25 00:26:41,949] DEBUG - UpdateThread.update() : update 360450, type class KidTwo
[2010-01-25 00:26:41,950] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,950] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,951] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,953] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,953] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,953] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,953] DEBUG - UpdateThread.update() : total 333, complete 268
[2010-01-25 00:26:41,953] DEBUG - UpdateThread.update() : update 163856, type class AddressBook
[2010-01-25 00:26:41,954] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,961] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,962] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,965] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:41,966] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:26:41,966] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:26:41,969] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:26:41,969] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,969] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,970] DEBUG - UpdateThread.update() : total 333, complete 269
[2010-01-25 00:26:41,970] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,970] DEBUG - UpdateThread.update() : update 32798, type class Address
[2010-01-25 00:26:41,970] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,975] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:41,975] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,979] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,982] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,982] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,982] DEBUG - UpdateThread.update() : total 333, complete 270
[2010-01-25 00:26:41,982] DEBUG - UpdateThread.update() : update 65551, type class Statistics
[2010-01-25 00:26:41,983] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,984] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,984] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,985] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:26:41,985] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:26:41,986] DEBUG - XmlSerializer.save() : timing 21 at [extract]
[2010-01-25 00:26:41,986] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:41,986] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:41,987] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:41,987] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,987] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:41,988] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,988] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,988] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,988] DEBUG - UpdateThread.update() : total 333, complete 271
[2010-01-25 00:26:41,988] DEBUG - UpdateThread.update() : update 98336, type class Favorite
[2010-01-25 00:26:41,988] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,989] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:41,989] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,989] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,989] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:41,989] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:41,990] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:41,990] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:41,990] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:26:41,990] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:26:41,990] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:41,990] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:41,990] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:26:41,991] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:41,991] DEBUG - UpdateCache.update() : update [class AddressBook], id [688137]
[2010-01-25 00:26:41,991] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:41,992] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,992] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,992] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,992] DEBUG - UpdateThread.update() : total 333, complete 272
[2010-01-25 00:26:41,992] DEBUG - UpdateThread.update() : update 98337, type class Favorite
[2010-01-25 00:26:41,992] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,993] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:41,993] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,994] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:26:41,994] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:26:41,995] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,995] DEBUG - UpdateCache.update() : update [class Address], id [557079]
[2010-01-25 00:26:41,995] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:41,996] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:41,996] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:41,996] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:41,996] DEBUG - UpdateThread.update() : total 333, complete 273
[2010-01-25 00:26:41,996] DEBUG - UpdateThread.update() : update 131088, type class Remover
[2010-01-25 00:26:41,997] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,997] DEBUG - UpdateCache.update() : update [class Statistics], id [589832]
[2010-01-25 00:26:41,997] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:41,997] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,998] DEBUG - UpdateCache.update() : update [class Favorite], id [622610]
[2010-01-25 00:26:41,998] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,998] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,998] DEBUG - UpdateCache.update() : update [class Favorite], id [622611]
[2010-01-25 00:26:41,998] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:41,999] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:41,999] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:41,999] DEBUG - UpdateCache.update() : update [class Remover], id [655369]
[2010-01-25 00:26:41,999] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,000] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,000] DEBUG - UpdateCache.update() : update [class AddressBook], id [688137]
[2010-01-25 00:26:42,000] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,001] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,002] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,002] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,002] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,002] DEBUG - UpdateThread.update() : total 333, complete 274
[2010-01-25 00:26:42,002] DEBUG - UpdateThread.update() : update 163856, type class AddressBook
[2010-01-25 00:26:42,003] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,004] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,004] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,004] DEBUG - UpdateCache.update() : update [class Address], id [557079]
[2010-01-25 00:26:42,004] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,006] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,006] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,006] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,006] DEBUG - UpdateThread.update() : total 333, complete 275
[2010-01-25 00:26:42,006] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,006] DEBUG - UpdateCache.update() : update [class Statistics], id [589832]
[2010-01-25 00:26:42,006] DEBUG - UpdateThread.update() : update 32798, type class Address
[2010-01-25 00:26:42,006] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,007] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,007] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,007] DEBUG - UpdateCache.update() : update [class Favorite], id [622610]
[2010-01-25 00:26:42,007] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,007] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,008] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,008] DEBUG - UpdateCache.update() : update [class Favorite], id [622611]
[2010-01-25 00:26:42,008] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,009] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,009] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,009] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,009] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,009] DEBUG - UpdateCache.update() : update [class Remover], id [655369]
[2010-01-25 00:26:42,009] DEBUG - UpdateThread.update() : total 333, complete 276
[2010-01-25 00:26:42,009] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,009] DEBUG - UpdateThread.update() : update 65551, type class Statistics
[2010-01-25 00:26:42,009] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,010] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,010] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-25 00:26:42,010] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,015] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,015] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,015] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,015] DEBUG - UpdateThread.update() : total 333, complete 277
[2010-01-25 00:26:42,015] DEBUG - UpdateThread.update() : update 98336, type class Favorite
[2010-01-25 00:26:42,017] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,018] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,019] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,019] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,019] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,019] DEBUG - UpdateThread.update() : total 333, complete 278
[2010-01-25 00:26:42,020] DEBUG - UpdateThread.update() : update 98337, type class Favorite
[2010-01-25 00:26:42,020] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,021] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,035] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,035] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,035] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,035] DEBUG - UpdateThread.update() : total 333, complete 279
[2010-01-25 00:26:42,035] DEBUG - UpdateThread.update() : update 131088, type class Remover
[2010-01-25 00:26:42,036] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:42,036] DEBUG - XmlSerializer.save() : timing 26 at [save]
[2010-01-25 00:26:42,036] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:42,036] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,036] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,037] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,038] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,038] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,038] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,038] DEBUG - UpdateThread.update() : total 333, complete 280
[2010-01-25 00:26:42,039] DEBUG - UpdateThread.update() : update 163857, type class AddressBook
[2010-01-25 00:26:42,040] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,040] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,041] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,057] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,058] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,064] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:26:42,064] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:26:42,068] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:42,068] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,068] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,068] DEBUG - UpdateThread.update() : total 333, complete 281
[2010-01-25 00:26:42,068] DEBUG - UpdateThread.update() : update 32799, type class Address
[2010-01-25 00:26:42,070] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,070] DEBUG - XmlSerializer.copy() : AddressBook, id 688137
[2010-01-25 00:26:42,071] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,072] DEBUG - XmlSerializer.copy() : timing 2 at [setup]
[2010-01-25 00:26:42,072] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,072] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,073] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:26:42,073] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:26:42,075] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,076] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,077] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,077] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,077] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,077] DEBUG - UpdateThread.update() : total 333, complete 282
[2010-01-25 00:26:42,077] DEBUG - UpdateThread.update() : update 65552, type class Statistics
[2010-01-25 00:26:42,077] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,078] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,079] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,079] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:26:42,079] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:26:42,086] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,086] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,086] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,086] DEBUG - UpdateThread.update() : total 333, complete 283
[2010-01-25 00:26:42,087] DEBUG - UpdateThread.update() : update 98338, type class Favorite
[2010-01-25 00:26:42,088] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,088] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,089] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,089] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:26:42,090] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:26:42,092] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,092] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,092] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,092] DEBUG - UpdateThread.update() : total 333, complete 284
[2010-01-25 00:26:42,092] DEBUG - UpdateThread.update() : update 98339, type class Favorite
[2010-01-25 00:26:42,092] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,093] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,093] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,094] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:26:42,094] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:26:42,095] DEBUG - XmlSerializer.copy() : timing 23 at [extract]
[2010-01-25 00:26:42,103] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,103] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,103] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,103] DEBUG - UpdateThread.update() : total 333, complete 285
[2010-01-25 00:26:42,103] DEBUG - UpdateThread.update() : update 131089, type class Remover
[2010-01-25 00:26:42,105] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,105] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,107] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,108] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:26:42,108] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:26:42,110] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,110] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,110] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,110] DEBUG - UpdateThread.update() : total 333, complete 286
[2010-01-25 00:26:42,111] DEBUG - UpdateThread.update() : update 163857, type class AddressBook
[2010-01-25 00:26:42,112] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,113] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,115] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,115] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,115] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,115] DEBUG - UpdateThread.update() : total 333, complete 287
[2010-01-25 00:26:42,115] DEBUG - UpdateThread.update() : update 32799, type class Address
[2010-01-25 00:26:42,116] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,117] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,120] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:42,120] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,120] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,120] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,120] DEBUG - UpdateThread.update() : total 333, complete 288
[2010-01-25 00:26:42,120] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,120] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:42,120] DEBUG - UpdateThread.update() : update 65552, type class Statistics
[2010-01-25 00:26:42,120] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:42,120] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,121] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:42,121] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:42,121] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,121] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:42,122] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:42,122] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,122] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:42,122] DEBUG - XmlSerializer.copy() : timing 27 at [save]
[2010-01-25 00:26:42,123] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,123] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,123] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,123] DEBUG - UpdateThread.update() : total 333, complete 289
[2010-01-25 00:26:42,123] DEBUG - UpdateThread.update() : update 98338, type class Favorite
[2010-01-25 00:26:42,124] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,125] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,126] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,126] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,126] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,126] DEBUG - UpdateThread.update() : total 333, complete 290
[2010-01-25 00:26:42,127] DEBUG - UpdateThread.update() : update 98339, type class Favorite
[2010-01-25 00:26:42,127] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,128] DEBUG - UpdateCache.update() : update [class AddressBook], id [688138]
[2010-01-25 00:26:42,128] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,132] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,134] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,134] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,134] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,134] DEBUG - UpdateThread.update() : total 333, complete 291
[2010-01-25 00:26:42,134] DEBUG - UpdateThread.update() : update 131089, type class Remover
[2010-01-25 00:26:42,134] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,135] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,136] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,137] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,137] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,137] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,137] DEBUG - UpdateThread.update() : total 333, complete 292
[2010-01-25 00:26:42,137] DEBUG - UpdateCache.update() : update [class Address], id [557080]
[2010-01-25 00:26:42,137] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,137] DEBUG - UpdateThread.update() : update 294913, type class Levelone
[2010-01-25 00:26:42,138] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:42,139] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,139] DEBUG - UpdateCache.update() : update [class Statistics], id [589833]
[2010-01-25 00:26:42,139] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,140] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,140] DEBUG - UpdateCache.update() : update [class Favorite], id [622612]
[2010-01-25 00:26:42,140] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,141] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,141] DEBUG - UpdateCache.update() : update [class Favorite], id [622613]
[2010-01-25 00:26:42,141] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,142] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,142] DEBUG - UpdateCache.update() : update [class Remover], id [655370]
[2010-01-25 00:26:42,142] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,143] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,143] DEBUG - XmlSerializer.copy() : timing 21 at [update]
[2010-01-25 00:26:42,149] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,150] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:42,154] DEBUG - UpdateCache.remove() : size before 85
[2010-01-25 00:26:42,154] DEBUG - UpdateCache.remove() : size after 85
[2010-01-25 00:26:42,154] DEBUG - XmlSerializer.copy() : timing 11 at [finish]
[2010-01-25 00:26:42,154] DEBUG - XmlSerializer.copy() : timing ================
[2010-01-25 00:26:42,155] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,157] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:42,157] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,157] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,157] DEBUG - UpdateThread.update() : total 333, complete 293
[2010-01-25 00:26:42,157] DEBUG - UpdateThread.update() : update 262146, type class Leveltwo
[2010-01-25 00:26:42,158] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,158] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:42,159] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,168] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,168] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:42,171] DEBUG - UpdateCache.remove() : size before 85
[2010-01-25 00:26:42,172] DEBUG - UpdateCache.remove() : size after 85
[2010-01-25 00:26:42,174] DEBUG - LockItem.unlock() : 3 current
[2010-01-25 00:26:42,174] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,174] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,174] DEBUG - UpdateThread.update() : total 333, complete 294
[2010-01-25 00:26:42,175] DEBUG - UpdateThread.update() : update 229379, type class Levelthree
[2010-01-25 00:26:42,175] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:42,176] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,176] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:42,176] DEBUG - UpdateCache.remove() : size before 85
[2010-01-25 00:26:42,176] DEBUG - UpdateCache.remove() : size after 85
[2010-01-25 00:26:42,179] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,179] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,179] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,179] DEBUG - UpdateThread.update() : total 333, complete 295
[2010-01-25 00:26:42,179] DEBUG - UpdateThread.update() : update 229380, type class Levelthree
[2010-01-25 00:26:42,180] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:42,180] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,181] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:42,181] DEBUG - UpdateCache.remove() : size before 85
[2010-01-25 00:26:42,181] DEBUG - UpdateCache.remove() : size after 85
[2010-01-25 00:26:42,183] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,183] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,183] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,183] DEBUG - UpdateThread.update() : total 333, complete 296
[2010-01-25 00:26:42,184] DEBUG - UpdateThread.update() : update 262147, type class Leveltwo
[2010-01-25 00:26:42,184] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:42,186] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,187] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,187] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:42,190] DEBUG - UpdateCache.remove() : size before 85
[2010-01-25 00:26:42,190] DEBUG - UpdateCache.remove() : size after 85
[2010-01-25 00:26:42,196] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:26:42,196] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,196] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,197] DEBUG - UpdateThread.update() : total 333, complete 297
[2010-01-25 00:26:42,197] DEBUG - UpdateThread.update() : update 229381, type class Levelthree
[2010-01-25 00:26:42,202] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:42,203] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,203] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:42,204] DEBUG - UpdateCache.remove() : size before 85
[2010-01-25 00:26:42,204] DEBUG - UpdateCache.remove() : size after 85
[2010-01-25 00:26:42,225] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,225] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,225] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,225] DEBUG - UpdateThread.update() : total 333, complete 298
[2010-01-25 00:26:42,225] DEBUG - UpdateThread.update() : update 294913, type class Levelone
[2010-01-25 00:26:42,226] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,227] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,229] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,229] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,229] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,229] DEBUG - UpdateThread.update() : total 333, complete 299
[2010-01-25 00:26:42,229] DEBUG - UpdateThread.update() : update 262146, type class Leveltwo
[2010-01-25 00:26:42,229] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,230] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,233] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,233] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,233] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,233] DEBUG - UpdateThread.update() : total 333, complete 300
[2010-01-25 00:26:42,233] DEBUG - UpdateThread.update() : update 229379, type class Levelthree
[2010-01-25 00:26:42,233] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,234] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,235] DEBUG - XmlSerializer.save() : timing 49 at [extract]
[2010-01-25 00:26:42,235] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:42,235] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:42,238] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [851968]
[2010-01-25 00:26:42,238] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [851969]
[2010-01-25 00:26:42,239] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [851970]
[2010-01-25 00:26:42,239] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,239] DEBUG - XmlSerializer().storeAll() : new [851968, 851969, 851970]
[2010-01-25 00:26:42,241] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [884736]
[2010-01-25 00:26:42,241] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,241] DEBUG - XmlSerializer().storeAll() : new [884736]
[2010-01-25 00:26:42,243] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [917504]
[2010-01-25 00:26:42,243] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,243] DEBUG - XmlSerializer().storeAll() : new [917504]
[2010-01-25 00:26:42,243] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-25 00:26:42,250] DEBUG - XmlSerializer.save() : timing 15 at [storeAll]
[2010-01-25 00:26:42,251] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,251] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,251] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,251] DEBUG - UpdateThread.update() : total 333, complete 301
[2010-01-25 00:26:42,252] DEBUG - UpdateThread.update() : update 229380, type class Levelthree
[2010-01-25 00:26:42,252] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,252] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:26:42,252] DEBUG - UpdateCache.update() : update [class MixedKids], id [983040]
[2010-01-25 00:26:42,253] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:42,253] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,254] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,254] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,254] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,254] DEBUG - UpdateThread.update() : total 333, complete 302
[2010-01-25 00:26:42,255] DEBUG - UpdateThread.update() : update 262147, type class Leveltwo
[2010-01-25 00:26:42,255] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,256] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,257] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,257] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,257] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,257] DEBUG - UpdateThread.update() : total 333, complete 303
[2010-01-25 00:26:42,258] DEBUG - UpdateThread.update() : update 229381, type class Levelthree
[2010-01-25 00:26:42,258] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,258] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,258] DEBUG - UpdateCache.update() : update [class Interleave], id [950272]
[2010-01-25 00:26:42,258] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:26:42,259] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,259] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,259] DEBUG - UpdateCache.update() : update [class KidOne], id [851968]
[2010-01-25 00:26:42,259] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:42,260] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,260] DEBUG - UpdateCache.update() : update [class KidOne], id [851969]
[2010-01-25 00:26:42,260] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:42,261] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,261] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,261] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,261] DEBUG - UpdateThread.update() : total 333, complete 304
[2010-01-25 00:26:42,261] DEBUG - UpdateThread.update() : update 294914, type class Levelone
[2010-01-25 00:26:42,261] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,261] DEBUG - UpdateCache.update() : update [class KidOne], id [851970]
[2010-01-25 00:26:42,261] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:42,262] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,262] DEBUG - UpdateCache.update() : update [class KidTwo], id [884736]
[2010-01-25 00:26:42,262] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:42,263] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:42,263] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,263] DEBUG - UpdateCache.update() : update [class KidThree], id [917504]
[2010-01-25 00:26:42,263] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:26:42,264] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,264] DEBUG - UpdateCache.update() : update [class MixedKids], id [983040]
[2010-01-25 00:26:42,264] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:42,268] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,268] DEBUG - UpdateCache.update() : update [class KidOne], id [851968]
[2010-01-25 00:26:42,268] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:42,269] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,269] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,269] DEBUG - UpdateCache.update() : update [class KidOne], id [851969]
[2010-01-25 00:26:42,269] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:42,275] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:42,276] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,276] DEBUG - UpdateCache.update() : update [class KidOne], id [851970]
[2010-01-25 00:26:42,276] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:42,277] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,277] DEBUG - UpdateCache.update() : update [class KidTwo], id [884736]
[2010-01-25 00:26:42,277] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:42,278] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,278] DEBUG - UpdateCache.update() : update [class KidThree], id [917504]
[2010-01-25 00:26:42,278] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:26:42,279] DEBUG - UpdateCache.remove() : size before 92
[2010-01-25 00:26:42,279] DEBUG - UpdateCache.remove() : size after 92
[2010-01-25 00:26:42,279] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,279] DEBUG - XmlSerializer.save() : timing 27 at [cache]
[2010-01-25 00:26:42,282] DEBUG - LockItem.unlock() : 5 current
[2010-01-25 00:26:42,282] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,282] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,282] DEBUG - UpdateThread.update() : total 333, complete 305
[2010-01-25 00:26:42,283] DEBUG - UpdateThread.update() : update 262148, type class Leveltwo
[2010-01-25 00:26:42,283] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:42,287] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,288] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:42,291] DEBUG - UpdateCache.remove() : size before 92
[2010-01-25 00:26:42,291] DEBUG - UpdateCache.remove() : size after 92
[2010-01-25 00:26:42,293] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:26:42,293] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,293] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,293] DEBUG - UpdateThread.update() : total 333, complete 306
[2010-01-25 00:26:42,294] DEBUG - UpdateThread.update() : update 229379, type class Levelthree
[2010-01-25 00:26:42,294] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,295] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,297] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,297] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,297] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,297] DEBUG - UpdateThread.update() : total 333, complete 307
[2010-01-25 00:26:42,297] DEBUG - UpdateThread.update() : update 229380, type class Levelthree
[2010-01-25 00:26:42,297] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,298] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,299] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,299] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,299] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,299] DEBUG - UpdateThread.update() : total 333, complete 308
[2010-01-25 00:26:42,300] DEBUG - UpdateThread.update() : update 229381, type class Levelthree
[2010-01-25 00:26:42,300] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,301] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,302] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,302] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,302] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,302] DEBUG - UpdateThread.update() : total 333, complete 309
[2010-01-25 00:26:42,303] DEBUG - UpdateThread.update() : update 294914, type class Levelone
[2010-01-25 00:26:42,303] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,304] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,306] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,306] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,306] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,306] DEBUG - UpdateThread.update() : total 333, complete 310
[2010-01-25 00:26:42,307] DEBUG - UpdateThread.update() : update 262148, type class Leveltwo
[2010-01-25 00:26:42,307] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,308] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,313] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,313] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,313] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,313] DEBUG - UpdateThread.update() : total 333, complete 311
[2010-01-25 00:26:42,313] DEBUG - UpdateThread.update() : update 294915, type class Levelone
[2010-01-25 00:26:42,315] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:42,330] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,331] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:42,335] DEBUG - UpdateCache.remove() : size before 92
[2010-01-25 00:26:42,335] DEBUG - UpdateCache.remove() : size after 92
[2010-01-25 00:26:42,347] DEBUG - LockItem.unlock() : 5 current
[2010-01-25 00:26:42,347] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,347] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,347] DEBUG - UpdateThread.update() : total 333, complete 312
[2010-01-25 00:26:42,347] DEBUG - UpdateThread.update() : update 262149, type class Leveltwo
[2010-01-25 00:26:42,348] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:42,351] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,352] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:42,354] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:26:42,354] DEBUG - XmlSerializer.save() : timing 75 at [save]
[2010-01-25 00:26:42,354] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:42,354] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,356] DEBUG - UpdateCache.remove() : size before 92
[2010-01-25 00:26:42,356] DEBUG - UpdateCache.remove() : size after 92
[2010-01-25 00:26:42,363] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:26:42,363] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,363] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,363] DEBUG - UpdateThread.update() : total 333, complete 313
[2010-01-25 00:26:42,364] DEBUG - UpdateThread.update() : update 229379, type class Levelthree
[2010-01-25 00:26:42,364] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,365] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,367] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,367] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,367] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,367] DEBUG - UpdateThread.update() : total 333, complete 314
[2010-01-25 00:26:42,367] DEBUG - UpdateThread.update() : update 229380, type class Levelthree
[2010-01-25 00:26:42,368] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,369] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,370] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,370] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,370] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,370] DEBUG - UpdateThread.update() : total 333, complete 315
[2010-01-25 00:26:42,370] DEBUG - UpdateThread.update() : update 229381, type class Levelthree
[2010-01-25 00:26:42,371] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,372] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,374] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,374] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,374] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,374] DEBUG - UpdateThread.update() : total 333, complete 316
[2010-01-25 00:26:42,374] DEBUG - UpdateThread.update() : update 294915, type class Levelone
[2010-01-25 00:26:42,374] DEBUG - XmlSerializer.copy() : MixedKids, id 983040
[2010-01-25 00:26:42,375] DEBUG - XmlSerializer.copy() : timing 1 at [setup]
[2010-01-25 00:26:42,375] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,375] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,376] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,378] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,378] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,378] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,378] DEBUG - UpdateThread.update() : total 333, complete 317
[2010-01-25 00:26:42,379] DEBUG - UpdateThread.update() : update 262149, type class Leveltwo
[2010-01-25 00:26:42,379] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,380] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,382] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,382] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,382] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,382] DEBUG - UpdateThread.update() : total 333, complete 318
[2010-01-25 00:26:42,382] DEBUG - UpdateThread.update() : update 491520, type class BoolTest
[2010-01-25 00:26:42,390] DEBUG - XmlSerializer.copy() : timing 15 at [extract]
[2010-01-25 00:26:42,396] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:26:42,399] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,400] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:26:42,405] DEBUG - UpdateCache.remove() : size before 92
[2010-01-25 00:26:42,406] DEBUG - UpdateCache.remove() : size after 92
[2010-01-25 00:26:42,419] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,419] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,419] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,419] DEBUG - UpdateThread.update() : total 333, complete 319
[2010-01-25 00:26:42,419] DEBUG - UpdateThread.update() : update 491520, type class BoolTest
[2010-01-25 00:26:42,421] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,422] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,424] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,424] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,424] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,424] DEBUG - UpdateThread.update() : total 333, complete 320
[2010-01-25 00:26:42,424] DEBUG - UpdateThread.update() : update 491520, type class BoolTest
[2010-01-25 00:26:42,424] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,425] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [851971]
[2010-01-25 00:26:42,425] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,425] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [851972]
[2010-01-25 00:26:42,425] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [851973]
[2010-01-25 00:26:42,426] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,426] DEBUG - XmlSerializer().storeAll() : new [851971, 851972, 851973]
[2010-01-25 00:26:42,426] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [884737]
[2010-01-25 00:26:42,426] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,426] DEBUG - XmlSerializer().storeAll() : new [884737]
[2010-01-25 00:26:42,426] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [917505]
[2010-01-25 00:26:42,426] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,426] DEBUG - XmlSerializer().storeAll() : new [917505]
[2010-01-25 00:26:42,426] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-25 00:26:42,427] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,427] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,427] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,427] DEBUG - UpdateThread.update() : total 333, complete 321
[2010-01-25 00:26:42,427] DEBUG - UpdateThread.update() : update 688128, type class AddressBook
[2010-01-25 00:26:42,428] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,430] DEBUG - XmlSerializer.copy() : timing 40 at [save]
[2010-01-25 00:26:42,431] DEBUG - UpdateCache.update() : update [class MixedKids], id [983041]
[2010-01-25 00:26:42,431] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:42,435] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,435] DEBUG - UpdateCache.update() : update [class Interleave], id [950273]
[2010-01-25 00:26:42,436] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:26:42,436] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,436] DEBUG - UpdateCache.update() : update [class KidOne], id [851971]
[2010-01-25 00:26:42,436] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:42,437] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,437] DEBUG - UpdateCache.update() : update [class KidOne], id [851972]
[2010-01-25 00:26:42,437] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:42,437] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,438] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,438] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,438] DEBUG - UpdateCache.update() : update [class KidOne], id [851973]
[2010-01-25 00:26:42,438] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:42,439] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,439] DEBUG - UpdateCache.update() : update [class KidTwo], id [884737]
[2010-01-25 00:26:42,439] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:42,440] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,440] DEBUG - UpdateCache.update() : update [class KidThree], id [917505]
[2010-01-25 00:26:42,440] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:26:42,441] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,441] DEBUG - XmlSerializer.copy() : timing 11 at [update]
[2010-01-25 00:26:42,445] DEBUG - UpdateCache.remove() : size before 99
[2010-01-25 00:26:42,445] DEBUG - UpdateCache.remove() : size after 98
[2010-01-25 00:26:42,470] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:42,470] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,470] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,470] DEBUG - UpdateThread.update() : total 333, complete 322
[2010-01-25 00:26:42,470] DEBUG - UpdateThread.update() : update 557056, type class Address
[2010-01-25 00:26:42,470] DEBUG - XmlSerializer.copy() : timing 29 at [finish]
[2010-01-25 00:26:42,470] DEBUG - XmlSerializer.copy() : timing ================
[2010-01-25 00:26:42,470] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,471] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,472] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,473] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,474] DEBUG - UpdateCache.remove() : size before 98
[2010-01-25 00:26:42,474] DEBUG - UpdateCache.remove() : size after 97
[2010-01-25 00:26:42,478] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,478] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,478] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,479] DEBUG - UpdateThread.update() : total 333, complete 323
[2010-01-25 00:26:42,479] DEBUG - UpdateThread.update() : update 589824, type class Statistics
[2010-01-25 00:26:42,479] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,480] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,480] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,481] DEBUG - UpdateCache.remove() : size before 97
[2010-01-25 00:26:42,481] DEBUG - UpdateCache.remove() : size after 96
[2010-01-25 00:26:42,484] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,484] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,484] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,484] DEBUG - UpdateThread.update() : total 333, complete 324
[2010-01-25 00:26:42,484] DEBUG - UpdateThread.update() : update 622592, type class Favorite
[2010-01-25 00:26:42,484] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,485] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,486] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,487] DEBUG - UpdateCache.remove() : size before 96
[2010-01-25 00:26:42,487] DEBUG - UpdateCache.remove() : size after 95
[2010-01-25 00:26:42,487] DEBUG - XmlSerializer.sqlLoad() : query [query.multi.by.id]
[2010-01-25 00:26:42,487] DEBUG - XmlSerializer.sqlLoad() : sql [from MixedKids where id = ?]
[2010-01-25 00:26:42,489] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,489] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,489] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,489] DEBUG - UpdateThread.update() : total 333, complete 325
[2010-01-25 00:26:42,489] DEBUG - UpdateThread.update() : update 622593, type class Favorite
[2010-01-25 00:26:42,489] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,490] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,491] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,491] DEBUG - UpdateCache.remove() : size before 95
[2010-01-25 00:26:42,491] DEBUG - UpdateCache.remove() : size after 94
[2010-01-25 00:26:42,494] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,494] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,494] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,494] DEBUG - UpdateThread.update() : total 333, complete 326
[2010-01-25 00:26:42,494] DEBUG - UpdateThread.update() : update 655360, type class Remover
[2010-01-25 00:26:42,499] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,500] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,500] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,502] DEBUG - UpdateCache.remove() : size before 94
[2010-01-25 00:26:42,502] DEBUG - UpdateCache.remove() : size after 93
[2010-01-25 00:26:42,504] DEBUG - XmlSerializer.sqlLoad() : timing 13 at [query]
[2010-01-25 00:26:42,507] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,507] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,507] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,507] DEBUG - UpdateThread.update() : total 333, complete 327
[2010-01-25 00:26:42,507] DEBUG - UpdateThread.update() : update 688128, type class AddressBook
[2010-01-25 00:26:42,508] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,509] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,511] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,511] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,511] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,511] DEBUG - UpdateThread.update() : total 333, complete 328
[2010-01-25 00:26:42,511] DEBUG - UpdateThread.update() : update 557056, type class Address
[2010-01-25 00:26:42,512] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,513] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,514] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,515] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,515] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,515] DEBUG - UpdateThread.update() : total 333, complete 329
[2010-01-25 00:26:42,515] DEBUG - UpdateThread.update() : update 589824, type class Statistics
[2010-01-25 00:26:42,515] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,516] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,517] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,518] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,518] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,518] DEBUG - UpdateThread.update() : total 333, complete 330
[2010-01-25 00:26:42,518] DEBUG - UpdateThread.update() : update 622592, type class Favorite
[2010-01-25 00:26:42,518] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,519] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,520] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,520] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,520] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,520] DEBUG - UpdateThread.update() : total 333, complete 331
[2010-01-25 00:26:42,521] DEBUG - UpdateThread.update() : update 622593, type class Favorite
[2010-01-25 00:26:42,521] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,522] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,523] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,523] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,523] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,523] DEBUG - UpdateThread.update() : total 333, complete 332
[2010-01-25 00:26:42,524] DEBUG - UpdateThread.update() : update 655360, type class Remover
[2010-01-25 00:26:42,524] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:26:42,525] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:26:42,526] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:42,526] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:26:42,526] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:42,526] DEBUG - UpdateThread.update() : total 333, complete 333
[2010-01-25 00:26:42,526] DEBUG - UpdateThread.update() : finish
[2010-01-25 00:26:42,614] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,616] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,618] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,628] DEBUG - XmlSerializer.save() : timing 15 at [extract]
[2010-01-25 00:26:42,628] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:42,628] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:42,629] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:42,629] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,629] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:42,629] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:42,630] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:42,630] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:42,630] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,630] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:42,630] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:42,631] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:42,631] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:26:42,631] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:42,632] DEBUG - UpdateCache.update() : update [class AddressBook], id [688139]
[2010-01-25 00:26:42,632] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,635] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,636] DEBUG - UpdateCache.update() : update [class Address], id [557081]
[2010-01-25 00:26:42,636] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,637] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,637] DEBUG - UpdateCache.update() : update [class Statistics], id [589834]
[2010-01-25 00:26:42,637] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,638] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,638] DEBUG - UpdateCache.update() : update [class Favorite], id [622614]
[2010-01-25 00:26:42,638] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,638] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,638] DEBUG - UpdateCache.update() : update [class Favorite], id [622615]
[2010-01-25 00:26:42,638] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,639] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,639] DEBUG - UpdateCache.update() : update [class Remover], id [655371]
[2010-01-25 00:26:42,639] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,640] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,640] DEBUG - UpdateCache.update() : update [class AddressBook], id [688139]
[2010-01-25 00:26:42,640] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,643] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,643] DEBUG - UpdateCache.update() : update [class Address], id [557081]
[2010-01-25 00:26:42,643] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,644] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,644] DEBUG - UpdateCache.update() : update [class Statistics], id [589834]
[2010-01-25 00:26:42,644] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,645] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,645] DEBUG - UpdateCache.update() : update [class Favorite], id [622614]
[2010-01-25 00:26:42,645] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,646] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,646] DEBUG - UpdateCache.update() : update [class Favorite], id [622615]
[2010-01-25 00:26:42,646] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,646] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,647] DEBUG - UpdateCache.update() : update [class Remover], id [655371]
[2010-01-25 00:26:42,647] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,647] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,647] DEBUG - XmlSerializer.save() : timing 16 at [cache]
[2010-01-25 00:26:42,661] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:42,661] DEBUG - XmlSerializer.save() : timing 14 at [save]
[2010-01-25 00:26:42,661] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:42,662] DEBUG - XmlSerializer.sqlLoad() : query [query.all.entries]
[2010-01-25 00:26:42,663] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook]
[2010-01-25 00:26:42,688] DEBUG - XmlSerializer.sqlLoad() : timing 24 at [query]
[2010-01-25 00:26:42,704] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,707] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,711] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,724] DEBUG - XmlSerializer.save() : timing 20 at [extract]
[2010-01-25 00:26:42,724] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:42,724] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:42,725] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:42,725] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,726] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:42,726] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:42,726] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:42,726] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:42,727] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,727] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:42,727] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:42,727] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:42,727] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:26:42,728] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:42,728] DEBUG - UpdateCache.update() : update [class AddressBook], id [688140]
[2010-01-25 00:26:42,728] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,732] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,732] DEBUG - UpdateCache.update() : update [class Address], id [557082]
[2010-01-25 00:26:42,732] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,733] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,733] DEBUG - UpdateCache.update() : update [class Statistics], id [589835]
[2010-01-25 00:26:42,733] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,734] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,734] DEBUG - UpdateCache.update() : update [class Favorite], id [622616]
[2010-01-25 00:26:42,734] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,734] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,734] DEBUG - UpdateCache.update() : update [class Favorite], id [622617]
[2010-01-25 00:26:42,734] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,735] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,735] DEBUG - UpdateCache.update() : update [class Remover], id [655372]
[2010-01-25 00:26:42,735] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,736] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,736] DEBUG - UpdateCache.update() : update [class AddressBook], id [688140]
[2010-01-25 00:26:42,736] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,739] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,739] DEBUG - UpdateCache.update() : update [class Address], id [557082]
[2010-01-25 00:26:42,739] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,740] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,741] DEBUG - UpdateCache.update() : update [class Statistics], id [589835]
[2010-01-25 00:26:42,741] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,741] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,741] DEBUG - UpdateCache.update() : update [class Favorite], id [622616]
[2010-01-25 00:26:42,741] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,742] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,742] DEBUG - UpdateCache.update() : update [class Favorite], id [622617]
[2010-01-25 00:26:42,742] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,743] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,743] DEBUG - UpdateCache.update() : update [class Remover], id [655372]
[2010-01-25 00:26:42,743] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,743] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,743] DEBUG - XmlSerializer.save() : timing 15 at [cache]
[2010-01-25 00:26:42,759] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:42,759] DEBUG - XmlSerializer.save() : timing 16 at [save]
[2010-01-25 00:26:42,759] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:42,759] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,762] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,764] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,775] DEBUG - XmlSerializer.sqlLoad() : query [query.native.by.id]
[2010-01-25 00:26:42,775] DEBUG - XmlSerializer.sqlLoad() : sql [select {address_book.*} from address_book where id = ?]
[2010-01-25 00:26:42,820] DEBUG - XmlSerializer.sqlLoad() : timing 36 at [query]
[2010-01-25 00:26:42,822] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,827] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,828] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,838] DEBUG - XmlSerializer.save() : timing 17 at [extract]
[2010-01-25 00:26:42,839] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:42,839] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:42,839] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:42,840] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,840] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:42,840] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:42,841] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:42,841] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:42,841] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,841] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:42,841] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:42,841] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:42,842] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:26:42,842] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:42,842] DEBUG - UpdateCache.update() : update [class AddressBook], id [688141]
[2010-01-25 00:26:42,842] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,846] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,846] DEBUG - UpdateCache.update() : update [class Address], id [557083]
[2010-01-25 00:26:42,846] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,847] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,847] DEBUG - UpdateCache.update() : update [class Statistics], id [589836]
[2010-01-25 00:26:42,847] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,848] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,848] DEBUG - UpdateCache.update() : update [class Favorite], id [622618]
[2010-01-25 00:26:42,848] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,848] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,849] DEBUG - UpdateCache.update() : update [class Favorite], id [622619]
[2010-01-25 00:26:42,849] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,849] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,849] DEBUG - UpdateCache.update() : update [class Remover], id [655373]
[2010-01-25 00:26:42,849] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,850] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,850] DEBUG - UpdateCache.update() : update [class AddressBook], id [688141]
[2010-01-25 00:26:42,850] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,853] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,853] DEBUG - UpdateCache.update() : update [class Address], id [557083]
[2010-01-25 00:26:42,853] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,854] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,854] DEBUG - UpdateCache.update() : update [class Statistics], id [589836]
[2010-01-25 00:26:42,855] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,855] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,855] DEBUG - UpdateCache.update() : update [class Favorite], id [622618]
[2010-01-25 00:26:42,855] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,856] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,856] DEBUG - UpdateCache.update() : update [class Favorite], id [622619]
[2010-01-25 00:26:42,856] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,857] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,857] DEBUG - UpdateCache.update() : update [class Remover], id [655373]
[2010-01-25 00:26:42,857] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,857] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,857] DEBUG - XmlSerializer.save() : timing 15 at [cache]
[2010-01-25 00:26:42,881] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:42,881] DEBUG - XmlSerializer.save() : timing 24 at [save]
[2010-01-25 00:26:42,881] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:42,881] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,884] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,885] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,899] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:26:42,900] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:26:42,903] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-25 00:26:42,905] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,907] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,909] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,922] DEBUG - XmlSerializer.save() : timing 17 at [extract]
[2010-01-25 00:26:42,922] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:42,922] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:42,923] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:42,923] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,923] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:42,923] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:42,924] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:42,924] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:42,924] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:42,924] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:42,924] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:42,925] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:42,925] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:26:42,926] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:42,926] DEBUG - UpdateCache.update() : update [class AddressBook], id [688142]
[2010-01-25 00:26:42,926] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,929] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,929] DEBUG - UpdateCache.update() : update [class Address], id [557084]
[2010-01-25 00:26:42,929] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,930] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,930] DEBUG - UpdateCache.update() : update [class Statistics], id [589837]
[2010-01-25 00:26:42,930] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,931] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,931] DEBUG - UpdateCache.update() : update [class Favorite], id [622620]
[2010-01-25 00:26:42,931] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,932] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,932] DEBUG - UpdateCache.update() : update [class Favorite], id [622621]
[2010-01-25 00:26:42,932] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,933] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,933] DEBUG - UpdateCache.update() : update [class Remover], id [655374]
[2010-01-25 00:26:42,933] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,934] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,934] DEBUG - UpdateCache.update() : update [class AddressBook], id [688142]
[2010-01-25 00:26:42,934] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:42,937] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,937] DEBUG - UpdateCache.update() : update [class Address], id [557084]
[2010-01-25 00:26:42,937] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:42,938] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,938] DEBUG - UpdateCache.update() : update [class Statistics], id [589837]
[2010-01-25 00:26:42,938] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:42,939] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,939] DEBUG - UpdateCache.update() : update [class Favorite], id [622620]
[2010-01-25 00:26:42,939] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,940] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,940] DEBUG - UpdateCache.update() : update [class Favorite], id [622621]
[2010-01-25 00:26:42,940] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:42,940] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,940] DEBUG - UpdateCache.update() : update [class Remover], id [655374]
[2010-01-25 00:26:42,940] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:42,941] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:42,941] DEBUG - XmlSerializer.save() : timing 16 at [cache]
[2010-01-25 00:26:42,954] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:42,954] DEBUG - XmlSerializer.save() : timing 13 at [save]
[2010-01-25 00:26:42,954] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:42,954] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:42,958] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,959] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:42,969] DEBUG - XmlSerializer.sqlLoad() : query [query.multiple]
[2010-01-25 00:26:42,970] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ? or id in (:ids)]
[2010-01-25 00:26:43,002] DEBUG - XmlSerializer.sqlLoad() : timing 13 at [query]
[2010-01-25 00:26:43,004] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:43,006] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:43,007] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:43,019] DEBUG - XmlSerializer.save() : timing 16 at [extract]
[2010-01-25 00:26:43,019] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:43,019] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:43,020] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:43,021] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:43,021] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:43,021] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:43,021] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:43,022] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:43,022] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:43,022] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:43,022] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:43,023] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:43,024] DEBUG - XmlSerializer.save() : timing 5 at [storeAll]
[2010-01-25 00:26:43,024] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:43,025] DEBUG - UpdateCache.update() : update [class AddressBook], id [688143]
[2010-01-25 00:26:43,025] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:43,028] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,028] DEBUG - UpdateCache.update() : update [class Address], id [557085]
[2010-01-25 00:26:43,028] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:43,029] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,029] DEBUG - UpdateCache.update() : update [class Statistics], id [589838]
[2010-01-25 00:26:43,029] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:43,030] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,030] DEBUG - UpdateCache.update() : update [class Favorite], id [622622]
[2010-01-25 00:26:43,030] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:43,031] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,031] DEBUG - UpdateCache.update() : update [class Favorite], id [622623]
[2010-01-25 00:26:43,031] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:43,032] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,032] DEBUG - UpdateCache.update() : update [class Remover], id [655375]
[2010-01-25 00:26:43,032] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:43,033] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,033] DEBUG - UpdateCache.update() : update [class AddressBook], id [688143]
[2010-01-25 00:26:43,033] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:43,037] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,037] DEBUG - UpdateCache.update() : update [class Address], id [557085]
[2010-01-25 00:26:43,037] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:43,038] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,038] DEBUG - UpdateCache.update() : update [class Statistics], id [589838]
[2010-01-25 00:26:43,038] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:43,039] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,039] DEBUG - UpdateCache.update() : update [class Favorite], id [622622]
[2010-01-25 00:26:43,039] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:43,040] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,040] DEBUG - UpdateCache.update() : update [class Favorite], id [622623]
[2010-01-25 00:26:43,040] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:43,040] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,040] DEBUG - UpdateCache.update() : update [class Remover], id [655375]
[2010-01-25 00:26:43,040] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:43,041] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:43,041] DEBUG - XmlSerializer.save() : timing 17 at [cache]
[2010-01-25 00:26:43,056] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:43,057] DEBUG - XmlSerializer.save() : timing 15 at [save]
[2010-01-25 00:26:43,057] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:43,057] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:43,059] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:43,061] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,074] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:44,083] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,086] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,087] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,101] DEBUG - XmlSerializer.save() : timing 19 at [extract]
[2010-01-25 00:26:44,101] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:44,101] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:44,101] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:44,113] DEBUG - XmlCompare.next(): hit  <favorite user-id="25" id="622622"> vs.  <favorite user-id="30" id="622623">
[2010-01-25 00:26:44,114] DEBUG - XmlCompare.next(): hit   <name>gary</name> vs.   <name>jerryg</name>
[2010-01-25 00:26:44,115] DEBUG - XmlCompare.next(): hit  <favorite user-id="30" id="622623"> vs.  <favorite user-id="25" id="622622">
[2010-01-25 00:26:44,115] DEBUG - XmlCompare.next(): hit   <name>joe</name> vs.   <name>gary</name>
[2010-01-25 00:26:44,115] DEBUG - XmlCompare.compare() : [[688143:address-book, 622623:favorite, 622622:favorite]]
[2010-01-25 00:26:44,116] DEBUG - XmlSerializer.save() : timing 15 at [changed]
[2010-01-25 00:26:44,117] DEBUG - XmlSerializer().storeAll() : old [557085]
[2010-01-25 00:26:44,117] DEBUG - XmlSerializer().storeAll() : new [557085]
[2010-01-25 00:26:44,118] DEBUG - XmlSerializer().storeAll() : update timestamp on class Favorite for field name. New Val [jerryg], old [joe]
[2010-01-25 00:26:44,118] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [622623]
[2010-01-25 00:26:44,120] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [622622]
[2010-01-25 00:26:44,120] DEBUG - XmlSerializer().storeAll() : old [622622, 622623]
[2010-01-25 00:26:44,120] DEBUG - XmlSerializer().storeAll() : new [622623, 622622]
[2010-01-25 00:26:44,120] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field favorite. New Val [[Favorite : 622623, Favorite : 622622]], old [[Favorite : 622623, Favorite : 622622]]
[2010-01-25 00:26:44,121] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [688143]
[2010-01-25 00:26:44,121] DEBUG - XmlSerializer.save() : timing 5 at [storeAll]
[2010-01-25 00:26:44,121] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:44,121] DEBUG - UpdateCache.update() : update [class AddressBook], id [688143]
[2010-01-25 00:26:44,121] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:44,126] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,126] DEBUG - UpdateCache.update() : update [class Favorite], id [622623]
[2010-01-25 00:26:44,126] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:44,126] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,127] DEBUG - UpdateCache.update() : update [class Favorite], id [622622]
[2010-01-25 00:26:44,127] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:44,127] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,127] DEBUG - XmlSerializer.save() : timing 6 at [cache]
[2010-01-25 00:26:44,141] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:44,141] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:44,141] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:44,141] DEBUG - XmlSerializer.save() : timing 14 at [save]
[2010-01-25 00:26:44,141] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:44,141] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:26:44,141] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:26:44,145] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-25 00:26:44,146] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,149] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,150] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,163] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,171] DEBUG - XmlSerializer.save() : timing 8 at [extract]
[2010-01-25 00:26:44,171] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:44,172] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-25 00:26:44,172] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [851974]
[2010-01-25 00:26:44,173] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [851975]
[2010-01-25 00:26:44,173] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [851976]
[2010-01-25 00:26:44,173] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:44,173] DEBUG - XmlSerializer().storeAll() : new [851974, 851975, 851976]
[2010-01-25 00:26:44,174] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [884738]
[2010-01-25 00:26:44,174] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:44,174] DEBUG - XmlSerializer().storeAll() : new [884738]
[2010-01-25 00:26:44,174] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [917506]
[2010-01-25 00:26:44,174] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:44,174] DEBUG - XmlSerializer().storeAll() : new [917506]
[2010-01-25 00:26:44,174] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-25 00:26:44,175] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:26:44,176] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:44,176] DEBUG - UpdateCache.update() : update [class MixedKids], id [983042]
[2010-01-25 00:26:44,176] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:44,179] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,180] DEBUG - UpdateCache.update() : update [class Interleave], id [950274]
[2010-01-25 00:26:44,180] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:26:44,182] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,182] DEBUG - UpdateCache.update() : update [class KidOne], id [851974]
[2010-01-25 00:26:44,182] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:44,183] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,183] DEBUG - UpdateCache.update() : update [class KidOne], id [851975]
[2010-01-25 00:26:44,183] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:44,183] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,183] DEBUG - UpdateCache.update() : update [class KidOne], id [851976]
[2010-01-25 00:26:44,184] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:44,184] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,184] DEBUG - UpdateCache.update() : update [class KidTwo], id [884738]
[2010-01-25 00:26:44,184] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:44,188] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,188] DEBUG - UpdateCache.update() : update [class KidThree], id [917506]
[2010-01-25 00:26:44,188] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:26:44,189] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,189] DEBUG - UpdateCache.update() : update [class MixedKids], id [983042]
[2010-01-25 00:26:44,189] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:44,192] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,192] DEBUG - UpdateCache.update() : update [class KidOne], id [851974]
[2010-01-25 00:26:44,192] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:44,192] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,192] DEBUG - UpdateCache.update() : update [class KidOne], id [851975]
[2010-01-25 00:26:44,192] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:44,193] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,193] DEBUG - UpdateCache.update() : update [class KidOne], id [851976]
[2010-01-25 00:26:44,193] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:44,194] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,194] DEBUG - UpdateCache.update() : update [class KidTwo], id [884738]
[2010-01-25 00:26:44,194] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:44,194] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,194] DEBUG - UpdateCache.update() : update [class KidThree], id [917506]
[2010-01-25 00:26:44,194] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:26:44,195] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,195] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-25 00:26:44,212] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:44,212] DEBUG - XmlSerializer.save() : timing 17 at [save]
[2010-01-25 00:26:44,212] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:44,212] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,226] DEBUG - XmlSerializer.sqlLoad() : query [query.multi.by.id]
[2010-01-25 00:26:44,226] DEBUG - XmlSerializer.sqlLoad() : sql [from MixedKids where id = ?]
[2010-01-25 00:26:44,229] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-25 00:26:44,367] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,381] DEBUG - XmlSerializer.save() : timing 14 at [extract]
[2010-01-25 00:26:44,381] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:44,382] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:44,383] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:44,387] DEBUG - XmlCompare.next(): hit  <kid-one id="851974"> vs.  <kid-two id="884738">
[2010-01-25 00:26:44,387] DEBUG - XmlCompare.next(): hit   <title>kid1-1</title> vs.   <title>kid2-1</title>
[2010-01-25 00:26:44,387] DEBUG - XmlCompare.next(): hit  </kid-one> vs.  </kid-two>
[2010-01-25 00:26:44,388] DEBUG - XmlCompare.next(): hit  <kid-two id="884738"> vs.  <kid-one id="851974">
[2010-01-25 00:26:44,388] DEBUG - XmlCompare.next(): hit   <title>kid2-1</title> vs.   <title>kid1-1</title>
[2010-01-25 00:26:44,388] DEBUG - XmlCompare.next(): hit  </kid-two> vs.  </kid-one>
[2010-01-25 00:26:44,390] DEBUG - XmlCompare.compare() : [[884738:kid-two, 851974:kid-one, 983042:mixed-kids]]
[2010-01-25 00:26:44,390] DEBUG - XmlSerializer.save() : timing 8 at [changed]
[2010-01-25 00:26:44,391] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [851974]
[2010-01-25 00:26:44,393] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:44,393] DEBUG - XmlSerializer().storeAll() : new [851974, 851975, 851976]
[2010-01-25 00:26:44,394] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidOne. New Val [[KidOne : 851974, KidOne : 851975, KidOne : 851976]], old [[KidOne : 851974, KidOne : 851975, KidOne : 851976]]
[2010-01-25 00:26:44,395] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [884738]
[2010-01-25 00:26:44,396] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:44,396] DEBUG - XmlSerializer().storeAll() : new [884738]
[2010-01-25 00:26:44,396] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidTwo. New Val [[KidTwo : 884738]], old [[KidTwo : 884738]]
[2010-01-25 00:26:44,397] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:44,397] DEBUG - XmlSerializer().storeAll() : new [917506]
[2010-01-25 00:26:44,397] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidThree. New Val [[KidThree : 917506]], old [[KidThree : 917506]]
[2010-01-25 00:26:44,397] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [983042]
[2010-01-25 00:26:44,400] DEBUG - XmlSerializer.orderchange() : go [title:3556498,kidOne:-2046900762,kidTwo:-2046862904,kidOne:-2046900761,kidOne:-2046900760,kidThree:-789985638,] vs [title:3556498,kidTwo:-2046862904,kidOne:-2046900762,kidOne:-2046900761,kidOne:-2046900760,kidThree:-789985638,]
[2010-01-25 00:26:44,402] DEBUG - XmlSerializer.save() : timing 12 at [storeAll]
[2010-01-25 00:26:44,404] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:26:44,404] DEBUG - UpdateCache.update() : update [class MixedKids], id [983042]
[2010-01-25 00:26:44,404] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:26:44,407] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,407] DEBUG - UpdateCache.update() : update [class KidOne], id [851974]
[2010-01-25 00:26:44,407] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:26:44,408] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,408] DEBUG - UpdateCache.update() : update [class KidTwo], id [884738]
[2010-01-25 00:26:44,408] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:26:44,408] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,408] DEBUG - XmlSerializer.save() : timing 4 at [cache]
[2010-01-25 00:26:44,434] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:44,434] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:44,434] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:44,434] DEBUG - XmlSerializer.save() : timing 26 at [save]
[2010-01-25 00:26:44,434] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:44,460] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,465] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,466] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,479] DEBUG - XmlSerializer.save() : timing 19 at [extract]
[2010-01-25 00:26:44,479] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:44,479] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:44,480] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:44,480] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:44,480] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:44,480] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:44,481] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:44,482] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:44,482] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:44,482] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:44,482] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:44,482] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:44,483] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:26:44,483] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:44,483] DEBUG - UpdateCache.update() : update [class AddressBook], id [688144]
[2010-01-25 00:26:44,483] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:44,487] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,487] DEBUG - UpdateCache.update() : update [class Address], id [557086]
[2010-01-25 00:26:44,487] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:44,488] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,488] DEBUG - UpdateCache.update() : update [class Statistics], id [589839]
[2010-01-25 00:26:44,488] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:44,489] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,489] DEBUG - UpdateCache.update() : update [class Favorite], id [622624]
[2010-01-25 00:26:44,489] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:44,490] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,490] DEBUG - UpdateCache.update() : update [class Favorite], id [622625]
[2010-01-25 00:26:44,490] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:44,490] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,490] DEBUG - UpdateCache.update() : update [class Remover], id [655376]
[2010-01-25 00:26:44,490] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:44,491] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,491] DEBUG - UpdateCache.update() : update [class AddressBook], id [688144]
[2010-01-25 00:26:44,491] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:44,494] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,494] DEBUG - UpdateCache.update() : update [class Address], id [557086]
[2010-01-25 00:26:44,494] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:44,495] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,496] DEBUG - UpdateCache.update() : update [class Statistics], id [589839]
[2010-01-25 00:26:44,496] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:44,496] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,496] DEBUG - UpdateCache.update() : update [class Favorite], id [622624]
[2010-01-25 00:26:44,496] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:44,497] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,497] DEBUG - UpdateCache.update() : update [class Favorite], id [622625]
[2010-01-25 00:26:44,497] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:44,498] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,498] DEBUG - UpdateCache.update() : update [class Remover], id [655376]
[2010-01-25 00:26:44,498] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:44,498] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,498] DEBUG - XmlSerializer.save() : timing 15 at [cache]
[2010-01-25 00:26:44,524] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:44,524] DEBUG - XmlSerializer.save() : timing 26 at [save]
[2010-01-25 00:26:44,524] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:44,525] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,528] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,529] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,550] DEBUG - XmlSerializer.remove() : Address, id 557086
[2010-01-25 00:26:44,551] DEBUG - UpdateCache.updateCache() : process [select parent from AddressBook parent join parent.address as address where address.id = 557086]
[2010-01-25 00:26:44,611] DEBUG - UpdateCache.update() : update [class AddressBook], id [688144]
[2010-01-25 00:26:44,611] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:44,615] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,615] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:26:44,616] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:26:44,620] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-25 00:26:44,621] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,624] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,626] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,642] DEBUG - XmlSerializer.remove() : Remover, id 655376
[2010-01-25 00:26:44,643] DEBUG - UpdateCache.updateCache() : process [select parent from AddressBook parent join parent.remover as remover where remover.id = 655376]
[2010-01-25 00:26:44,680] DEBUG - UpdateCache.update() : update [class AddressBook], id [688144]
[2010-01-25 00:26:44,680] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:44,684] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,684] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:26:44,685] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:26:44,691] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-25 00:26:44,691] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,694] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,695] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,710] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,713] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,714] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,740] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,742] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,744] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,762] DEBUG - XmlSerializer.save() : timing 23 at [extract]
[2010-01-25 00:26:44,762] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:44,762] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:44,763] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:26:44,763] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:44,763] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:44,764] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:26:44,764] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:44,764] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:26:44,764] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:44,764] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:44,765] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:26:44,765] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:26:44,765] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:26:44,766] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:44,766] DEBUG - UpdateCache.update() : update [class AddressBook], id [688145]
[2010-01-25 00:26:44,766] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:44,769] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,769] DEBUG - UpdateCache.update() : update [class Address], id [557087]
[2010-01-25 00:26:44,769] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:44,770] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,771] DEBUG - UpdateCache.update() : update [class Statistics], id [589840]
[2010-01-25 00:26:44,771] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:44,771] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,771] DEBUG - UpdateCache.update() : update [class Favorite], id [622626]
[2010-01-25 00:26:44,771] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:44,772] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,772] DEBUG - UpdateCache.update() : update [class Favorite], id [622627]
[2010-01-25 00:26:44,772] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:44,773] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,773] DEBUG - UpdateCache.update() : update [class Remover], id [655377]
[2010-01-25 00:26:44,773] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:44,773] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,774] DEBUG - UpdateCache.update() : update [class AddressBook], id [688145]
[2010-01-25 00:26:44,774] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:44,777] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,777] DEBUG - UpdateCache.update() : update [class Address], id [557087]
[2010-01-25 00:26:44,777] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:26:44,778] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,778] DEBUG - UpdateCache.update() : update [class Statistics], id [589840]
[2010-01-25 00:26:44,778] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:26:44,779] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,779] DEBUG - UpdateCache.update() : update [class Favorite], id [622626]
[2010-01-25 00:26:44,779] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:44,780] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,780] DEBUG - UpdateCache.update() : update [class Favorite], id [622627]
[2010-01-25 00:26:44,780] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:26:44,780] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,780] DEBUG - UpdateCache.update() : update [class Remover], id [655377]
[2010-01-25 00:26:44,780] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:26:44,781] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:44,781] DEBUG - XmlSerializer.save() : timing 15 at [cache]
[2010-01-25 00:26:44,800] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:44,800] DEBUG - XmlSerializer.save() : timing 19 at [save]
[2010-01-25 00:26:44,800] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:44,812] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,812] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,813] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:44,815] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,816] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,816] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,821] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,827] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,829] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:26:44,848] DEBUG - XmlSerializer.save() : timing 36 at [extract]
[2010-01-25 00:26:44,848] DEBUG - LockItem.lock() : lock on Thread-7
[2010-01-25 00:26:44,849] DEBUG - XmlSerializer.save() : timing 37 at [extract]
[2010-01-25 00:26:44,849] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:44,850] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:44,855] DEBUG - XmlSerializer.save() : timing 42 at [extract]
[2010-01-25 00:26:44,860] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:26:44,860] DEBUG - XmlSerializer.save() : timing 11 at [changed]
[2010-01-25 00:26:44,861] DEBUG - XmlSerializer.save() : timing 1 at [storeAll]
[2010-01-25 00:26:44,861] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:44,861] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:26:44,862] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:44,862] DEBUG - LockItem.unlock() : unlocked on Thread-7
[2010-01-25 00:26:44,862] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:44,862] DEBUG - XmlSerializer.save() : timing 1 at [save]
[2010-01-25 00:26:44,862] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:44,950] DEBUG - LockItem.lock() : lock on Thread-5
[2010-01-25 00:26:44,951] DEBUG - XmlSerializer.save() : timing 102 at [lock]
[2010-01-25 00:26:44,951] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:44,971] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:26:44,971] DEBUG - XmlSerializer.save() : timing 20 at [changed]
[2010-01-25 00:26:44,971] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-25 00:26:44,972] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:44,972] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:26:44,973] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:44,973] DEBUG - LockItem.unlock() : unlocked on Thread-5
[2010-01-25 00:26:44,973] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:44,973] DEBUG - XmlSerializer.save() : timing 1 at [save]
[2010-01-25 00:26:44,973] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:45,057] DEBUG - LockItem.lock() : lock on Thread-9
[2010-01-25 00:26:45,059] DEBUG - XmlSerializer.save() : timing 204 at [lock]
[2010-01-25 00:26:45,060] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:26:45,078] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:26:45,078] DEBUG - XmlSerializer.save() : timing 19 at [changed]
[2010-01-25 00:26:45,078] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-25 00:26:45,079] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:45,079] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:26:45,079] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:45,080] DEBUG - LockItem.unlock() : unlocked on Thread-9
[2010-01-25 00:26:45,080] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:45,080] DEBUG - XmlSerializer.save() : timing 1 at [save]
[2010-01-25 00:26:45,080] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:45,113] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:45,115] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:26:45,122] DEBUG - XmlSerializer.save() : timing 9 at [extract]
[2010-01-25 00:26:45,123] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:45,123] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:45,124] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:26:45,124] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:26:45,124] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:45,124] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:45,124] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:26:45,125] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:26:45,125] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:45,125] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:45,126] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:26:45,126] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:45,126] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:26:45,126] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:26:45,126] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:26:45,127] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:45,127] DEBUG - UpdateCache.update() : update [class Levelone], id [819201]
[2010-01-25 00:26:45,127] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:45,130] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,130] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786434]
[2010-01-25 00:26:45,130] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:45,131] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,131] DEBUG - UpdateCache.update() : update [class Levelthree], id [753667]
[2010-01-25 00:26:45,131] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,132] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,132] DEBUG - UpdateCache.update() : update [class Levelthree], id [753668]
[2010-01-25 00:26:45,132] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,132] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,132] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786435]
[2010-01-25 00:26:45,132] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:45,133] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,133] DEBUG - UpdateCache.update() : update [class Levelthree], id [753669]
[2010-01-25 00:26:45,133] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,134] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,134] DEBUG - UpdateCache.update() : update [class Levelone], id [819201]
[2010-01-25 00:26:45,134] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:45,136] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,136] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786434]
[2010-01-25 00:26:45,136] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:45,138] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,138] DEBUG - UpdateCache.update() : update [class Levelthree], id [753667]
[2010-01-25 00:26:45,138] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,138] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,138] DEBUG - UpdateCache.update() : update [class Levelthree], id [753668]
[2010-01-25 00:26:45,138] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,139] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,139] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786435]
[2010-01-25 00:26:45,139] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:45,140] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,140] DEBUG - UpdateCache.update() : update [class Levelthree], id [753669]
[2010-01-25 00:26:45,140] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,141] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,141] DEBUG - XmlSerializer.save() : timing 14 at [cache]
[2010-01-25 00:26:45,161] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:45,162] DEBUG - XmlSerializer.save() : timing 21 at [save]
[2010-01-25 00:26:45,162] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:45,165] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:45,165] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:45,166] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:45,167] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:26:45,168] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:26:45,182] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:26:45,185] DEBUG - XmlSerializer.save() : timing 21 at [extract]
[2010-01-25 00:26:45,185] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:45,185] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:45,187] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [753667]
[2010-01-25 00:26:45,187] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [753668]
[2010-01-25 00:26:45,188] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [753669]
[2010-01-25 00:26:45,188] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:45,188] DEBUG - XmlSerializer().storeAll() : new [753667, 753668, 753669]
[2010-01-25 00:26:45,188] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:26:45,188] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:45,188] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:45,188] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:26:45,188] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:26:45,189] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:45,189] DEBUG - UpdateCache.update() : update [class Levelone], id [819202]
[2010-01-25 00:26:45,189] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:45,192] DEBUG - XmlSerializer.save() : timing 26 at [extract]
[2010-01-25 00:26:45,192] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:45,192] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:45,193] DEBUG - XmlSerializer.save() : timing 28 at [extract]
[2010-01-25 00:26:45,193] DEBUG - LockItem.lock() : lock on Thread-11
[2010-01-25 00:26:45,193] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:45,193] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:45,193] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [753667]
[2010-01-25 00:26:45,194] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [753668]
[2010-01-25 00:26:45,194] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [753669]
[2010-01-25 00:26:45,194] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:45,194] DEBUG - XmlSerializer().storeAll() : new [753667, 753668, 753669]
[2010-01-25 00:26:45,194] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:26:45,194] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:26:45,194] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:26:45,194] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:26:45,194] DEBUG - XmlSerializer.save() : timing 2 at [storeAll]
[2010-01-25 00:26:45,195] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:26:45,195] DEBUG - UpdateCache.update() : update [class Levelone], id [819203]
[2010-01-25 00:26:45,195] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:45,196] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,196] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786436]
[2010-01-25 00:26:45,196] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:45,200] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,200] DEBUG - UpdateCache.update() : update [class Levelthree], id [753667]
[2010-01-25 00:26:45,200] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,200] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,200] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786437]
[2010-01-25 00:26:45,200] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:45,200] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,201] DEBUG - UpdateCache.update() : update [class Levelthree], id [753668]
[2010-01-25 00:26:45,201] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,201] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,201] DEBUG - UpdateCache.update() : update [class Levelthree], id [753669]
[2010-01-25 00:26:45,201] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,202] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,202] DEBUG - UpdateCache.update() : update [class Levelone], id [819202]
[2010-01-25 00:26:45,202] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:45,202] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,202] DEBUG - UpdateCache.update() : update [class Levelthree], id [753667]
[2010-01-25 00:26:45,202] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,203] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,203] DEBUG - UpdateCache.update() : update [class Levelthree], id [753668]
[2010-01-25 00:26:45,203] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,203] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,203] DEBUG - UpdateCache.update() : update [class Levelthree], id [753669]
[2010-01-25 00:26:45,203] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:26:45,204] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:26:45,204] DEBUG - XmlSerializer.save() : timing 11 at [changed]
[2010-01-25 00:26:45,204] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-25 00:26:45,204] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,204] DEBUG - UpdateCache.update() : update [class Levelone], id [819203]
[2010-01-25 00:26:45,204] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:26:45,204] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:45,204] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:26:45,205] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:26:45,205] DEBUG - LockItem.unlock() : unlocked on Thread-11
[2010-01-25 00:26:45,205] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:45,205] DEBUG - XmlSerializer.save() : timing 1 at [save]
[2010-01-25 00:26:45,205] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:45,206] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,206] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786437]
[2010-01-25 00:26:45,207] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:45,207] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,207] DEBUG - UpdateCache.update() : update [class Leveltwo], id [786436]
[2010-01-25 00:26:45,207] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:26:45,208] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,208] DEBUG - XmlSerializer.save() : timing 13 at [cache]
[2010-01-25 00:26:45,208] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,208] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-25 00:26:45,232] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:45,232] DEBUG - LockItem.unlock() : unlocked on Thread-13
[2010-01-25 00:26:45,232] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:45,232] DEBUG - XmlSerializer.save() : timing 24 at [save]
[2010-01-25 00:26:45,232] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:45,233] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:45,233] DEBUG - LockItem.unlock() : unlocked on Thread-15
[2010-01-25 00:26:45,233] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:45,233] DEBUG - XmlSerializer.save() : timing 25 at [save]
[2010-01-25 00:26:45,233] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:45,266] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:45,274] DEBUG - XmlSerializer.save() : timing 8 at [extract]
[2010-01-25 00:26:45,274] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:26:45,274] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:26:45,275] DEBUG - XmlSerializer().storeAll() :  save [BoolTest], id [null]
[2010-01-25 00:26:45,279] DEBUG - XmlSerializer.save() : timing 5 at [storeAll]
[2010-01-25 00:26:45,279] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:45,279] DEBUG - UpdateCache.update() : update [class BoolTest], id [1015808]
[2010-01-25 00:26:45,279] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:26:45,280] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,280] DEBUG - UpdateCache.update() : update [class BoolTest], id [1015808]
[2010-01-25 00:26:45,280] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:26:45,281] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,281] DEBUG - XmlSerializer.save() : timing 2 at [cache]
[2010-01-25 00:26:45,294] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:26:45,294] DEBUG - XmlSerializer.save() : timing 13 at [save]
[2010-01-25 00:26:45,294] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:45,294] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:45,299] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:26:45,300] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:26:45,305] DEBUG - XmlSerializer.save() : timing 5 at [extract]
[2010-01-25 00:26:45,305] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:26:45,306] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:26:45,306] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:26:45,308] DEBUG - XmlCompare.next(): hit <bool-test id="1015808"> vs. <bool-test available="false" id="1015808">
[2010-01-25 00:26:45,308] DEBUG - XmlCompare.compare() : [[1015808:bool-test]]
[2010-01-25 00:26:45,309] DEBUG - XmlSerializer.save() : timing 3 at [changed]
[2010-01-25 00:26:45,309] DEBUG - XmlSerializer().storeAll() : update timestamp on class BoolTest for field available. New Val [false], old [null]
[2010-01-25 00:26:45,310] DEBUG - XmlSerializer().storeAll() :  save [BoolTest], id [1015808]
[2010-01-25 00:26:45,310] DEBUG - XmlSerializer.save() : timing 1 at [storeAll]
[2010-01-25 00:26:45,310] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:26:45,310] DEBUG - UpdateCache.update() : update [class BoolTest], id [1015808]
[2010-01-25 00:26:45,310] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:26:45,311] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:26:45,311] DEBUG - XmlSerializer.save() : timing 1 at [cache]
[2010-01-25 00:26:45,319] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:26:45,319] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:26:45,319] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:26:45,320] DEBUG - XmlSerializer.save() : timing 9 at [save]
[2010-01-25 00:26:45,320] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:26:47,346] DEBUG - MultiSort.sort() : timing 250 at [prep]
[2010-01-25 00:26:47,414] DEBUG - MultiSort.sort() : timing 79 at [sort]
[2010-01-25 00:26:47,435] DEBUG - MultiSort.sort() : timing 4 at [prep]
[2010-01-25 00:26:47,437] DEBUG - MultiSort.sort() : timing 2 at [sort]
[2010-01-25 00:26:47,457] DEBUG - MultiSort.sort() : timing 1 at [prep]
[2010-01-25 00:26:47,460] DEBUG - MultiSort.sort() : timing 3 at [sort]
[2010-01-25 00:26:47,474] DEBUG - MultiSort.sort() : timing 3 at [prep]
[2010-01-25 00:26:47,476] DEBUG - MultiSort.sort() : timing 2 at [sort]
[2010-01-25 00:26:47,496] DEBUG - MultiSort.sort() : timing 2 at [prep]
[2010-01-25 00:26:47,499] DEBUG - MultiSort.sort() : timing 3 at [sort]
[2010-01-25 00:26:49,587] DEBUG - XmlCompare.next(): hit             <name>one</name> vs.             <name>two</name>
[2010-01-25 00:26:49,600] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:26:49,619] DEBUG - XmlCompare.next(): hit             <display-element id="6684672"> vs.             <display-element id="6684672" blaa="yo">
[2010-01-25 00:26:49,624] DEBUG - XmlCompare.next(): hit                     <value>Topper</value> vs.                     <value>Top</value>
[2010-01-25 00:26:49,629] DEBUG - XmlCompare.next(): hit             <display-element id="6684674" blaa="diff1"> vs.             <display-element id="6684674" blaa="diff2">
[2010-01-25 00:26:49,631] DEBUG - XmlCompare.next(): hit         </wrap> vs.         </fap>
[2010-01-25 00:26:49,631] DEBUG - XmlCompare.compare() : [[6684672:display-element, 123:wrap, 456:block, 6684674:display-element]]
[2010-01-25 00:26:49,639] DEBUG - XmlCompare.next(): hit         </wrap> vs.             <display-element blaa="diff">
[2010-01-25 00:26:49,639] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:26:49,666] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:26:49,673] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:26:49,686] DEBUG - XmlCompare.next(): hit             <display-element id="6684674" blaa="diff"> vs. null
[2010-01-25 00:26:49,688] DEBUG - XmlCompare.next(): hit             </display-element> vs. null
[2010-01-25 00:26:49,691] DEBUG - XmlCompare.next(): hit         </wrap> vs. null
[2010-01-25 00:26:49,692] DEBUG - XmlCompare.compare() : [[123:wrap, 6684674:display-element]]
[2010-01-25 00:26:49,727] DEBUG - XmlCompare.next(): hit             <display-element id="6684673" blaa="old"> vs.             <display-element id="6684674" blaa="same">
[2010-01-25 00:26:49,731] DEBUG - XmlCompare.next(): hit         </wrap> vs.             <display-element blaa="new">
[2010-01-25 00:26:49,732] DEBUG - XmlCompare.compare() : [[123:wrap, 6684673:display-element]]
[2010-01-25 00:26:49,746] DEBUG - XmlCompare.next(): hit       <kid-two id="13828096"> vs.       <kid-one id="13795329">
[2010-01-25 00:26:49,746] DEBUG - XmlCompare.next(): hit        <title>kid2-1</title> vs.        <title>kid1-2</title>
[2010-01-25 00:26:49,747] DEBUG - XmlCompare.next(): hit       </kid-two> vs.       </kid-one>
[2010-01-25 00:26:49,747] DEBUG - XmlCompare.next(): hit       <kid-one id="13795329"> vs.       <kid-one id="13795330">
[2010-01-25 00:26:49,749] DEBUG - XmlCompare.next(): hit        <title>kid1-2</title> vs.        <title>kid1-3</title>
[2010-01-25 00:26:49,757] DEBUG - XmlCompare.next(): hit       <kid-one id="13795330"> vs.       <kid-two id="13828096">
[2010-01-25 00:26:49,757] DEBUG - XmlCompare.next(): hit        <title>kid1-3</title> vs.        <title>kid2-1</title>
[2010-01-25 00:26:49,758] DEBUG - XmlCompare.next(): hit       </kid-one> vs.       </kid-two>
[2010-01-25 00:26:49,760] DEBUG - XmlCompare.compare() : [[13795329:kid-one, 13828096:kid-two, 13926400:mixed-kids, 13795330:kid-one]]
[2010-01-25 00:26:49,762] INFO  - XmlCompare.compare() : null left or right
[2010-01-25 00:26:49,762] DEBUG - XmlCompare.compare() : left null
[2010-01-25 00:26:49,762] DEBUG - XmlCompare.compare() : right null
[2010-01-25 00:26:49,764] INFO  - XmlCompare.compare() : null left or right
[2010-01-25 00:26:49,764] DEBUG - XmlCompare.compare() : left </xml>
[2010-01-25 00:26:49,764] DEBUG - XmlCompare.compare() : right null
[2010-01-25 00:26:49,766] INFO  - XmlCompare.compare() : null left or right
[2010-01-25 00:26:49,766] DEBUG - XmlCompare.compare() : left null
[2010-01-25 00:26:49,766] DEBUG - XmlCompare.compare() : right </xml>
[2010-01-25 00:28:56,735] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Test { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = []

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['foo','bar','created','lastUpdated',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        foo(nullable : false,)
        bar(nullable : false,)
        created(nullable : false,)
        lastUpdated(nullable : false,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <foo nullable ="false"/>
            <bar nullable ="false"/>
            <created nullable ="false"/>
            <lastUpdated nullable ="false"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String foo
    String bar
    Date created
    Date lastUpdated


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Test".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:28:56,973] DEBUG - DomainObjectLoader.injectIdProperty() : adding property [id] to class [Test]
[2010-01-25 00:28:56,973] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Test]
[2010-01-25 00:28:56,973] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Test]
[2010-01-25 00:28:56,974] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:28:57,073] DEBUG - PersistenceLoader.addBaseClass() : load Test
[2010-01-25 00:28:57,296] INFO  - Hibernate 3.3.1.GA
[2010-01-25 00:28:57,301] INFO  - hibernate.properties not found
[2010-01-25 00:28:57,304] INFO  - Bytecode provider name : javassist
[2010-01-25 00:28:57,308] INFO  - using JDK 1.4 java.sql.Timestamp handling
[2010-01-25 00:28:57,365] INFO  - configuring from url: file:/Users/rgrey/Work/persistence/etc/hibernate.cfg.xml
[2010-01-25 00:28:57,449] INFO  - Configured SessionFactory: null
[2010-01-25 00:28:57,476] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:28:57,527] INFO  - Running hbm2ddl schema update
[2010-01-25 00:28:57,527] INFO  - fetching database metadata
[2010-01-25 00:28:57,531] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:28:57,531] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:28:57,532] INFO  - autocommit mode: false
[2010-01-25 00:28:57,775] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:28:57,776] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:28:59,009] INFO  - updating schema
[2010-01-25 00:28:59,832] INFO  - table found: .APP.TEST
[2010-01-25 00:28:59,832] INFO  - columns: [foo, created, bar, xmlcache, last_updated, id, version]
[2010-01-25 00:28:59,832] INFO  - foreign keys: []
[2010-01-25 00:28:59,832] INFO  - indexes: [sql100124042643800]
[2010-01-25 00:28:59,881] INFO  - table found: .APP.HIBERNATE_UNIQUE_KEY
[2010-01-25 00:28:59,881] INFO  - columns: [next_hi]
[2010-01-25 00:28:59,881] INFO  - foreign keys: []
[2010-01-25 00:28:59,881] INFO  - indexes: []
[2010-01-25 00:28:59,883] INFO  - schema update complete
[2010-01-25 00:28:59,884] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:28:59,884] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:28:59,884] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:28:59,889] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:28:59,889] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:28:59,889] INFO  - autocommit mode: false
[2010-01-25 00:28:59,889] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:28:59,889] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:28:59,890] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-25 00:28:59,891] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-25 00:28:59,893] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:28:59,895] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-25 00:28:59,896] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-25 00:28:59,896] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-25 00:28:59,896] INFO  - Automatic session close at end of transaction: disabled
[2010-01-25 00:28:59,899] INFO  - Scrollable result sets: enabled
[2010-01-25 00:28:59,900] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-25 00:28:59,900] INFO  - Connection release mode: auto
[2010-01-25 00:28:59,900] INFO  - Maximum outer join fetch depth: 1
[2010-01-25 00:28:59,900] INFO  - Default batch fetch size: 1
[2010-01-25 00:28:59,900] INFO  - Generate SQL with comments: disabled
[2010-01-25 00:28:59,900] INFO  - Order SQL updates by primary key: disabled
[2010-01-25 00:28:59,901] INFO  - Order SQL inserts for batching: disabled
[2010-01-25 00:28:59,901] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-25 00:28:59,902] INFO  - Using ASTQueryTranslatorFactory
[2010-01-25 00:28:59,903] INFO  - Query language substitutions: {}
[2010-01-25 00:28:59,903] INFO  - JPA-QL strict compliance: disabled
[2010-01-25 00:28:59,903] INFO  - Second-level cache: enabled
[2010-01-25 00:28:59,903] INFO  - Query cache: enabled
[2010-01-25 00:28:59,906] INFO  - Cache region factory : org.hibernate.cache.impl.bridge.RegionFactoryCacheProviderBridge
[2010-01-25 00:28:59,907] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-25 00:28:59,909] INFO  - Optimize cache for minimal puts: disabled
[2010-01-25 00:28:59,909] INFO  - Cache region prefix: arv
[2010-01-25 00:28:59,909] INFO  - Structured second-level cache entries: disabled
[2010-01-25 00:28:59,909] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-25 00:28:59,912] INFO  - Statistics: disabled
[2010-01-25 00:28:59,912] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-25 00:28:59,913] INFO  - Default entity-mode: pojo
[2010-01-25 00:28:59,913] INFO  - Named query checking : enabled
[2010-01-25 00:28:59,956] INFO  - building session factory
[2010-01-25 00:28:59,994] WARN  - Could not find configuration [arv.Test]; using defaults.
[2010-01-25 00:29:00,232] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:29:00,359] INFO  - Not binding factory to JNDI, no JNDI name configured
[2010-01-25 00:29:00,360] INFO  - starting update timestamps cache at region: arv.org.hibernate.cache.UpdateTimestampsCache
[2010-01-25 00:29:00,361] WARN  - Could not find configuration [arv.org.hibernate.cache.UpdateTimestampsCache]; using defaults.
[2010-01-25 00:29:00,363] INFO  - starting query cache at region: arv.org.hibernate.cache.StandardQueryCache
[2010-01-25 00:29:00,363] WARN  - Could not find configuration [arv.org.hibernate.cache.StandardQueryCache]; using defaults.
[2010-01-25 00:29:00,365] DEBUG - PersistenceLoader.load() : loaded 1 class(es)
[2010-01-25 00:29:00,496] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:29:00,496] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:29:00,511] INFO  - Save ID [1048576]
[2010-01-25 00:29:00,563] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:29:00,563] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:29:00,567] INFO  - Loaded Object [Test : 1048576]
[2010-01-25 00:29:00,567] INFO  - Loaded Value [blaa]
[2010-01-25 00:29:02,728] INFO  - SyncLock.run(): id 7, running 14, priorirty 100
[2010-01-25 00:29:02,729] INFO  - SyncLock.run(): id 3, running 14, priorirty 100
[2010-01-25 00:29:02,730] INFO  - SyncLock.run(): id 4, running 14, priorirty 500
[2010-01-25 00:29:02,730] INFO  - SyncLock.run(): id 8, running 14, priorirty 500
[2010-01-25 00:29:02,729] INFO  - SyncLock.run(): id 6, running 14, priorirty 500
[2010-01-25 00:29:02,729] INFO  - SyncLock.run(): id 1, running 14, priorirty 100
[2010-01-25 00:29:02,729] INFO  - SyncLock.run(): id 11, running 14, priorirty 100
[2010-01-25 00:29:02,729] INFO  - SyncLock.run(): id 13, running 14, priorirty 100
[2010-01-25 00:29:02,729] INFO  - SyncLock.run(): id 9, running 14, priorirty 100
[2010-01-25 00:29:02,729] INFO  - SyncLock.run(): id 10, running 14, priorirty 500
[2010-01-25 00:29:02,729] INFO  - SyncLock.run(): id 12, running 14, priorirty 500
[2010-01-25 00:29:02,728] INFO  - SyncLock.run(): id 2, running 14, priorirty 500
[2010-01-25 00:29:02,729] INFO  - SyncLock.run(): id 5, running 14, priorirty 100
[2010-01-25 00:29:02,729] INFO  - SyncLock.run(): id 0, running 14, priorirty 500
[2010-01-25 00:29:02,746] DEBUG - LockItem.lock() : lock on Thread-1
[2010-01-25 00:29:02,746] DEBUG - LockItem.lock() : lock on Thread-14
[2010-01-25 00:29:02,955] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:29:02,955] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:29:02,955] DEBUG - LockItem.unlock() : unlocked on Thread-14
[2010-01-25 00:29:02,955] DEBUG - LockItem.unlock() : unlocked on Thread-1
[2010-01-25 00:29:02,956] DEBUG - LockItem.unlock() : 2 remain
[2010-01-25 00:29:02,957] INFO  - SyncLock.run(): finish id 0, count 13
[2010-01-25 00:29:02,963] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:02,964] INFO  - SyncLock.run(): finish id 13, count 12
[2010-01-25 00:29:03,042] DEBUG - LockItem.lock() : lock on Thread-12
[2010-01-25 00:29:03,244] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:03,244] DEBUG - LockItem.unlock() : unlocked on Thread-12
[2010-01-25 00:29:03,244] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:03,244] INFO  - SyncLock.run(): finish id 11, count 11
[2010-01-25 00:29:03,245] DEBUG - LockItem.lock() : lock on Thread-7
[2010-01-25 00:29:03,446] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:03,446] DEBUG - LockItem.unlock() : unlocked on Thread-7
[2010-01-25 00:29:03,449] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:03,449] INFO  - SyncLock.run(): finish id 6, count 10
[2010-01-25 00:29:03,449] DEBUG - LockItem.lock() : lock on Thread-10
[2010-01-25 00:29:03,650] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:03,650] DEBUG - LockItem.unlock() : unlocked on Thread-10
[2010-01-25 00:29:03,650] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:03,650] INFO  - SyncLock.run(): finish id 9, count 9
[2010-01-25 00:29:03,650] DEBUG - LockItem.lock() : lock on Thread-2
[2010-01-25 00:29:03,851] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:03,851] DEBUG - LockItem.unlock() : unlocked on Thread-2
[2010-01-25 00:29:03,851] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:03,851] INFO  - SyncLock.run(): finish id 1, count 8
[2010-01-25 00:29:03,851] DEBUG - LockItem.lock() : lock on Thread-8
[2010-01-25 00:29:04,052] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:04,052] DEBUG - LockItem.unlock() : unlocked on Thread-8
[2010-01-25 00:29:04,053] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:04,053] INFO  - SyncLock.run(): finish id 7, count 7
[2010-01-25 00:29:04,151] DEBUG - LockItem.lock() : lock on Thread-6
[2010-01-25 00:29:04,352] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:04,353] DEBUG - LockItem.unlock() : unlocked on Thread-6
[2010-01-25 00:29:04,353] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:04,353] INFO  - SyncLock.run(): finish id 5, count 6
[2010-01-25 00:29:04,453] DEBUG - LockItem.lock() : lock on Thread-4
[2010-01-25 00:29:04,654] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:04,654] DEBUG - LockItem.unlock() : unlocked on Thread-4
[2010-01-25 00:29:04,654] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:04,654] INFO  - SyncLock.run(): finish id 3, count 5
[2010-01-25 00:29:04,748] DEBUG - LockItem.lock() : lock on Thread-11
[2010-01-25 00:29:04,949] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:04,949] DEBUG - LockItem.unlock() : unlocked on Thread-11
[2010-01-25 00:29:04,949] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:04,950] INFO  - SyncLock.run(): finish id 10, count 4
[2010-01-25 00:29:05,248] DEBUG - LockItem.lock() : lock on Thread-3
[2010-01-25 00:29:05,450] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:05,450] DEBUG - LockItem.unlock() : unlocked on Thread-3
[2010-01-25 00:29:05,450] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:05,450] INFO  - SyncLock.run(): finish id 2, count 3
[2010-01-25 00:29:05,749] DEBUG - LockItem.lock() : lock on Thread-13
[2010-01-25 00:29:05,950] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:05,950] DEBUG - LockItem.unlock() : unlocked on Thread-13
[2010-01-25 00:29:05,950] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:05,950] INFO  - SyncLock.run(): finish id 12, count 2
[2010-01-25 00:29:06,250] DEBUG - LockItem.lock() : lock on Thread-5
[2010-01-25 00:29:06,451] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:06,451] DEBUG - LockItem.unlock() : unlocked on Thread-5
[2010-01-25 00:29:06,451] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:06,451] INFO  - SyncLock.run(): finish id 4, count 1
[2010-01-25 00:29:06,750] DEBUG - LockItem.lock() : lock on Thread-9
[2010-01-25 00:29:06,952] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:06,952] DEBUG - LockItem.unlock() : unlocked on Thread-9
[2010-01-25 00:29:06,952] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:06,952] INFO  - SyncLock.run(): finish id 8, count 0
[2010-01-25 00:29:07,283] INFO  - SyncLock.run(): id 0, running 2, priorirty 1000
[2010-01-25 00:29:07,285] INFO  - SyncLock.run(): id 1, running 3, priorirty 1000
[2010-01-25 00:29:07,286] INFO  - SyncLock.run(): id 2, running 6, priorirty 1000
[2010-01-25 00:29:07,286] INFO  - SyncLock.run(): id 4, running 6, priorirty 1000
[2010-01-25 00:29:07,287] INFO  - SyncLock.run(): id 3, running 6, priorirty 1000
[2010-01-25 00:29:07,288] INFO  - SyncLock.run(): id 5, running 6, priorirty 1000
[2010-01-25 00:29:07,288] DEBUG - LockItem.lock() : lock on Thread-21
[2010-01-25 00:29:07,289] DEBUG - LockItem.lock() : lock on Thread-16
[2010-01-25 00:29:07,489] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:29:07,490] DEBUG - LockItem.unlock() : unlocked on Thread-21
[2010-01-25 00:29:07,490] DEBUG - LockItem.unlock() : 2 remain
[2010-01-25 00:29:07,490] INFO  - SyncLock.run(): finish id 5, count 5
[2010-01-25 00:29:07,493] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:07,493] DEBUG - LockItem.unlock() : unlocked on Thread-16
[2010-01-25 00:29:07,493] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:07,494] INFO  - SyncLock.run(): finish id 0, count 4
[2010-01-25 00:29:08,291] DEBUG - LockItem.lock() : lock on Thread-17
[2010-01-25 00:29:08,306] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:08,306] DEBUG - LockItem.unlock() : unlocked on Thread-18
[2010-01-25 00:29:08,306] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:08,306] DEBUG - LockItem.unlock() : unlocked on Thread-19
[2010-01-25 00:29:08,306] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:08,307] INFO  - SyncLock.run(): finish id 2, count 3
[2010-01-25 00:29:08,306] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:08,307] DEBUG - LockItem.unlock() : unlocked on Thread-20
[2010-01-25 00:29:08,307] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:08,307] INFO  - SyncLock.run(): finish id 4, count 2
[2010-01-25 00:29:08,307] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:08,307] INFO  - SyncLock.run(): finish id 3, count 1
[2010-01-25 00:29:08,493] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:08,493] DEBUG - LockItem.unlock() : unlocked on Thread-17
[2010-01-25 00:29:08,493] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:08,493] INFO  - SyncLock.run(): finish id 1, count 0
[2010-01-25 00:29:10,774] DEBUG - SchemaLoader() : directory [test/schema/relax]
[2010-01-25 00:29:10,877] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Boolean.rng]
[2010-01-25 00:29:11,181] DEBUG - RelaxSchema.addBaseFields() : evaluating bool-test
[2010-01-25 00:29:11,183] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,189] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,217] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,218] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,218] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,219] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,252] DEBUG - RelaxSchema.recurse() : element BoolTest
[2010-01-25 00:29:11,287] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:29:11,288] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:29:11,300] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:29:11,300] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,308] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:29:11,308] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,334] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Complex.rng]
[2010-01-25 00:29:11,338] DEBUG - FileResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:29:11,349] DEBUG - RelaxSchema.addBaseFields() : evaluating levelone
[2010-01-25 00:29:11,349] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,349] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,350] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,350] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,350] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,351] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,352] DEBUG - RelaxSchema.recurse() : element Levelone
[2010-01-25 00:29:11,353] DEBUG - RelaxSchema.addBaseFields() : evaluating leveltwo
[2010-01-25 00:29:11,353] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,353] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,353] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,354] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,354] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,354] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,355] DEBUG - RelaxClass() : ancestor count for [Leveltwo] = 1
[2010-01-25 00:29:11,355] DEBUG - RelaxSchema.recurse() : element Leveltwo
[2010-01-25 00:29:11,357] DEBUG - RelaxClass() : ancestor count for [Levelthree.rng] = 2
[2010-01-25 00:29:11,360] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:29:11,360] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,363] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:29:11,363] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,368] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:29:11,368] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,371] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:29:11,371] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,375] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Favorite.rng]
[2010-01-25 00:29:11,383] DEBUG - RelaxSchema.addBaseFields() : evaluating favorite
[2010-01-25 00:29:11,383] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,383] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,384] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,384] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,384] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,385] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,385] DEBUG - RelaxSchema.recurse() : element Favorite
[2010-01-25 00:29:11,389] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:29:11,389] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:29:11,393] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:29:11,393] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,394] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:29:11,394] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,396] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Levelthree.rng]
[2010-01-25 00:29:11,410] DEBUG - RelaxSchema.addBaseFields() : evaluating levelthree
[2010-01-25 00:29:11,410] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,410] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,411] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,411] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,411] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,412] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,412] DEBUG - RelaxSchema.recurse() : element Levelthree
[2010-01-25 00:29:11,413] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:29:11,413] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:29:11,416] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:29:11,416] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,418] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:29:11,418] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,422] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Mixed.rng]
[2010-01-25 00:29:11,434] DEBUG - RelaxSchema.addBaseFields() : evaluating mixed-kids
[2010-01-25 00:29:11,434] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,435] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,436] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,436] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,436] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,437] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,437] DEBUG - RelaxSchema.recurse() : element MixedKids
[2010-01-25 00:29:11,438] DEBUG - RelaxClass() : ancestor count for [Title] = 1
[2010-01-25 00:29:11,438] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:29:11,446] DEBUG - RelaxClass() : ancestor count for [interleave.rng] = 1
[2010-01-25 00:29:11,449] DEBUG - RelaxSchema.ref() : follow [kid-one]
[2010-01-25 00:29:11,453] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-one
[2010-01-25 00:29:11,453] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,453] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,453] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,454] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,454] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,454] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,455] DEBUG - RelaxClass() : ancestor count for [KidOne] = 1
[2010-01-25 00:29:11,455] DEBUG - RelaxSchema.recurse() : element KidOne
[2010-01-25 00:29:11,456] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:29:11,456] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:29:11,463] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:29:11,463] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,465] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:29:11,466] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,467] DEBUG - RelaxSchema.ref() : follow [kid-two]
[2010-01-25 00:29:11,470] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-two
[2010-01-25 00:29:11,470] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,470] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,471] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,471] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,471] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,472] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,472] DEBUG - RelaxClass() : ancestor count for [KidTwo] = 1
[2010-01-25 00:29:11,472] DEBUG - RelaxSchema.recurse() : element KidTwo
[2010-01-25 00:29:11,473] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:29:11,473] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:29:11,475] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:29:11,475] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,478] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:29:11,478] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,479] DEBUG - RelaxSchema.ref() : follow [kid-three]
[2010-01-25 00:29:11,480] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-three
[2010-01-25 00:29:11,480] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,480] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,481] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,481] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,481] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,481] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,482] DEBUG - RelaxClass() : ancestor count for [KidThree] = 1
[2010-01-25 00:29:11,482] DEBUG - RelaxSchema.recurse() : element KidThree
[2010-01-25 00:29:11,482] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:29:11,482] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:29:11,484] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:29:11,484] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,485] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:29:11,485] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,487] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:29:11,487] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,488] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:29:11,489] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,493] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Sort.rng]
[2010-01-25 00:29:11,496] DEBUG - FileResolver.resolveEntity() : looking for [SortChild.rng]
[2010-01-25 00:29:11,503] DEBUG - RelaxSchema.addBaseFields() : evaluating sort
[2010-01-25 00:29:11,503] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,504] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,504] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,505] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,505] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,505] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,506] DEBUG - RelaxSchema.recurse() : element Sort
[2010-01-25 00:29:11,506] DEBUG - RelaxClass() : ancestor count for [Sort1] = 1
[2010-01-25 00:29:11,506] DEBUG - RelaxSchema.recurse() : element Sort1
[2010-01-25 00:29:11,507] DEBUG - RelaxClass() : ancestor count for [Sort2] = 1
[2010-01-25 00:29:11,507] DEBUG - RelaxSchema.recurse() : element Sort2
[2010-01-25 00:29:11,508] DEBUG - RelaxClass() : ancestor count for [SortChild.rng] = 1
[2010-01-25 00:29:11,510] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:29:11,510] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,512] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:29:11,512] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,514] INFO  - RelaxSchema.parse() : parse [test/schema/relax/SortChild.rng]
[2010-01-25 00:29:11,521] DEBUG - RelaxSchema.addBaseFields() : evaluating sort-child
[2010-01-25 00:29:11,521] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,521] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,524] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,524] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,524] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,524] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,525] DEBUG - RelaxSchema.recurse() : element SortChild
[2010-01-25 00:29:11,525] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:29:11,525] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:29:11,527] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:29:11,527] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,528] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:29:11,528] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,529] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Test.rng]
[2010-01-25 00:29:11,538] DEBUG - FileResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:11,540] DEBUG - FileResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:11,548] DEBUG - RelaxSchema.addBaseFields() : evaluating address-book
[2010-01-25 00:29:11,548] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,549] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,549] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,551] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,551] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,551] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,552] DEBUG - RelaxSchema.recurse() : element AddressBook
[2010-01-25 00:29:11,553] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:29:11,553] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:29:11,557] DEBUG - RelaxClass() : ancestor count for [Email] = 1
[2010-01-25 00:29:11,557] DEBUG - RelaxSchema.recurse() : element Email
[2010-01-25 00:29:11,559] DEBUG - RelaxClass() : ancestor count for [Enabled] = 1
[2010-01-25 00:29:11,559] DEBUG - RelaxSchema.recurse() : element Enabled
[2010-01-25 00:29:11,561] DEBUG - RelaxSchema.ref() : follow [address]
[2010-01-25 00:29:11,562] DEBUG - RelaxSchema.addBaseFields() : evaluating address
[2010-01-25 00:29:11,562] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,562] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,563] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,563] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,563] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,564] DEBUG - RelaxClass() : ancestor count for [Address] = 1
[2010-01-25 00:29:11,564] DEBUG - RelaxSchema.recurse() : element Address
[2010-01-25 00:29:11,569] DEBUG - RelaxClass() : ancestor count for [Street] = 2
[2010-01-25 00:29:11,569] DEBUG - RelaxSchema.recurse() : element Street
[2010-01-25 00:29:11,570] DEBUG - RelaxClass() : ancestor count for [City] = 2
[2010-01-25 00:29:11,570] DEBUG - RelaxSchema.recurse() : element City
[2010-01-25 00:29:11,571] DEBUG - RelaxClass() : ancestor count for [State] = 2
[2010-01-25 00:29:11,571] DEBUG - RelaxSchema.recurse() : element State
[2010-01-25 00:29:11,572] DEBUG - RelaxClass() : ancestor count for [ZipCode] = 2
[2010-01-25 00:29:11,572] DEBUG - RelaxSchema.recurse() : element ZipCode
[2010-01-25 00:29:11,578] DEBUG - RelaxClass() : ancestor count for [Region] = 2
[2010-01-25 00:29:11,578] DEBUG - RelaxSchema.recurse() : element Region
[2010-01-25 00:29:11,579] DEBUG - RelaxClass() : ancestor count for [Region] = 2
[2010-01-25 00:29:11,579] DEBUG - RelaxSchema.recurse() : element Region
[2010-01-25 00:29:11,581] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:29:11,581] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,582] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:29:11,582] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,583] DEBUG - RelaxSchema.ref() : follow [status]
[2010-01-25 00:29:11,583] DEBUG - RelaxClass() : ancestor count for [Status] = 1
[2010-01-25 00:29:11,584] DEBUG - RelaxSchema.recurse() : element Status
[2010-01-25 00:29:11,584] DEBUG - RelaxSchema.ref() : follow [statistics]
[2010-01-25 00:29:11,585] DEBUG - RelaxSchema.addBaseFields() : evaluating statistics
[2010-01-25 00:29:11,585] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,586] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,586] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,586] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,586] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,588] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,588] DEBUG - RelaxClass() : ancestor count for [Statistics] = 1
[2010-01-25 00:29:11,588] DEBUG - RelaxSchema.recurse() : element Statistics
[2010-01-25 00:29:11,590] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:29:11,590] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,591] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:29:11,591] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,592] DEBUG - RelaxClass() : ancestor count for [Favorite.rng] = 1
[2010-01-25 00:29:11,592] DEBUG - RelaxClass() : ancestor count for [Favorite.rng] = 1
[2010-01-25 00:29:11,592] DEBUG - RelaxSchema.addBaseFields() : evaluating remover
[2010-01-25 00:29:11,592] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,593] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,593] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,595] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,595] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,596] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,596] DEBUG - RelaxClass() : ancestor count for [Remover] = 1
[2010-01-25 00:29:11,596] DEBUG - RelaxSchema.recurse() : element Remover
[2010-01-25 00:29:11,597] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:29:11,597] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:29:11,598] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:29:11,598] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,599] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:29:11,599] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,600] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:29:11,600] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,601] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:29:11,601] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,613] DEBUG - RelaxSchema.addBaseFields() : evaluating cache
[2010-01-25 00:29:11,613] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,613] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,613] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,613] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,614] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,614] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,615] DEBUG - RelaxSchema.recurse() : element Cache
[2010-01-25 00:29:11,615] DEBUG - RelaxClass() : ancestor count for [Oid] = 1
[2010-01-25 00:29:11,615] DEBUG - RelaxSchema.recurse() : element Oid
[2010-01-25 00:29:11,623] DEBUG - RelaxClass() : ancestor count for [Otype] = 1
[2010-01-25 00:29:11,623] DEBUG - RelaxSchema.recurse() : element Otype
[2010-01-25 00:29:11,625] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:29:11,625] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,626] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:29:11,626] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,630] DEBUG - RelaxSchema.addBaseFields() : evaluating interleave
[2010-01-25 00:29:11,630] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:29:11,630] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:29:11,631] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:29:11,631] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:29:11,631] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:29:11,631] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:29:11,632] DEBUG - RelaxSchema.recurse() : element Interleave
[2010-01-25 00:29:11,632] DEBUG - RelaxClass() : ancestor count for [Ordering] = 1
[2010-01-25 00:29:11,632] DEBUG - RelaxSchema.recurse() : element Ordering
[2010-01-25 00:29:11,634] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:29:11,634] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:29:11,636] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:29:11,636] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:29:11,642] DEBUG - DomainClass.resolveExternalRefs() : ext [Levelthree.rng]
[2010-01-25 00:29:11,649] DEBUG - DomainClass.resolveExternalRefs() : ext [interleave.rng]
[2010-01-25 00:29:11,650] DEBUG - DomainClass.resolveExternalRefs() : ext [SortChild.rng]
[2010-01-25 00:29:11,651] DEBUG - DomainClass.resolveExternalRefs() : ext [Favorite.rng]
[2010-01-25 00:29:11,661] INFO  - SchemaLoader.load() : load class [BoolTest]
[2010-01-25 00:29:12,283] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class BoolTest { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="bool-test"><optional><attribute name="available"><data type="boolean"/></attribute></optional><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Boolean.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['available','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        available(nullable : true,)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <available nullable ="true"/>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Boolean available
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "BoolTest".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:12,489] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [BoolTest]
[2010-01-25 00:29:12,489] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [BoolTest]
[2010-01-25 00:29:12,490] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:12,531] DEBUG - PersistenceLoader.addBaseClass() : load BoolTest
[2010-01-25 00:29:12,531] INFO  - SchemaLoader.load() : load class [Levelthree]
[2010-01-25 00:29:12,690] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Levelthree { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="levelthree"><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Levelthree.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['Leveltwo',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Levelthree".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:12,745] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Levelthree]
[2010-01-25 00:29:12,745] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Levelthree]
[2010-01-25 00:29:12,745] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:12,845] DEBUG - PersistenceLoader.addBaseClass() : load Levelthree
[2010-01-25 00:29:12,847] INFO  - SchemaLoader.load() : load class [Leveltwo]
[2010-01-25 00:29:12,979] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Leveltwo { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['levelthree','lastUpdated','created',]

    static final Collection<String> children = ['levelthree',]

    static final Collection<String> parents = ['Levelone',]

    // one-to-many
    static hasMany = [levelthree : Levelthree,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        levelthree(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <levelthree nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Long id
    Date lastUpdated
    Date created

    List    levelthree

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Leveltwo".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:13,013] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Leveltwo]
[2010-01-25 00:29:13,013] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Leveltwo]
[2010-01-25 00:29:13,013] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 1 properties
[2010-01-25 00:29:13,030] DEBUG - PersistenceLoader.addBaseClass() : load Leveltwo
[2010-01-25 00:29:13,030] INFO  - SchemaLoader.load() : load class [Levelone]
[2010-01-25 00:29:13,214] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Levelone { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="levelone"><oneOrMore><element name="leveltwo"><oneOrMore><externalRef href="Levelthree.rng"/></oneOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></oneOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Complex.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['leveltwo','lastUpdated','created',]

    static final Collection<String> children = ['leveltwo',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [leveltwo : Leveltwo,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        leveltwo(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <leveltwo nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Long id
    Date lastUpdated
    Date created

    List    leveltwo

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Levelone".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:13,251] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Levelone]
[2010-01-25 00:29:13,251] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Levelone]
[2010-01-25 00:29:13,251] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 1 properties
[2010-01-25 00:29:13,268] DEBUG - PersistenceLoader.addBaseClass() : load Levelone
[2010-01-25 00:29:13,269] INFO  - SchemaLoader.load() : load class [Favorite]
[2010-01-25 00:29:13,451] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Favorite { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="favorite" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><attribute name="user-id"><data type="integer"/></attribute><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Favorite.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['userId','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        userId(nullable : false,)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <userId nullable ="false"/>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer userId
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Favorite".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:13,475] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Favorite]
[2010-01-25 00:29:13,475] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Favorite]
[2010-01-25 00:29:13,475] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:13,494] DEBUG - PersistenceLoader.addBaseClass() : load Favorite
[2010-01-25 00:29:13,495] INFO  - SchemaLoader.load() : load class [Interleave]
[2010-01-25 00:29:13,595] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Interleave { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'
            ordering type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="interleave"><element name="ordering"><data type="string"><param name="maxLength">100000</param></data></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "interleave.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['ordering','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        ordering(maxSize : 100000,nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <ordering maxSize ="100000"nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String ordering
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Interleave".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:13,619] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Interleave]
[2010-01-25 00:29:13,619] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Interleave]
[2010-01-25 00:29:13,619] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:13,638] DEBUG - PersistenceLoader.addBaseClass() : load Interleave
[2010-01-25 00:29:13,638] INFO  - SchemaLoader.load() : load class [KidOne]
[2010-01-25 00:29:13,770] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidOne { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidOne".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:13,793] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidOne]
[2010-01-25 00:29:13,793] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidOne]
[2010-01-25 00:29:13,793] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:13,809] DEBUG - PersistenceLoader.addBaseClass() : load KidOne
[2010-01-25 00:29:13,809] INFO  - SchemaLoader.load() : load class [KidTwo]
[2010-01-25 00:29:14,031] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidTwo { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidTwo".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:14,055] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidTwo]
[2010-01-25 00:29:14,055] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidTwo]
[2010-01-25 00:29:14,055] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:14,070] DEBUG - PersistenceLoader.addBaseClass() : load KidTwo
[2010-01-25 00:29:14,070] INFO  - SchemaLoader.load() : load class [KidThree]
[2010-01-25 00:29:14,174] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidThree { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidThree".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:14,196] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidThree]
[2010-01-25 00:29:14,196] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidThree]
[2010-01-25 00:29:14,196] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:14,209] DEBUG - PersistenceLoader.addBaseClass() : load KidThree
[2010-01-25 00:29:14,209] INFO  - SchemaLoader.load() : load class [MixedKids]
[2010-01-25 00:29:14,300] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class MixedKids { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><define name="kid-one"><element name="kid-one"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="kid-two"><element name="kid-two"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="kid-three"><element name="kid-three"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><start><element name="mixed-kids"><element name="title"><text/></element><interleave><zeroOrMore><ref name="kid-one"/></zeroOrMore><zeroOrMore><ref name="kid-two"/></zeroOrMore></interleave><zeroOrMore><ref name="kid-three"/></zeroOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Mixed.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','interleave','kidOne','kidTwo','kidThree','lastUpdated','created',]

    static final Collection<String> children = ['interleave','kidOne','kidTwo','kidThree',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [kidOne : KidOne,kidTwo : KidTwo,kidThree : KidThree,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        interleave(nullable : true,)
        kidOne(nullable : true,)
        kidTwo(nullable : true,)
        kidThree(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <interleave nullable ="true"/>
            <kidOne nullable ="true"/>
            <kidTwo nullable ="true"/>
            <kidThree nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    Interleave interleave


    // fields
    String title
    Long id
    Date lastUpdated
    Date created

    List    kidOne
    List    kidTwo
    List    kidThree

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "MixedKids".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:14,335] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [MixedKids]
[2010-01-25 00:29:14,335] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [MixedKids]
[2010-01-25 00:29:14,335] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 3 properties
[2010-01-25 00:29:14,360] DEBUG - PersistenceLoader.addBaseClass() : load MixedKids
[2010-01-25 00:29:14,360] INFO  - SchemaLoader.load() : load class [SortChild]
[2010-01-25 00:29:14,529] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class SortChild { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="sort-child" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "SortChild.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['Sort',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "SortChild".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:14,557] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [SortChild]
[2010-01-25 00:29:14,557] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [SortChild]
[2010-01-25 00:29:14,557] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:14,574] DEBUG - PersistenceLoader.addBaseClass() : load SortChild
[2010-01-25 00:29:14,575] INFO  - SchemaLoader.load() : load class [Sort]
[2010-01-25 00:29:14,656] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Sort { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="sort" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><element name="sort1"><text/></element><element name="sort2"><text/></element><optional><externalRef href="SortChild.rng"/></optional><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Sort.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['sort1','sort2','sortChild','lastUpdated','created',]

    static final Collection<String> children = ['sortChild',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        sort1(nullable : false,)
        sort2(nullable : false,)
        sortChild(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <sort1 nullable ="false"/>
            <sort2 nullable ="false"/>
            <sortChild nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    SortChild sortChild


    // fields
    String sort1
    String sort2
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Sort".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:14,683] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Sort]
[2010-01-25 00:29:14,684] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Sort]
[2010-01-25 00:29:14,684] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:14,695] DEBUG - PersistenceLoader.addBaseClass() : load Sort
[2010-01-25 00:29:14,695] INFO  - SchemaLoader.load() : load class [Address]
[2010-01-25 00:29:14,812] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Address { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id','type',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['street','city','state','zipCode','region','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        id(nullable : true,)
        type(nullable : false,inList : ["home","work",], )
        street(nullable : false,)
        city(nullable : false,)
        state(nullable : false,)
        zipCode(nullable : false,)
        region(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <id nullable ="true"/>
            <type nullable ="false"inList ="["home"""work""]" />
            <street nullable ="false"/>
            <city nullable ="false"/>
            <state nullable ="false"/>
            <zipCode nullable ="false"/>
            <region nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer id
    String type
    String[] street
    String city
    String state
    Integer zipCode
    String[] region
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Address".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:14,835] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Address]
[2010-01-25 00:29:14,835] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Address]
[2010-01-25 00:29:14,835] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:14,848] DEBUG - PersistenceLoader.addBaseClass() : load Address
[2010-01-25 00:29:14,848] INFO  - SchemaLoader.load() : load class [Statistics]
[2010-01-25 00:29:14,935] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Statistics { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['accessed','size','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        accessed(nullable : false,)
        size(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <accessed nullable ="false"/>
            <size nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer accessed
    Long size
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Statistics".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:15,047] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Statistics]
[2010-01-25 00:29:15,047] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Statistics]
[2010-01-25 00:29:15,047] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:15,059] DEBUG - PersistenceLoader.addBaseClass() : load Statistics
[2010-01-25 00:29:15,059] INFO  - SchemaLoader.load() : load class [Remover]
[2010-01-25 00:29:15,136] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Remover { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Remover".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:15,157] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Remover]
[2010-01-25 00:29:15,157] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Remover]
[2010-01-25 00:29:15,157] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:15,168] DEBUG - PersistenceLoader.addBaseClass() : load Remover
[2010-01-25 00:29:15,168] INFO  - SchemaLoader.load() : load class [AddressBook]
[2010-01-25 00:29:15,245] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class AddressBook { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><define name="address"><element name="address"><optional><attribute name="id"><data type="integer"/></attribute></optional><attribute name="type"><choice><value>home</value><value>work</value></choice></attribute><oneOrMore><element name="street"><text/></element></oneOrMore><element name="city"><text/></element><element name="state"><text/></element><element name="zip-code"><data type="integer"/></element><optional><element name="region"><text/></element><element name="region"><text/></element></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="status"><element name="status"><choice><value>new</value><value>reviewed</value></choice></element></define><define name="statistics"><element name="statistics"><attribute name="accessed"><data type="integer"/></attribute><attribute name="size"><data type="long"/></attribute><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><start><element name="address-book"><optional><attribute name="address-count"><text/></attribute></optional><element name="name"><data type="string"><param name="maxLength">100</param></data></element><optional><element name="email"><text/></element></optional><optional><element name="enabled"><empty/></element></optional><zeroOrMore><ref name="address"/></zeroOrMore><optional><ref name="status"/></optional><ref name="statistics"/><externalRef href="Favorite.rng"/><externalRef href="Favorite.rng"/><optional><element name="remover"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></optional><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Test.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['addressCount','id',]

    // primitives that should be empty
    static final Collection<String> empty = ['enabled',]

    static final Collection<String> elements = ['name','email','enabled','address','status','statistics','favorite','remover','lastUpdated','created',]

    static final Collection<String> children = ['address','statistics','favorite','remover',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [address : Address,favorite : Favorite,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        addressCount(nullable : true,)
        name(maxSize : 100,nullable : false,)
        email(nullable : true,)
        enabled(nullable : false,)
        address(nullable : true,)
        status(nullable : true,inList : ["new","reviewed",], )
        statistics(nullable : false,)
        favorite(nullable : false,)
        remover(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <addressCount nullable ="true"/>
            <name maxSize ="100"nullable ="false"/>
            <email nullable ="true"/>
            <enabled nullable ="false"/>
            <address nullable ="true"/>
            <status nullable ="true"inList ="["new"""reviewed""]" />
            <statistics nullable ="false"/>
            <favorite nullable ="false"/>
            <remover nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    Statistics statistics
    Remover remover


    // fields
    String addressCount
    String name
    String email
    Boolean enabled
    String status
    Long id
    Date lastUpdated
    Date created

    List    address
    List    favorite

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "AddressBook".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:15,286] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [AddressBook]
[2010-01-25 00:29:15,286] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [AddressBook]
[2010-01-25 00:29:15,286] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 2 properties
[2010-01-25 00:29:15,297] DEBUG - PersistenceLoader.addBaseClass() : load AddressBook
[2010-01-25 00:29:15,297] INFO  - SchemaLoader.load() : load class [Cache]
[2010-01-25 00:29:15,370] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Cache { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="cache"><element name="oid"><text/></element><element name="otype"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "cache.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['oid','otype','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        oid(nullable : false,)
        otype(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <oid nullable ="false"/>
            <otype nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String oid
    String otype
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Cache".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:29:15,390] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Cache]
[2010-01-25 00:29:15,390] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Cache]
[2010-01-25 00:29:15,390] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:29:15,404] DEBUG - PersistenceLoader.addBaseClass() : load Cache
[2010-01-25 00:29:16,166] INFO  - Hibernate 3.3.1.GA
[2010-01-25 00:29:16,170] INFO  - hibernate.properties not found
[2010-01-25 00:29:16,173] INFO  - Bytecode provider name : javassist
[2010-01-25 00:29:16,177] INFO  - using JDK 1.4 java.sql.Timestamp handling
[2010-01-25 00:29:16,234] INFO  - configuring from url: file:/Users/rgrey/Work/persistence/etc/hibernate.cfg.xml
[2010-01-25 00:29:16,434] INFO  - Configured SessionFactory: null
[2010-01-25 00:29:16,461] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:29:16,510] INFO  - Running hbm2ddl schema update
[2010-01-25 00:29:16,510] INFO  - fetching database metadata
[2010-01-25 00:29:16,513] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:29:16,513] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:29:16,513] INFO  - autocommit mode: false
[2010-01-25 00:29:16,753] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:29:16,753] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:29:17,169] INFO  - updating schema
[2010-01-25 00:29:18,712] INFO  - table found: .APP.ADDRESS
[2010-01-25 00:29:18,712] INFO  - columns: [created, type, street, region, xmlcache, state, last_updated, city, id, zip_code, version]
[2010-01-25 00:29:18,712] INFO  - foreign keys: []
[2010-01-25 00:29:18,712] INFO  - indexes: [sql100124042657690]
[2010-01-25 00:29:18,753] INFO  - table found: .APP.ADDRESS_BOOK
[2010-01-25 00:29:18,753] INFO  - columns: [created, enabled, xmlcache, email, status, statistics_id, address_count, last_updated, name, remover_id, id, version]
[2010-01-25 00:29:18,753] INFO  - foreign keys: [fkfb8b05459d996fa, fkfb8b054e5d50ada]
[2010-01-25 00:29:18,753] INFO  - indexes: [sql100124042657740, sql100124042658320, sql100124042658280]
[2010-01-25 00:29:18,768] INFO  - table found: .APP.ADDRESS_BOOK_ADDRESS
[2010-01-25 00:29:18,768] INFO  - columns: [address_id, address_book_address_id, address_idx]
[2010-01-25 00:29:18,768] INFO  - foreign keys: [fkd2a45f096ebf151a]
[2010-01-25 00:29:18,768] INFO  - indexes: [sql100125002636120]
[2010-01-25 00:29:18,793] INFO  - table found: .APP.ADDRESS_BOOK_FAVORITE
[2010-01-25 00:29:18,793] INFO  - columns: [favorite_idx, address_book_favorite_id, favorite_id]
[2010-01-25 00:29:18,793] INFO  - foreign keys: [fk92d6927cfe2205a]
[2010-01-25 00:29:18,793] INFO  - indexes: [sql100125002636210]
[2010-01-25 00:29:18,809] INFO  - table found: .APP.BOOL_TEST
[2010-01-25 00:29:18,809] INFO  - columns: [created, available, xmlcache, last_updated, name, id, version]
[2010-01-25 00:29:18,809] INFO  - foreign keys: []
[2010-01-25 00:29:18,809] INFO  - indexes: [sql100124042657800]
[2010-01-25 00:29:18,820] INFO  - table found: .APP.CACHE
[2010-01-25 00:29:18,820] INFO  - columns: [created, oid, xmlcache, last_updated, otype, id, version]
[2010-01-25 00:29:18,820] INFO  - foreign keys: []
[2010-01-25 00:29:18,820] INFO  - indexes: [sql100124042657810]
[2010-01-25 00:29:18,829] INFO  - table found: .APP.FAVORITE
[2010-01-25 00:29:18,829] INFO  - columns: [created, user_id, xmlcache, last_updated, name, id, version]
[2010-01-25 00:29:18,829] INFO  - foreign keys: []
[2010-01-25 00:29:18,830] INFO  - indexes: [sql100124042657840]
[2010-01-25 00:29:18,845] INFO  - table found: .APP.INTERLEAVE
[2010-01-25 00:29:18,845] INFO  - columns: [created, ordering, xmlcache, last_updated, id, version]
[2010-01-25 00:29:18,845] INFO  - foreign keys: []
[2010-01-25 00:29:18,845] INFO  - indexes: [sql100124042657860]
[2010-01-25 00:29:18,857] INFO  - table found: .APP.KID_ONE
[2010-01-25 00:29:18,857] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:29:18,857] INFO  - foreign keys: []
[2010-01-25 00:29:18,857] INFO  - indexes: [sql100124042657890]
[2010-01-25 00:29:18,871] INFO  - table found: .APP.KID_THREE
[2010-01-25 00:29:18,871] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:29:18,871] INFO  - foreign keys: []
[2010-01-25 00:29:18,871] INFO  - indexes: [sql100124042657910]
[2010-01-25 00:29:18,884] INFO  - table found: .APP.KID_TWO
[2010-01-25 00:29:18,884] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:29:18,884] INFO  - foreign keys: []
[2010-01-25 00:29:18,884] INFO  - indexes: [sql100124042657920]
[2010-01-25 00:29:18,898] INFO  - table found: .APP.LEVELONE
[2010-01-25 00:29:18,898] INFO  - columns: [created, xmlcache, last_updated, id, version]
[2010-01-25 00:29:18,898] INFO  - foreign keys: []
[2010-01-25 00:29:18,898] INFO  - indexes: [sql100124042657940]
[2010-01-25 00:29:18,910] INFO  - table found: .APP.LEVELONE_LEVELTWO
[2010-01-25 00:29:18,910] INFO  - columns: [leveltwo_id, leveltwo_idx, levelone_leveltwo_id]
[2010-01-25 00:29:18,910] INFO  - foreign keys: [fk64bd1385277790da]
[2010-01-25 00:29:18,910] INFO  - indexes: [sql100125002636240]
[2010-01-25 00:29:18,920] INFO  - table found: .APP.LEVELTHREE
[2010-01-25 00:29:18,921] INFO  - columns: [created, xmlcache, last_updated, name, id, version]
[2010-01-25 00:29:18,921] INFO  - foreign keys: []
[2010-01-25 00:29:18,921] INFO  - indexes: [sql100124042657960]
[2010-01-25 00:29:18,932] INFO  - table found: .APP.LEVELTWO
[2010-01-25 00:29:18,932] INFO  - columns: [created, xmlcache, last_updated, id, version]
[2010-01-25 00:29:18,932] INFO  - foreign keys: []
[2010-01-25 00:29:18,932] INFO  - indexes: [sql100124042658140]
[2010-01-25 00:29:18,971] INFO  - table found: .APP.LEVELTWO_LEVELTHREE
[2010-01-25 00:29:18,971] INFO  - columns: [levelthree_idx, leveltwo_levelthree_id, levelthree_id]
[2010-01-25 00:29:18,971] INFO  - foreign keys: [fk42a02cf113c3cf9a]
[2010-01-25 00:29:18,971] INFO  - indexes: [sql100125002636280]
[2010-01-25 00:29:18,985] INFO  - table found: .APP.MIXED_KIDS
[2010-01-25 00:29:18,985] INFO  - columns: [created, title, xmlcache, last_updated, interleave_id, id, version]
[2010-01-25 00:29:18,985] INFO  - foreign keys: [fk13caac31770fcbfa]
[2010-01-25 00:29:18,985] INFO  - indexes: [sql100124042658160, sql100124042658340]
[2010-01-25 00:29:19,009] INFO  - table found: .APP.MIXED_KIDS_KID_ONE
[2010-01-25 00:29:19,009] INFO  - columns: [mixed_kids_kid_one_id, kid_one_id, kid_one_idx]
[2010-01-25 00:29:19,009] INFO  - foreign keys: [fk671d3b5f69c27b0d]
[2010-01-25 00:29:19,009] INFO  - indexes: [sql100125002636310]
[2010-01-25 00:29:19,018] INFO  - table found: .APP.MIXED_KIDS_KID_THREE
[2010-01-25 00:29:19,019] INFO  - columns: [mixed_kids_kid_three_id, kid_three_idx, kid_three_id]
[2010-01-25 00:29:19,019] INFO  - foreign keys: [fk14ffd857e3d6174d]
[2010-01-25 00:29:19,019] INFO  - indexes: [sql100125002636330]
[2010-01-25 00:29:19,028] INFO  - table found: .APP.MIXED_KIDS_KID_TWO
[2010-01-25 00:29:19,028] INFO  - columns: [kid_two_id, mixed_kids_kid_two_id, kid_two_idx]
[2010-01-25 00:29:19,028] INFO  - foreign keys: [fk671d4f4572ce294d]
[2010-01-25 00:29:19,028] INFO  - indexes: [sql100125002636370]
[2010-01-25 00:29:19,035] INFO  - table found: .APP.REMOVER
[2010-01-25 00:29:19,035] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:29:19,035] INFO  - foreign keys: []
[2010-01-25 00:29:19,035] INFO  - indexes: [sql100124042658200]
[2010-01-25 00:29:19,048] INFO  - table found: .APP.SORT
[2010-01-25 00:29:19,048] INFO  - columns: [created, sort2, sort_child_id, sort1, xmlcache, last_updated, id, version]
[2010-01-25 00:29:19,048] INFO  - foreign keys: [fk35f59e577cc69d]
[2010-01-25 00:29:19,048] INFO  - indexes: [sql100124042658350, sql100124042658220]
[2010-01-25 00:29:19,067] INFO  - table found: .APP.SORT_CHILD
[2010-01-25 00:29:19,067] INFO  - columns: [created, xmlcache, last_updated, name, id, version]
[2010-01-25 00:29:19,067] INFO  - foreign keys: []
[2010-01-25 00:29:19,067] INFO  - indexes: [sql100124042658240]
[2010-01-25 00:29:19,074] INFO  - table found: .APP.STATISTICS
[2010-01-25 00:29:19,074] INFO  - columns: [created, accessed, xmlcache, size, last_updated, id, version]
[2010-01-25 00:29:19,074] INFO  - foreign keys: []
[2010-01-25 00:29:19,074] INFO  - indexes: [sql100124042658260]
[2010-01-25 00:29:19,105] INFO  - table found: .APP.HIBERNATE_UNIQUE_KEY
[2010-01-25 00:29:19,105] INFO  - columns: [next_hi]
[2010-01-25 00:29:19,106] INFO  - foreign keys: []
[2010-01-25 00:29:19,106] INFO  - indexes: []
[2010-01-25 00:29:19,108] INFO  - schema update complete
[2010-01-25 00:29:19,113] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:29:19,113] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:29:19,113] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:29:19,120] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:29:19,121] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:29:19,121] INFO  - autocommit mode: false
[2010-01-25 00:29:19,121] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:29:19,121] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:29:19,123] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-25 00:29:19,123] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-25 00:29:19,125] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:29:19,127] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-25 00:29:19,129] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-25 00:29:19,129] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-25 00:29:19,129] INFO  - Automatic session close at end of transaction: disabled
[2010-01-25 00:29:19,129] INFO  - Scrollable result sets: enabled
[2010-01-25 00:29:19,129] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-25 00:29:19,129] INFO  - Connection release mode: auto
[2010-01-25 00:29:19,130] INFO  - Maximum outer join fetch depth: 1
[2010-01-25 00:29:19,130] INFO  - Default batch fetch size: 1
[2010-01-25 00:29:19,130] INFO  - Generate SQL with comments: disabled
[2010-01-25 00:29:19,130] INFO  - Order SQL updates by primary key: disabled
[2010-01-25 00:29:19,130] INFO  - Order SQL inserts for batching: disabled
[2010-01-25 00:29:19,130] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-25 00:29:19,132] INFO  - Using ASTQueryTranslatorFactory
[2010-01-25 00:29:19,133] INFO  - Query language substitutions: {}
[2010-01-25 00:29:19,133] INFO  - JPA-QL strict compliance: disabled
[2010-01-25 00:29:19,133] INFO  - Second-level cache: enabled
[2010-01-25 00:29:19,133] INFO  - Query cache: enabled
[2010-01-25 00:29:19,139] INFO  - Cache region factory : org.hibernate.cache.impl.bridge.RegionFactoryCacheProviderBridge
[2010-01-25 00:29:19,140] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-25 00:29:19,143] INFO  - Optimize cache for minimal puts: disabled
[2010-01-25 00:29:19,143] INFO  - Cache region prefix: arv
[2010-01-25 00:29:19,143] INFO  - Structured second-level cache entries: disabled
[2010-01-25 00:29:19,143] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-25 00:29:19,148] INFO  - Statistics: disabled
[2010-01-25 00:29:19,148] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-25 00:29:19,149] INFO  - Default entity-mode: pojo
[2010-01-25 00:29:19,149] INFO  - Named query checking : enabled
[2010-01-25 00:29:19,197] INFO  - building session factory
[2010-01-25 00:29:19,236] WARN  - Could not find configuration [arv.BoolTest]; using defaults.
[2010-01-25 00:29:19,577] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:29:19,613] WARN  - Could not find configuration [arv.Sort]; using defaults.
[2010-01-25 00:29:19,640] WARN  - Could not find configuration [arv.KidTwo]; using defaults.
[2010-01-25 00:29:19,665] WARN  - Could not find configuration [arv.MixedKids]; using defaults.
[2010-01-25 00:29:19,699] WARN  - Could not find configuration [arv.KidThree]; using defaults.
[2010-01-25 00:29:19,718] WARN  - Could not find configuration [arv.Favorite]; using defaults.
[2010-01-25 00:29:19,740] WARN  - Could not find configuration [arv.Levelthree]; using defaults.
[2010-01-25 00:29:19,758] WARN  - Could not find configuration [arv.Interleave]; using defaults.
[2010-01-25 00:29:19,777] WARN  - Could not find configuration [arv.SortChild]; using defaults.
[2010-01-25 00:29:19,808] WARN  - Could not find configuration [arv.Leveltwo]; using defaults.
[2010-01-25 00:29:19,826] WARN  - Could not find configuration [arv.Address]; using defaults.
[2010-01-25 00:29:19,844] WARN  - Could not find configuration [arv.Levelone]; using defaults.
[2010-01-25 00:29:19,862] WARN  - Could not find configuration [arv.Cache]; using defaults.
[2010-01-25 00:29:19,880] WARN  - Could not find configuration [arv.KidOne]; using defaults.
[2010-01-25 00:29:19,899] WARN  - Could not find configuration [arv.Remover]; using defaults.
[2010-01-25 00:29:19,916] WARN  - Could not find configuration [arv.AddressBook]; using defaults.
[2010-01-25 00:29:19,941] WARN  - Could not find configuration [arv.Statistics]; using defaults.
[2010-01-25 00:29:20,038] INFO  - Not binding factory to JNDI, no JNDI name configured
[2010-01-25 00:29:20,039] INFO  - starting update timestamps cache at region: arv.org.hibernate.cache.UpdateTimestampsCache
[2010-01-25 00:29:20,040] WARN  - Could not find configuration [arv.org.hibernate.cache.UpdateTimestampsCache]; using defaults.
[2010-01-25 00:29:20,043] INFO  - starting query cache at region: arv.org.hibernate.cache.StandardQueryCache
[2010-01-25 00:29:20,043] WARN  - Could not find configuration [arv.org.hibernate.cache.StandardQueryCache]; using defaults.
[2010-01-25 00:29:20,045] DEBUG - PersistenceLoader.load() : loaded 17 class(es)
[2010-01-25 00:29:20,138] DEBUG - XmlSerializer() : loaded 17 classes
[2010-01-25 00:29:20,165] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:20,189] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:20,198] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:20,426] DEBUG - XmlSerializer.save() : timing 271 at [extract]
[2010-01-25 00:29:20,469] DEBUG - XmlSerializer.save() : timing 43 at [lock]
[2010-01-25 00:29:20,489] DEBUG - XmlSerializer.save() : timing 20 at [changed]
[2010-01-25 00:29:20,516] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:20,641] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:29:20,641] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:29:20,665] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:20,665] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:20,667] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:20,672] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:20,675] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:20,675] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:20,676] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:20,677] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:20,680] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:20,684] DEBUG - XmlSerializer.save() : timing 195 at [storeAll]
[2010-01-25 00:29:20,707] DEBUG - XmlSerializer.save() : timing 23 at [findupdate]
[2010-01-25 00:29:20,717] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212416]
[2010-01-25 00:29:20,728] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:20,871] DEBUG - PooledThread.queue() : priority 1
[2010-01-25 00:29:20,871] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,872] DEBUG - UpdateCache.update() : update [class Address], id [1081344]
[2010-01-25 00:29:20,880] DEBUG - UpdateThread.update() : begin 7855591
[2010-01-25 00:29:20,881] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:20,886] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,886] DEBUG - UpdateCache.update() : update [class Statistics], id [1114112]
[2010-01-25 00:29:20,887] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:20,891] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,891] DEBUG - UpdateCache.update() : update [class Favorite], id [1146880]
[2010-01-25 00:29:20,892] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:20,894] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,895] DEBUG - UpdateCache.update() : update [class Favorite], id [1146881]
[2010-01-25 00:29:20,895] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:20,899] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,899] DEBUG - UpdateCache.update() : update [class Remover], id [1179648]
[2010-01-25 00:29:20,900] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:20,902] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,902] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212416]
[2010-01-25 00:29:20,903] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:20,917] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,917] DEBUG - UpdateCache.update() : update [class Address], id [1081344]
[2010-01-25 00:29:20,917] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:20,923] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,924] DEBUG - UpdateCache.update() : update [class Statistics], id [1114112]
[2010-01-25 00:29:20,924] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:20,926] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,926] DEBUG - UpdateCache.update() : update [class Favorite], id [1146880]
[2010-01-25 00:29:20,926] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:20,928] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,929] DEBUG - UpdateCache.update() : update [class Favorite], id [1146881]
[2010-01-25 00:29:20,935] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:20,939] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,939] DEBUG - UpdateCache.update() : update [class Remover], id [1179648]
[2010-01-25 00:29:20,939] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:20,941] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:20,941] DEBUG - XmlSerializer.save() : timing 234 at [cache]
[2010-01-25 00:29:21,204] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:29:21,204] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:29:21,209] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:21,209] DEBUG - XmlSerializer.save() : timing 268 at [save]
[2010-01-25 00:29:21,209] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:21,210] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:21,221] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:21,223] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:21,493] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:21,498] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:21,501] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:21,513] DEBUG - UpdateThread.update() : update 786435, type class Leveltwo
[2010-01-25 00:29:21,525] DEBUG - XmlSerializer.save() : timing 33 at [extract]
[2010-01-25 00:29:21,526] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:29:21,526] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:21,527] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:21,529] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:21,529] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:21,530] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:21,531] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:21,531] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:21,532] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:21,533] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:21,533] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:21,533] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:21,534] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:21,534] DEBUG - XmlSerializer.save() : timing 8 at [storeAll]
[2010-01-25 00:29:21,543] DEBUG - XmlSerializer.save() : timing 9 at [findupdate]
[2010-01-25 00:29:21,543] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212417]
[2010-01-25 00:29:21,543] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:21,559] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,559] DEBUG - UpdateCache.update() : update [class Address], id [1081345]
[2010-01-25 00:29:21,560] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:21,566] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,567] DEBUG - UpdateCache.update() : update [class Statistics], id [1114113]
[2010-01-25 00:29:21,567] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:21,569] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,570] DEBUG - UpdateCache.update() : update [class Favorite], id [1146882]
[2010-01-25 00:29:21,570] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:21,573] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,573] DEBUG - UpdateCache.update() : update [class Favorite], id [1146883]
[2010-01-25 00:29:21,574] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:21,579] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,579] DEBUG - UpdateCache.update() : update [class Remover], id [1179649]
[2010-01-25 00:29:21,579] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:21,581] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,582] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212417]
[2010-01-25 00:29:21,583] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:21,592] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,592] DEBUG - UpdateCache.update() : update [class Address], id [1081345]
[2010-01-25 00:29:21,592] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:21,596] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,596] DEBUG - UpdateCache.update() : update [class Statistics], id [1114113]
[2010-01-25 00:29:21,596] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:21,598] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,598] DEBUG - UpdateCache.update() : update [class Favorite], id [1146882]
[2010-01-25 00:29:21,598] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:21,600] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,600] DEBUG - UpdateCache.update() : update [class Favorite], id [1146883]
[2010-01-25 00:29:21,600] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:21,601] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,602] DEBUG - UpdateCache.update() : update [class Remover], id [1179649]
[2010-01-25 00:29:21,602] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:21,603] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,604] DEBUG - XmlSerializer.save() : timing 61 at [cache]
[2010-01-25 00:29:21,641] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,644] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:21,650] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:29:21,651] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:29:21,654] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:21,654] DEBUG - XmlSerializer.save() : timing 50 at [save]
[2010-01-25 00:29:21,654] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:21,655] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:21,666] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:21,672] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:21,706] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:21,708] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:21,708] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:21,709] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:21,709] DEBUG - UpdateThread.update() : total 333, complete 1
[2010-01-25 00:29:21,709] DEBUG - UpdateThread.update() : update 753669, type class Levelthree
[2010-01-25 00:29:21,711] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:21,711] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:21,713] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:21,713] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,715] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:21,719] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:29:21,719] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:29:21,739] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:21,742] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:21,742] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:21,742] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:21,742] DEBUG - UpdateThread.update() : total 333, complete 2
[2010-01-25 00:29:21,743] DEBUG - UpdateThread.update() : update 819201, type class Levelone
[2010-01-25 00:29:21,755] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:21,756] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:21,763] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:21,766] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:21,793] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,794] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:21,813] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:29:21,813] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:29:21,817] DEBUG - XmlSerializer.save() : timing 62 at [extract]
[2010-01-25 00:29:21,817] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:21,825] DEBUG - LockItem.unlock() : 12 current
[2010-01-25 00:29:21,826] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:21,826] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:21,826] DEBUG - UpdateThread.update() : total 333, complete 3
[2010-01-25 00:29:21,826] DEBUG - UpdateThread.update() : update 786434, type class Leveltwo
[2010-01-25 00:29:21,826] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:21,831] DEBUG - XmlSerializer.save() : timing 14 at [lock]
[2010-01-25 00:29:21,832] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:21,832] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,833] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:21,841] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:29:21,841] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:29:21,846] DEBUG - LockItem.unlock() : 9 current
[2010-01-25 00:29:21,846] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:21,846] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:21,846] DEBUG - UpdateThread.update() : total 333, complete 4
[2010-01-25 00:29:21,846] DEBUG - UpdateThread.update() : update 753667, type class Levelthree
[2010-01-25 00:29:21,847] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:21,849] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,850] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:21,852] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:29:21,853] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:29:21,856] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:21,856] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:21,856] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:21,857] DEBUG - UpdateThread.update() : total 333, complete 5
[2010-01-25 00:29:21,857] DEBUG - UpdateThread.update() : update 753668, type class Levelthree
[2010-01-25 00:29:21,861] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:21,863] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,863] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:21,865] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:29:21,865] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:29:21,876] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:21,876] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:21,876] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:21,876] DEBUG - UpdateThread.update() : total 333, complete 6
[2010-01-25 00:29:21,877] DEBUG - UpdateThread.update() : update 786435, type class Leveltwo
[2010-01-25 00:29:21,878] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:21,882] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,884] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:21,884] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:21,884] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:21,884] DEBUG - UpdateThread.update() : total 333, complete 7
[2010-01-25 00:29:21,884] DEBUG - UpdateThread.update() : update 753669, type class Levelthree
[2010-01-25 00:29:21,887] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:21,890] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,892] DEBUG - XmlCompare.next(): hit  <status>new</status> vs.  <address type="home">
[2010-01-25 00:29:21,892] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:21,892] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:21,892] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:21,892] DEBUG - UpdateThread.update() : total 333, complete 8
[2010-01-25 00:29:21,893] DEBUG - UpdateThread.update() : update 819202, type class Levelone
[2010-01-25 00:29:21,894] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:21,907] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,909] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:21,909] DEBUG - XmlCompare.compare() : [[1212417:address-book]]
[2010-01-25 00:29:21,909] DEBUG - XmlSerializer.save() : timing 78 at [changed]
[2010-01-25 00:29:21,915] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:29:21,916] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:29:21,920] DEBUG - LockItem.unlock() : 11 current
[2010-01-25 00:29:21,920] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:21,920] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:21,921] DEBUG - UpdateThread.update() : total 333, complete 9
[2010-01-25 00:29:21,921] DEBUG - UpdateThread.update() : update 786436, type class Leveltwo
[2010-01-25 00:29:21,922] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:21,923] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:21,931] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,932] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:21,936] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:29:21,937] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:29:21,939] DEBUG - XmlSerializer().storeAll() : old [1081345]
[2010-01-25 00:29:21,939] DEBUG - XmlSerializer().storeAll() : new [1081345, null]
[2010-01-25 00:29:21,948] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 1081345, Address : 1081346]], old [[Address : 1081345, Address : 1081346]]
[2010-01-25 00:29:21,948] DEBUG - LockItem.unlock() : 10 current
[2010-01-25 00:29:21,948] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:21,948] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:21,948] DEBUG - UpdateThread.update() : total 333, complete 10
[2010-01-25 00:29:21,949] DEBUG - UpdateThread.update() : update 819203, type class Levelone
[2010-01-25 00:29:21,951] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:21,964] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,965] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:21,970] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:29:21,970] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:29:21,973] DEBUG - XmlSerializer().storeAll() : old [1146882, 1146883]
[2010-01-25 00:29:21,973] DEBUG - XmlSerializer().storeAll() : new [1146882, 1146883]
[2010-01-25 00:29:21,974] DEBUG - LockItem.unlock() : 11 current
[2010-01-25 00:29:21,974] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:21,974] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:21,974] DEBUG - UpdateThread.update() : total 333, complete 11
[2010-01-25 00:29:21,974] DEBUG - UpdateThread.update() : update 786437, type class Leveltwo
[2010-01-25 00:29:21,975] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1212417]
[2010-01-25 00:29:21,975] DEBUG - XmlSerializer.save() : timing 66 at [storeAll]
[2010-01-25 00:29:21,975] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:21,976] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:21,977] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212417]
[2010-01-25 00:29:21,977] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:21,991] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:21,992] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:21,995] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,995] DEBUG - UpdateCache.update() : update [class Address], id [1081346]
[2010-01-25 00:29:21,996] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:21,997] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:29:21,997] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:29:21,997] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:21,998] DEBUG - XmlSerializer.save() : timing 21 at [cache]
[2010-01-25 00:29:22,001] DEBUG - LockItem.unlock() : 10 current
[2010-01-25 00:29:22,001] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,001] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:22,001] DEBUG - UpdateThread.update() : total 333, complete 12
[2010-01-25 00:29:22,001] DEBUG - UpdateThread.update() : update 753667, type class Levelthree
[2010-01-25 00:29:22,002] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,003] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,006] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:22,006] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,006] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:22,006] DEBUG - UpdateThread.update() : total 333, complete 13
[2010-01-25 00:29:22,007] DEBUG - UpdateThread.update() : update 753668, type class Levelthree
[2010-01-25 00:29:22,007] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,008] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,012] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:22,012] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,012] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:22,012] DEBUG - UpdateThread.update() : total 333, complete 14
[2010-01-25 00:29:22,013] DEBUG - UpdateThread.update() : update 753669, type class Levelthree
[2010-01-25 00:29:22,013] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,015] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,018] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:22,018] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,018] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:22,018] DEBUG - UpdateThread.update() : total 333, complete 15
[2010-01-25 00:29:22,019] DEBUG - UpdateThread.update() : update 753667, type class Levelthree
[2010-01-25 00:29:22,019] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,021] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,035] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:22,035] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:22,036] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:22,036] DEBUG - XmlSerializer.save() : timing 39 at [save]
[2010-01-25 00:29:22,036] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:22,036] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:22,036] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,036] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,036] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,037] DEBUG - UpdateThread.update() : total 333, complete 16
[2010-01-25 00:29:22,037] DEBUG - UpdateThread.update() : update 819203, type class Levelone
[2010-01-25 00:29:22,037] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,039] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,040] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,042] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,042] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,042] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,042] DEBUG - UpdateThread.update() : total 333, complete 17
[2010-01-25 00:29:22,042] DEBUG - UpdateThread.update() : update 753668, type class Levelthree
[2010-01-25 00:29:22,042] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,042] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,044] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,046] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,046] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,046] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,046] DEBUG - UpdateThread.update() : total 333, complete 18
[2010-01-25 00:29:22,047] DEBUG - UpdateThread.update() : update 786437, type class Leveltwo
[2010-01-25 00:29:22,047] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,049] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,051] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,051] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,051] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,051] DEBUG - UpdateThread.update() : total 333, complete 19
[2010-01-25 00:29:22,051] DEBUG - UpdateThread.update() : update 753669, type class Levelthree
[2010-01-25 00:29:22,052] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,053] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,055] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,055] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,055] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,055] DEBUG - UpdateThread.update() : total 333, complete 20
[2010-01-25 00:29:22,055] DEBUG - UpdateThread.update() : update 819202, type class Levelone
[2010-01-25 00:29:22,056] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,057] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,059] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,059] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,059] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,059] DEBUG - UpdateThread.update() : total 333, complete 21
[2010-01-25 00:29:22,060] DEBUG - UpdateThread.update() : update 786436, type class Leveltwo
[2010-01-25 00:29:22,061] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,062] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,074] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:22,081] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,083] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,087] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,087] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,087] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,087] DEBUG - UpdateThread.update() : total 333, complete 22
[2010-01-25 00:29:22,087] DEBUG - UpdateThread.update() : update 1015808, type class BoolTest
[2010-01-25 00:29:22,111] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:29:22,113] DEBUG - XmlSerializer.save() : timing 40 at [extract]
[2010-01-25 00:29:22,113] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:22,114] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-25 00:29:22,114] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,115] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,115] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:29:22,115] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:22,115] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:22,116] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:22,118] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:22,118] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:22,119] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:22,119] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:22,119] DEBUG - UpdateCache.remove() : size before 13
[2010-01-25 00:29:22,119] DEBUG - UpdateCache.remove() : size after 13
[2010-01-25 00:29:22,119] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:22,120] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:22,120] DEBUG - XmlSerializer.save() : timing 6 at [storeAll]
[2010-01-25 00:29:22,122] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:29:22,122] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212418]
[2010-01-25 00:29:22,122] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,130] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,130] DEBUG - UpdateCache.update() : update [class Address], id [1081347]
[2010-01-25 00:29:22,130] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,135] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,135] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,135] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,135] DEBUG - UpdateThread.update() : total 333, complete 23
[2010-01-25 00:29:22,135] DEBUG - UpdateThread.update() : update 1015808, type class BoolTest
[2010-01-25 00:29:22,136] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,136] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,136] DEBUG - UpdateCache.update() : update [class Statistics], id [1114114]
[2010-01-25 00:29:22,137] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:22,137] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,139] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,139] DEBUG - UpdateCache.update() : update [class Favorite], id [1146884]
[2010-01-25 00:29:22,139] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,139] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,139] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,139] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,139] DEBUG - UpdateThread.update() : total 333, complete 24
[2010-01-25 00:29:22,139] DEBUG - UpdateThread.update() : update 1015808, type class BoolTest
[2010-01-25 00:29:22,140] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,141] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,141] DEBUG - UpdateCache.update() : update [class Favorite], id [1146885]
[2010-01-25 00:29:22,141] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,141] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,143] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,143] DEBUG - UpdateCache.update() : update [class Remover], id [1179650]
[2010-01-25 00:29:22,143] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:22,145] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,145] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212418]
[2010-01-25 00:29:22,145] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,145] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,145] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,145] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,145] DEBUG - UpdateThread.update() : total 333, complete 25
[2010-01-25 00:29:22,146] DEBUG - UpdateThread.update() : update 688129, type class AddressBook
[2010-01-25 00:29:22,159] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,159] DEBUG - UpdateCache.update() : update [class Address], id [1081347]
[2010-01-25 00:29:22,159] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,162] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,162] DEBUG - UpdateCache.update() : update [class Statistics], id [1114114]
[2010-01-25 00:29:22,162] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:22,164] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,164] DEBUG - UpdateCache.update() : update [class Favorite], id [1146884]
[2010-01-25 00:29:22,164] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,166] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,166] DEBUG - UpdateCache.update() : update [class Favorite], id [1146885]
[2010-01-25 00:29:22,166] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,167] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,168] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,168] DEBUG - UpdateCache.update() : update [class Remover], id [1179650]
[2010-01-25 00:29:22,168] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:22,169] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,169] DEBUG - XmlSerializer.save() : timing 47 at [cache]
[2010-01-25 00:29:22,204] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:22,204] DEBUG - XmlSerializer.save() : timing 35 at [save]
[2010-01-25 00:29:22,204] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:22,204] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:22,209] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,211] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,244] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,253] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,256] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,257] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:22,262] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,265] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,268] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,268] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,281] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:22,281] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,281] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,281] DEBUG - UpdateThread.update() : total 333, complete 26
[2010-01-25 00:29:22,282] DEBUG - UpdateThread.update() : update 557057, type class Address
[2010-01-25 00:29:22,284] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,288] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,290] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,293] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,293] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,298] DEBUG - XmlSerializer.save() : timing 41 at [extract]
[2010-01-25 00:29:22,298] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:22,311] DEBUG - XmlSerializer.save() : timing 13 at [lock]
[2010-01-25 00:29:22,311] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,321] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:22,321] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,321] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:22,321] DEBUG - UpdateThread.update() : total 333, complete 27
[2010-01-25 00:29:22,325] DEBUG - UpdateThread.update() : update 589825, type class Statistics
[2010-01-25 00:29:22,328] DEBUG - XmlCompare.next(): hit  <name>robs address book</name> vs.  <name>set another name</name>
[2010-01-25 00:29:22,328] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:22,329] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,330] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:22,331] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,331] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,341] DEBUG - XmlCompare.compare() : [[1212418:address-book]]
[2010-01-25 00:29:22,341] DEBUG - XmlSerializer.save() : timing 30 at [changed]
[2010-01-25 00:29:22,342] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [set another name], old [robs address book]
[2010-01-25 00:29:22,344] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:22,345] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,345] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:22,345] DEBUG - UpdateThread.update() : total 333, complete 28
[2010-01-25 00:29:22,345] DEBUG - XmlSerializer().storeAll() : old [1081347]
[2010-01-25 00:29:22,345] DEBUG - UpdateThread.update() : update 622594, type class Favorite
[2010-01-25 00:29:22,345] DEBUG - XmlSerializer().storeAll() : new [1081347]
[2010-01-25 00:29:22,345] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,347] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,347] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,349] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,349] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,350] DEBUG - XmlSerializer().storeAll() : old [1146884, 1146885]
[2010-01-25 00:29:22,350] DEBUG - XmlSerializer().storeAll() : new [1146884, 1146885]
[2010-01-25 00:29:22,351] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1212418]
[2010-01-25 00:29:22,351] DEBUG - XmlSerializer.save() : timing 10 at [storeAll]
[2010-01-25 00:29:22,354] DEBUG - XmlSerializer.save() : timing 3 at [findupdate]
[2010-01-25 00:29:22,354] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212418]
[2010-01-25 00:29:22,354] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,361] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:22,361] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,361] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:22,361] DEBUG - UpdateThread.update() : total 333, complete 29
[2010-01-25 00:29:22,361] DEBUG - UpdateThread.update() : update 622595, type class Favorite
[2010-01-25 00:29:22,361] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,361] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,361] DEBUG - XmlSerializer.save() : timing 7 at [cache]
[2010-01-25 00:29:22,363] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,363] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,365] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,365] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,369] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:22,369] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,369] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:22,369] DEBUG - UpdateThread.update() : total 333, complete 30
[2010-01-25 00:29:22,372] DEBUG - UpdateThread.update() : update 655361, type class Remover
[2010-01-25 00:29:22,373] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:22,375] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,375] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:22,376] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,376] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,378] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:22,378] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:22,378] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:22,378] DEBUG - XmlSerializer.save() : timing 17 at [save]
[2010-01-25 00:29:22,378] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:22,378] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:29:22,381] DEBUG - Queries.load() :  load from stream [queries.xml]
[2010-01-25 00:29:22,396] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,396] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,396] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,396] DEBUG - UpdateThread.update() : total 333, complete 31
[2010-01-25 00:29:22,397] DEBUG - UpdateThread.update() : update 688129, type class AddressBook
[2010-01-25 00:29:22,398] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,399] DEBUG - Queries.load() :  loaded 9
[2010-01-25 00:29:22,399] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,402] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,402] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,402] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,402] DEBUG - UpdateThread.update() : total 333, complete 32
[2010-01-25 00:29:22,402] DEBUG - UpdateThread.update() : update 557057, type class Address
[2010-01-25 00:29:22,405] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,407] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,409] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,409] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,409] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,409] DEBUG - UpdateThread.update() : total 333, complete 33
[2010-01-25 00:29:22,410] DEBUG - UpdateThread.update() : update 589825, type class Statistics
[2010-01-25 00:29:22,410] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:29:22,410] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,411] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,414] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,414] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,414] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,414] DEBUG - UpdateThread.update() : total 333, complete 34
[2010-01-25 00:29:22,416] DEBUG - UpdateThread.update() : update 622594, type class Favorite
[2010-01-25 00:29:22,416] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,417] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,419] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,419] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,419] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,419] DEBUG - UpdateThread.update() : total 333, complete 35
[2010-01-25 00:29:22,420] DEBUG - UpdateThread.update() : update 622595, type class Favorite
[2010-01-25 00:29:22,424] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,425] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,427] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,427] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,427] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,427] DEBUG - UpdateThread.update() : total 333, complete 36
[2010-01-25 00:29:22,427] DEBUG - UpdateThread.update() : update 655361, type class Remover
[2010-01-25 00:29:22,428] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,429] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,430] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,431] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,431] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,431] DEBUG - UpdateThread.update() : total 333, complete 37
[2010-01-25 00:29:22,431] DEBUG - UpdateThread.update() : update 688129, type class AddressBook
[2010-01-25 00:29:22,432] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,433] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,435] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,435] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,435] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,435] DEBUG - UpdateThread.update() : total 333, complete 38
[2010-01-25 00:29:22,436] DEBUG - UpdateThread.update() : update 557058, type class Address
[2010-01-25 00:29:22,437] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,439] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,440] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,442] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,443] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,454] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,454] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,454] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,454] DEBUG - UpdateThread.update() : total 333, complete 39
[2010-01-25 00:29:22,454] DEBUG - UpdateThread.update() : update 688130, type class AddressBook
[2010-01-25 00:29:22,456] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,487] DEBUG - XmlSerializer.sqlLoad() : timing 45 at [query]
[2010-01-25 00:29:22,492] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,494] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,507] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,508] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:22,508] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,512] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:22,512] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,512] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,512] DEBUG - UpdateThread.update() : total 333, complete 40
[2010-01-25 00:29:22,512] DEBUG - UpdateThread.update() : update 557059, type class Address
[2010-01-25 00:29:22,514] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,514] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,516] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,516] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,517] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,519] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,520] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,535] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,535] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,535] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,535] DEBUG - UpdateThread.update() : total 333, complete 41
[2010-01-25 00:29:22,536] DEBUG - UpdateThread.update() : update 589826, type class Statistics
[2010-01-25 00:29:22,536] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:22,537] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,538] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:22,538] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,539] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,564] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,564] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,564] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,564] DEBUG - UpdateThread.update() : total 333, complete 42
[2010-01-25 00:29:22,564] DEBUG - UpdateThread.update() : update 622596, type class Favorite
[2010-01-25 00:29:22,564] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,566] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,567] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,568] DEBUG - XmlSerializer.save() : timing 60 at [extract]
[2010-01-25 00:29:22,568] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,568] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,568] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:22,568] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:22,570] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,570] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,570] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,570] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,570] DEBUG - UpdateThread.update() : total 333, complete 43
[2010-01-25 00:29:22,570] DEBUG - UpdateThread.update() : update 622597, type class Favorite
[2010-01-25 00:29:22,571] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,571] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,571] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,572] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,572] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,572] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,573] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,573] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,573] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,576] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,576] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,577] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,577] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,577] DEBUG - UpdateThread.update() : total 333, complete 44
[2010-01-25 00:29:22,577] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,577] DEBUG - UpdateThread.update() : update 655362, type class Remover
[2010-01-25 00:29:22,577] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:22,578] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,578] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,579] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,579] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,580] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,580] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:22,581] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,581] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,581] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:29:22,582] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:29:22,582] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:22,583] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:22,583] DEBUG - XmlSerializer().storeAll() : new [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
[2010-01-25 00:29:22,584] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:22,584] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:22,585] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:22,585] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,585] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:22,585] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,585] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:22,585] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,585] DEBUG - UpdateThread.update() : total 333, complete 45
[2010-01-25 00:29:22,585] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:22,585] DEBUG - UpdateThread.update() : update 688130, type class AddressBook
[2010-01-25 00:29:22,586] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:22,586] DEBUG - XmlSerializer.save() : timing 18 at [storeAll]
[2010-01-25 00:29:22,587] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,589] DEBUG - XmlSerializer.save() : timing 3 at [findupdate]
[2010-01-25 00:29:22,589] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212419]
[2010-01-25 00:29:22,589] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,600] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,602] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,602] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,602] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,602] DEBUG - UpdateThread.update() : total 333, complete 46
[2010-01-25 00:29:22,602] DEBUG - UpdateThread.update() : update 557059, type class Address
[2010-01-25 00:29:22,603] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,604] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,606] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,607] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,607] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,607] DEBUG - UpdateThread.update() : total 333, complete 47
[2010-01-25 00:29:22,607] DEBUG - UpdateThread.update() : update 589826, type class Statistics
[2010-01-25 00:29:22,608] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,609] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,611] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,611] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,611] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,611] DEBUG - UpdateThread.update() : total 333, complete 48
[2010-01-25 00:29:22,611] DEBUG - UpdateThread.update() : update 622596, type class Favorite
[2010-01-25 00:29:22,612] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,613] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,615] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,615] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,615] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,615] DEBUG - UpdateThread.update() : total 333, complete 49
[2010-01-25 00:29:22,615] DEBUG - UpdateThread.update() : update 622597, type class Favorite
[2010-01-25 00:29:22,616] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,617] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,618] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,618] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,618] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,618] DEBUG - UpdateThread.update() : total 333, complete 50
[2010-01-25 00:29:22,619] DEBUG - UpdateThread.update() : update 655362, type class Remover
[2010-01-25 00:29:22,620] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,621] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,623] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,623] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,623] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,623] DEBUG - UpdateThread.update() : total 333, complete 51
[2010-01-25 00:29:22,624] DEBUG - UpdateThread.update() : update 688130, type class AddressBook
[2010-01-25 00:29:22,625] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:22,626] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,628] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,628] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,628] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,628] DEBUG - UpdateThread.update() : total 333, complete 52
[2010-01-25 00:29:22,628] DEBUG - UpdateThread.update() : update 688131, type class AddressBook
[2010-01-25 00:29:22,630] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,630] DEBUG - UpdateCache.update() : update [class Address], id [1081348]
[2010-01-25 00:29:22,630] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,631] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,632] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,632] DEBUG - UpdateCache.update() : update [class Address], id [1081349]
[2010-01-25 00:29:22,632] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,638] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,638] DEBUG - UpdateCache.update() : update [class Address], id [1081350]
[2010-01-25 00:29:22,638] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,641] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,641] DEBUG - UpdateCache.update() : update [class Address], id [1081351]
[2010-01-25 00:29:22,641] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,643] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,643] DEBUG - UpdateCache.update() : update [class Address], id [1081352]
[2010-01-25 00:29:22,643] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,645] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,645] DEBUG - UpdateCache.update() : update [class Address], id [1081353]
[2010-01-25 00:29:22,645] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,647] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,647] DEBUG - UpdateCache.update() : update [class Address], id [1081354]
[2010-01-25 00:29:22,647] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,649] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,650] DEBUG - UpdateCache.update() : update [class Address], id [1081355]
[2010-01-25 00:29:22,650] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,653] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,653] DEBUG - UpdateCache.update() : update [class Address], id [1081356]
[2010-01-25 00:29:22,653] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,657] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,658] DEBUG - UpdateCache.update() : update [class Address], id [1081357]
[2010-01-25 00:29:22,658] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,659] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,659] DEBUG - UpdateCache.update() : update [class Address], id [1081358]
[2010-01-25 00:29:22,659] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,662] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,662] DEBUG - UpdateCache.update() : update [class Address], id [1081359]
[2010-01-25 00:29:22,662] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,665] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,666] DEBUG - UpdateCache.update() : update [class Address], id [1081360]
[2010-01-25 00:29:22,666] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,667] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,667] DEBUG - UpdateCache.update() : update [class Address], id [1081361]
[2010-01-25 00:29:22,667] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,669] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,669] DEBUG - UpdateCache.update() : update [class Statistics], id [1114115]
[2010-01-25 00:29:22,669] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:22,670] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,670] DEBUG - UpdateCache.update() : update [class Favorite], id [1146886]
[2010-01-25 00:29:22,670] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,671] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,672] DEBUG - UpdateCache.update() : update [class Favorite], id [1146887]
[2010-01-25 00:29:22,672] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,673] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,673] DEBUG - UpdateCache.update() : update [class Remover], id [1179651]
[2010-01-25 00:29:22,673] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:22,674] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,674] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212419]
[2010-01-25 00:29:22,675] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,721] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,721] DEBUG - UpdateCache.update() : update [class Address], id [1081348]
[2010-01-25 00:29:22,721] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,723] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,723] DEBUG - UpdateCache.update() : update [class Address], id [1081349]
[2010-01-25 00:29:22,723] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,725] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,725] DEBUG - UpdateCache.update() : update [class Address], id [1081350]
[2010-01-25 00:29:22,725] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,726] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,726] DEBUG - UpdateCache.update() : update [class Address], id [1081351]
[2010-01-25 00:29:22,726] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,728] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,728] DEBUG - UpdateCache.update() : update [class Address], id [1081352]
[2010-01-25 00:29:22,728] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,729] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,729] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,729] DEBUG - UpdateCache.update() : update [class Address], id [1081353]
[2010-01-25 00:29:22,729] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,731] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,736] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,736] DEBUG - UpdateCache.update() : update [class Address], id [1081354]
[2010-01-25 00:29:22,736] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,738] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,738] DEBUG - UpdateCache.update() : update [class Address], id [1081355]
[2010-01-25 00:29:22,738] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,743] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,743] DEBUG - UpdateCache.update() : update [class Address], id [1081356]
[2010-01-25 00:29:22,743] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,744] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,744] DEBUG - UpdateCache.update() : update [class Address], id [1081357]
[2010-01-25 00:29:22,744] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,746] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,746] DEBUG - UpdateCache.update() : update [class Address], id [1081358]
[2010-01-25 00:29:22,746] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,747] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,747] DEBUG - UpdateCache.update() : update [class Address], id [1081359]
[2010-01-25 00:29:22,747] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,751] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,751] DEBUG - UpdateCache.update() : update [class Address], id [1081360]
[2010-01-25 00:29:22,751] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,753] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,753] DEBUG - UpdateCache.update() : update [class Address], id [1081361]
[2010-01-25 00:29:22,753] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,756] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,756] DEBUG - UpdateCache.update() : update [class Statistics], id [1114115]
[2010-01-25 00:29:22,757] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:22,758] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,758] DEBUG - UpdateCache.update() : update [class Favorite], id [1146886]
[2010-01-25 00:29:22,759] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,761] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,761] DEBUG - UpdateCache.update() : update [class Favorite], id [1146887]
[2010-01-25 00:29:22,761] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,762] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,762] DEBUG - UpdateCache.update() : update [class Remover], id [1179651]
[2010-01-25 00:29:22,762] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:22,764] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:22,764] DEBUG - XmlSerializer.save() : timing 175 at [cache]
[2010-01-25 00:29:22,767] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,768] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,782] DEBUG - LockItem.unlock() : 19 current
[2010-01-25 00:29:22,782] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,782] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,782] DEBUG - UpdateThread.update() : total 333, complete 53
[2010-01-25 00:29:22,782] DEBUG - UpdateThread.update() : update 557060, type class Address
[2010-01-25 00:29:22,783] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,785] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,790] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,791] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,791] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,820] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,820] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,820] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,820] DEBUG - UpdateThread.update() : total 333, complete 54
[2010-01-25 00:29:22,820] DEBUG - UpdateThread.update() : update 557061, type class Address
[2010-01-25 00:29:22,821] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,823] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,824] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,825] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,825] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,838] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,839] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,839] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,839] DEBUG - UpdateThread.update() : total 333, complete 55
[2010-01-25 00:29:22,839] DEBUG - UpdateThread.update() : update 557062, type class Address
[2010-01-25 00:29:22,840] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,842] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,843] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,845] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,845] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,853] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,853] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,853] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,853] DEBUG - UpdateThread.update() : total 333, complete 56
[2010-01-25 00:29:22,853] DEBUG - UpdateThread.update() : update 557063, type class Address
[2010-01-25 00:29:22,854] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,855] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,856] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,857] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,858] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,861] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,861] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,861] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,861] DEBUG - UpdateThread.update() : total 333, complete 57
[2010-01-25 00:29:22,861] DEBUG - UpdateThread.update() : update 557064, type class Address
[2010-01-25 00:29:22,862] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:22,862] DEBUG - XmlSerializer.save() : timing 98 at [save]
[2010-01-25 00:29:22,862] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:22,862] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:22,864] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,866] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,867] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,869] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,869] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,872] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,872] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,872] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,873] DEBUG - UpdateThread.update() : total 333, complete 58
[2010-01-25 00:29:22,873] DEBUG - UpdateThread.update() : update 557065, type class Address
[2010-01-25 00:29:22,874] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,875] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,876] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,876] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,877] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,878] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,878] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,887] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,887] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,888] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,888] DEBUG - UpdateThread.update() : total 333, complete 59
[2010-01-25 00:29:22,888] DEBUG - UpdateThread.update() : update 557066, type class Address
[2010-01-25 00:29:22,889] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,891] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,892] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,893] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,893] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,897] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,897] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,897] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,897] DEBUG - UpdateThread.update() : total 333, complete 60
[2010-01-25 00:29:22,898] DEBUG - UpdateThread.update() : update 557067, type class Address
[2010-01-25 00:29:22,899] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,900] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,901] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,904] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,904] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,907] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,908] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,908] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,908] DEBUG - UpdateThread.update() : total 333, complete 61
[2010-01-25 00:29:22,908] DEBUG - UpdateThread.update() : update 557068, type class Address
[2010-01-25 00:29:22,909] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,912] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,913] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,915] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,915] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,918] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,919] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,919] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,919] DEBUG - UpdateThread.update() : total 333, complete 62
[2010-01-25 00:29:22,919] DEBUG - UpdateThread.update() : update 557069, type class Address
[2010-01-25 00:29:22,919] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,921] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,922] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,923] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,923] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,926] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,926] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,926] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,926] DEBUG - UpdateThread.update() : total 333, complete 63
[2010-01-25 00:29:22,926] DEBUG - UpdateThread.update() : update 557070, type class Address
[2010-01-25 00:29:22,927] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,928] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,935] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,936] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,936] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,952] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:22,953] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,953] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,953] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,953] DEBUG - UpdateThread.update() : total 333, complete 64
[2010-01-25 00:29:22,953] DEBUG - UpdateThread.update() : update 557071, type class Address
[2010-01-25 00:29:22,955] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,956] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,957] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,958] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,958] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,961] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,961] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,961] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,962] DEBUG - UpdateThread.update() : total 333, complete 65
[2010-01-25 00:29:22,962] DEBUG - UpdateThread.update() : update 557072, type class Address
[2010-01-25 00:29:22,963] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,964] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,965] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,966] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,966] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,970] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,970] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,970] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,970] DEBUG - UpdateThread.update() : total 333, complete 66
[2010-01-25 00:29:22,970] DEBUG - UpdateThread.update() : update 557073, type class Address
[2010-01-25 00:29:22,971] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,972] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,972] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:22,973] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:22,974] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,974] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,977] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,977] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,977] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,977] DEBUG - UpdateThread.update() : total 333, complete 67
[2010-01-25 00:29:22,978] DEBUG - UpdateThread.update() : update 589827, type class Statistics
[2010-01-25 00:29:22,981] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:22,982] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,983] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:22,984] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,986] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,986] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,986] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:22,991] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,991] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,991] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,991] DEBUG - UpdateThread.update() : total 333, complete 68
[2010-01-25 00:29:22,992] DEBUG - UpdateThread.update() : update 622598, type class Favorite
[2010-01-25 00:29:22,992] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,993] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:22,993] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:22,996] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:22,996] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:22,998] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:22,998] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:22,998] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:22,998] DEBUG - UpdateThread.update() : total 333, complete 69
[2010-01-25 00:29:22,998] DEBUG - UpdateThread.update() : update 622599, type class Favorite
[2010-01-25 00:29:22,999] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,000] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,001] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,001] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,001] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,005] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,005] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,005] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,005] DEBUG - UpdateThread.update() : total 333, complete 70
[2010-01-25 00:29:23,005] DEBUG - UpdateThread.update() : update 655363, type class Remover
[2010-01-25 00:29:23,006] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,007] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,007] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,008] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,008] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,011] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,011] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,011] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,011] DEBUG - UpdateThread.update() : total 333, complete 71
[2010-01-25 00:29:23,011] DEBUG - UpdateThread.update() : update 688131, type class AddressBook
[2010-01-25 00:29:23,012] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,014] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,016] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,016] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,016] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,016] DEBUG - UpdateThread.update() : total 333, complete 72
[2010-01-25 00:29:23,016] DEBUG - UpdateThread.update() : update 557060, type class Address
[2010-01-25 00:29:23,017] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,018] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,021] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,021] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,021] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,021] DEBUG - UpdateThread.update() : total 333, complete 73
[2010-01-25 00:29:23,021] DEBUG - UpdateThread.update() : update 557061, type class Address
[2010-01-25 00:29:23,022] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,022] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,024] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,024] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,024] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,024] DEBUG - UpdateThread.update() : total 333, complete 74
[2010-01-25 00:29:23,025] DEBUG - UpdateThread.update() : update 557062, type class Address
[2010-01-25 00:29:23,025] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,026] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,028] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,028] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,028] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,028] DEBUG - UpdateThread.update() : total 333, complete 75
[2010-01-25 00:29:23,029] DEBUG - UpdateThread.update() : update 557063, type class Address
[2010-01-25 00:29:23,029] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,031] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,033] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,033] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,033] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,033] DEBUG - UpdateThread.update() : total 333, complete 76
[2010-01-25 00:29:23,033] DEBUG - UpdateThread.update() : update 557064, type class Address
[2010-01-25 00:29:23,035] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,035] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,037] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,037] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,037] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,037] DEBUG - UpdateThread.update() : total 333, complete 77
[2010-01-25 00:29:23,039] DEBUG - UpdateThread.update() : update 557065, type class Address
[2010-01-25 00:29:23,039] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,043] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,046] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,046] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,046] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,046] DEBUG - UpdateThread.update() : total 333, complete 78
[2010-01-25 00:29:23,046] DEBUG - UpdateThread.update() : update 557066, type class Address
[2010-01-25 00:29:23,047] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,048] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,050] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,050] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,050] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,050] DEBUG - UpdateThread.update() : total 333, complete 79
[2010-01-25 00:29:23,051] DEBUG - UpdateThread.update() : update 557067, type class Address
[2010-01-25 00:29:23,051] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,052] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,054] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,054] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,054] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,054] DEBUG - UpdateThread.update() : total 333, complete 80
[2010-01-25 00:29:23,055] DEBUG - UpdateThread.update() : update 557068, type class Address
[2010-01-25 00:29:23,055] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,056] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,059] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,059] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,059] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,059] DEBUG - UpdateThread.update() : total 333, complete 81
[2010-01-25 00:29:23,059] DEBUG - UpdateThread.update() : update 557069, type class Address
[2010-01-25 00:29:23,060] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,060] DEBUG - XmlSerializer.save() : timing 88 at [extract]
[2010-01-25 00:29:23,062] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:23,062] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,063] DEBUG - XmlSerializer.save() : timing 3 at [lock]
[2010-01-25 00:29:23,063] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,065] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,065] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,065] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,065] DEBUG - UpdateThread.update() : total 333, complete 82
[2010-01-25 00:29:23,065] DEBUG - UpdateThread.update() : update 557070, type class Address
[2010-01-25 00:29:23,068] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,069] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,070] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,070] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,070] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,071] DEBUG - UpdateThread.update() : total 333, complete 83
[2010-01-25 00:29:23,071] DEBUG - UpdateThread.update() : update 557071, type class Address
[2010-01-25 00:29:23,071] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,072] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,074] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,074] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,074] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,074] DEBUG - UpdateThread.update() : total 333, complete 84
[2010-01-25 00:29:23,075] DEBUG - UpdateThread.update() : update 557072, type class Address
[2010-01-25 00:29:23,075] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,079] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,081] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,081] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,081] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,081] DEBUG - UpdateThread.update() : total 333, complete 85
[2010-01-25 00:29:23,081] DEBUG - UpdateThread.update() : update 557073, type class Address
[2010-01-25 00:29:23,082] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,083] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,085] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,085] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,085] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,085] DEBUG - UpdateThread.update() : total 333, complete 86
[2010-01-25 00:29:23,085] DEBUG - UpdateThread.update() : update 589827, type class Statistics
[2010-01-25 00:29:23,085] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,086] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,089] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,089] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,089] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,089] DEBUG - UpdateThread.update() : total 333, complete 87
[2010-01-25 00:29:23,090] DEBUG - UpdateThread.update() : update 622598, type class Favorite
[2010-01-25 00:29:23,090] DEBUG - XmlCompare.next(): hit  <name>robs address book</name> vs.  <name>robs address book1</name>
[2010-01-25 00:29:23,090] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,091] DEBUG - XmlCompare.next(): hit   <street>1382 5th Ave</street> vs.   <street>1</street>
[2010-01-25 00:29:23,091] DEBUG - XmlCompare.next(): hit   <street>Apt. 2</street> vs.   <city>San Francisco</city>
[2010-01-25 00:29:23,092] DEBUG - XmlCompare.next(): hit   <street>Bldg. 14</street> vs.   <state>CA</state>
[2010-01-25 00:29:23,092] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,092] DEBUG - XmlCompare.next(): hit   <street>Station. 12</street> vs.   <zip-code>94122</zip-code>
[2010-01-25 00:29:23,093] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <region>USA</region>
[2010-01-25 00:29:23,093] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <region>North America</region>
[2010-01-25 00:29:23,095] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.  </address>
[2010-01-25 00:29:23,095] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,095] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,095] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,095] DEBUG - UpdateThread.update() : total 333, complete 88
[2010-01-25 00:29:23,096] DEBUG - UpdateThread.update() : update 622599, type class Favorite
[2010-01-25 00:29:23,096] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.  <address id="1081348" type="home">
[2010-01-25 00:29:23,096] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,096] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <street>1</street>
[2010-01-25 00:29:23,097] DEBUG - XmlCompare.next(): hit  </address> vs.   <city>San Francisco</city>
[2010-01-25 00:29:23,098] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,101] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,101] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,101] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,101] DEBUG - UpdateThread.update() : total 333, complete 89
[2010-01-25 00:29:23,101] DEBUG - UpdateThread.update() : update 655363, type class Remover
[2010-01-25 00:29:23,102] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,103] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,105] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,105] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,105] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,105] DEBUG - UpdateThread.update() : total 333, complete 90
[2010-01-25 00:29:23,105] DEBUG - UpdateThread.update() : update 688131, type class AddressBook
[2010-01-25 00:29:23,109] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,110] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,112] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,112] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,112] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,113] DEBUG - UpdateThread.update() : total 333, complete 91
[2010-01-25 00:29:23,113] DEBUG - UpdateThread.update() : update 557060, type class Address
[2010-01-25 00:29:23,114] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,115] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,120] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,120] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,120] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,120] DEBUG - UpdateThread.update() : total 333, complete 92
[2010-01-25 00:29:23,120] DEBUG - UpdateThread.update() : update 688131, type class AddressBook
[2010-01-25 00:29:23,121] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,122] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,124] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,124] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,124] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,124] DEBUG - UpdateThread.update() : total 333, complete 93
[2010-01-25 00:29:23,124] DEBUG - UpdateThread.update() : update 557060, type class Address
[2010-01-25 00:29:23,125] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,126] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,128] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,128] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,128] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,128] DEBUG - UpdateThread.update() : total 333, complete 94
[2010-01-25 00:29:23,129] DEBUG - UpdateThread.update() : update 688131, type class AddressBook
[2010-01-25 00:29:23,130] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,131] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,132] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,132] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,132] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,132] DEBUG - UpdateThread.update() : total 333, complete 95
[2010-01-25 00:29:23,133] DEBUG - UpdateThread.update() : update 557060, type class Address
[2010-01-25 00:29:23,133] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,134] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,136] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,136] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,136] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,136] DEBUG - UpdateThread.update() : total 333, complete 96
[2010-01-25 00:29:23,137] DEBUG - UpdateThread.update() : update 688132, type class AddressBook
[2010-01-25 00:29:23,139] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,152] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,154] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,161] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,161] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,166] DEBUG - XmlCompare.compare() : [[1081348:address, 1212419:address-book]]
[2010-01-25 00:29:23,167] DEBUG - XmlSerializer.save() : timing 104 at [changed]
[2010-01-25 00:29:23,167] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book1], old [robs address book]
[2010-01-25 00:29:23,167] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:29:23,167] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,168] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,168] DEBUG - UpdateThread.update() : total 333, complete 97
[2010-01-25 00:29:23,168] DEBUG - UpdateThread.update() : update 557074, type class Address
[2010-01-25 00:29:23,169] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,171] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,171] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,171] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1]], old [[Station. 12, Bldg. 14, Apt. 2, 1382 5th Ave]]
[2010-01-25 00:29:23,172] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,172] DEBUG - XmlSerializer().storeAll() :  save [Address], id [1081348]
[2010-01-25 00:29:23,172] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,177] DEBUG - XmlSerializer().storeAll() : old [1081348, 1081349, 1081350, 1081351, 1081352, 1081353, 1081354, 1081355, 1081356, 1081357, 1081358, 1081359, 1081360, 1081361]
[2010-01-25 00:29:23,177] DEBUG - XmlSerializer().storeAll() : new [1081348, 1081349, 1081350, 1081351, 1081352, 1081353, 1081354, 1081355, 1081356, 1081357, 1081358, 1081359, 1081360, 1081361]
[2010-01-25 00:29:23,179] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,180] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,180] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,180] DEBUG - UpdateThread.update() : total 333, complete 98
[2010-01-25 00:29:23,181] DEBUG - UpdateThread.update() : update 589828, type class Statistics
[2010-01-25 00:29:23,182] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,183] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,185] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,186] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,186] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,188] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,188] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,188] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,188] DEBUG - UpdateThread.update() : total 333, complete 99
[2010-01-25 00:29:23,189] DEBUG - UpdateThread.update() : update 622600, type class Favorite
[2010-01-25 00:29:23,189] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,190] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,190] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 1081348, Address : 1081349, Address : 1081350, Address : 1081351, Address : 1081352, Address : 1081353, Address : 1081354, Address : 1081355, Address : 1081356, Address : 1081357, Address : 1081358, Address : 1081359, Address : 1081360, Address : 1081361]], old [[Address : 1081348, Address : 1081349, Address : 1081350, Address : 1081351, Address : 1081352, Address : 1081353, Address : 1081354, Address : 1081355, Address : 1081356, Address : 1081357, Address : 1081358, Address : 1081359, Address : 1081360, Address : 1081361]]
[2010-01-25 00:29:23,191] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,192] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,193] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,195] DEBUG - XmlSerializer().storeAll() : old [1146886, 1146887]
[2010-01-25 00:29:23,195] DEBUG - XmlSerializer().storeAll() : new [1146886, 1146887]
[2010-01-25 00:29:23,195] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,195] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,195] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,195] DEBUG - UpdateThread.update() : total 333, complete 100
[2010-01-25 00:29:23,195] DEBUG - UpdateThread.update() : update 622601, type class Favorite
[2010-01-25 00:29:23,195] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1212419]
[2010-01-25 00:29:23,195] DEBUG - XmlSerializer.save() : timing 28 at [storeAll]
[2010-01-25 00:29:23,196] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,197] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,197] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,198] DEBUG - XmlSerializer.save() : timing 3 at [findupdate]
[2010-01-25 00:29:23,198] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212419]
[2010-01-25 00:29:23,198] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,198] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,198] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,201] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,201] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,201] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,201] DEBUG - UpdateThread.update() : total 333, complete 101
[2010-01-25 00:29:23,202] DEBUG - UpdateThread.update() : update 655364, type class Remover
[2010-01-25 00:29:23,202] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,203] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,203] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,204] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,204] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,207] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,207] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,207] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,207] DEBUG - UpdateThread.update() : total 333, complete 102
[2010-01-25 00:29:23,207] DEBUG - UpdateThread.update() : update 688132, type class AddressBook
[2010-01-25 00:29:23,208] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,209] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,211] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,214] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,214] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,214] DEBUG - UpdateThread.update() : total 333, complete 103
[2010-01-25 00:29:23,214] DEBUG - UpdateThread.update() : update 557074, type class Address
[2010-01-25 00:29:23,215] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,216] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,218] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,218] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,218] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,218] DEBUG - UpdateThread.update() : total 333, complete 104
[2010-01-25 00:29:23,218] DEBUG - UpdateThread.update() : update 589828, type class Statistics
[2010-01-25 00:29:23,219] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,223] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,225] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,225] DEBUG - UpdateCache.update() : update [class Address], id [1081348]
[2010-01-25 00:29:23,225] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,225] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,225] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,225] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,225] DEBUG - UpdateThread.update() : total 333, complete 105
[2010-01-25 00:29:23,226] DEBUG - UpdateThread.update() : update 622600, type class Favorite
[2010-01-25 00:29:23,226] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,227] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,227] DEBUG - XmlSerializer.save() : timing 29 at [cache]
[2010-01-25 00:29:23,227] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,228] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,228] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,228] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,228] DEBUG - UpdateThread.update() : total 333, complete 106
[2010-01-25 00:29:23,228] DEBUG - UpdateThread.update() : update 622601, type class Favorite
[2010-01-25 00:29:23,229] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,230] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,231] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,231] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,231] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,231] DEBUG - UpdateThread.update() : total 333, complete 107
[2010-01-25 00:29:23,232] DEBUG - UpdateThread.update() : update 655364, type class Remover
[2010-01-25 00:29:23,232] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,233] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,235] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,235] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,235] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,235] DEBUG - UpdateThread.update() : total 333, complete 108
[2010-01-25 00:29:23,235] DEBUG - UpdateThread.update() : update 688132, type class AddressBook
[2010-01-25 00:29:23,236] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,237] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,240] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,240] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,240] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,240] DEBUG - UpdateThread.update() : total 333, complete 109
[2010-01-25 00:29:23,240] DEBUG - UpdateThread.update() : update 589828, type class Statistics
[2010-01-25 00:29:23,241] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,243] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,245] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,245] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,245] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,245] DEBUG - UpdateThread.update() : total 333, complete 110
[2010-01-25 00:29:23,246] DEBUG - UpdateThread.update() : update 688133, type class AddressBook
[2010-01-25 00:29:23,247] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,253] DEBUG - LockItem.unlock() : 19 current
[2010-01-25 00:29:23,253] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:23,253] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,253] DEBUG - XmlSerializer.save() : timing 26 at [save]
[2010-01-25 00:29:23,254] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:23,254] DEBUG - testUpdateTiming() : timing 303 at [save1]
[2010-01-25 00:29:23,254] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,261] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,262] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,268] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,268] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,272] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:23,276] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,282] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,286] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:23,287] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,287] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,287] DEBUG - UpdateThread.update() : total 333, complete 111
[2010-01-25 00:29:23,287] DEBUG - UpdateThread.update() : update 557075, type class Address
[2010-01-25 00:29:23,288] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,290] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,291] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,293] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,293] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,296] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,296] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,296] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,296] DEBUG - UpdateThread.update() : total 333, complete 112
[2010-01-25 00:29:23,296] DEBUG - UpdateThread.update() : update 589829, type class Statistics
[2010-01-25 00:29:23,296] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,297] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,297] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,298] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,298] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,301] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,301] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,301] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,301] DEBUG - UpdateThread.update() : total 333, complete 113
[2010-01-25 00:29:23,301] DEBUG - UpdateThread.update() : update 622602, type class Favorite
[2010-01-25 00:29:23,302] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,302] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,304] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,305] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,305] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,308] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,308] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,309] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,309] DEBUG - UpdateThread.update() : total 333, complete 114
[2010-01-25 00:29:23,309] DEBUG - UpdateThread.update() : update 622603, type class Favorite
[2010-01-25 00:29:23,309] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,310] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,310] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,311] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,311] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,313] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,313] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,313] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,313] DEBUG - UpdateThread.update() : total 333, complete 115
[2010-01-25 00:29:23,314] DEBUG - UpdateThread.update() : update 655365, type class Remover
[2010-01-25 00:29:23,314] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,315] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,315] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,316] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,316] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,319] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,319] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,319] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,319] DEBUG - UpdateThread.update() : total 333, complete 116
[2010-01-25 00:29:23,319] DEBUG - UpdateThread.update() : update 688133, type class AddressBook
[2010-01-25 00:29:23,320] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,321] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,328] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,328] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,328] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,328] DEBUG - UpdateThread.update() : total 333, complete 117
[2010-01-25 00:29:23,328] DEBUG - UpdateThread.update() : update 557075, type class Address
[2010-01-25 00:29:23,329] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,330] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,331] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,331] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,331] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,331] DEBUG - UpdateThread.update() : total 333, complete 118
[2010-01-25 00:29:23,332] DEBUG - UpdateThread.update() : update 589829, type class Statistics
[2010-01-25 00:29:23,332] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,334] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,334] DEBUG - XmlSerializer.save() : timing 62 at [extract]
[2010-01-25 00:29:23,334] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:23,336] DEBUG - XmlSerializer.save() : timing 2 at [lock]
[2010-01-25 00:29:23,336] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,336] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,336] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,336] DEBUG - UpdateThread.update() : total 333, complete 119
[2010-01-25 00:29:23,336] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,336] DEBUG - UpdateThread.update() : update 622602, type class Favorite
[2010-01-25 00:29:23,336] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,337] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,339] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,339] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,339] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,339] DEBUG - UpdateThread.update() : total 333, complete 120
[2010-01-25 00:29:23,339] DEBUG - UpdateThread.update() : update 622603, type class Favorite
[2010-01-25 00:29:23,339] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,340] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,342] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,342] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,342] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,342] DEBUG - UpdateThread.update() : total 333, complete 121
[2010-01-25 00:29:23,342] DEBUG - UpdateThread.update() : update 655365, type class Remover
[2010-01-25 00:29:23,343] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,343] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,346] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,346] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,346] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,346] DEBUG - UpdateThread.update() : total 333, complete 122
[2010-01-25 00:29:23,346] DEBUG - UpdateThread.update() : update 622602, type class Favorite
[2010-01-25 00:29:23,346] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,347] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,352] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,353] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,353] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,353] DEBUG - UpdateThread.update() : total 333, complete 123
[2010-01-25 00:29:23,353] DEBUG - UpdateThread.update() : update 688133, type class AddressBook
[2010-01-25 00:29:23,354] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,354] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,356] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,356] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,356] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,356] DEBUG - UpdateThread.update() : total 333, complete 124
[2010-01-25 00:29:23,357] DEBUG - UpdateThread.update() : update 688134, type class AddressBook
[2010-01-25 00:29:23,358] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,359] DEBUG - XmlCompare.next(): hit  <name>robs address book1</name> vs.  <name>robs address book11</name>
[2010-01-25 00:29:23,359] DEBUG - XmlCompare.next(): hit   <street>1</street> vs.   <street>2</street>
[2010-01-25 00:29:23,360] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <street>1</street>
[2010-01-25 00:29:23,360] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <city>San Francisco</city>
[2010-01-25 00:29:23,360] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.   <state>CA</state>
[2010-01-25 00:29:23,361] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.   <zip-code>94122</zip-code>
[2010-01-25 00:29:23,361] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <region>USA</region>
[2010-01-25 00:29:23,361] DEBUG - XmlCompare.next(): hit  </address> vs.   <region>North America</region>
[2010-01-25 00:29:23,370] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,371] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,380] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,380] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,384] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:29:23,384] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,384] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,384] DEBUG - UpdateThread.update() : total 333, complete 125
[2010-01-25 00:29:23,385] DEBUG - UpdateThread.update() : update 557076, type class Address
[2010-01-25 00:29:23,385] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,387] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,388] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,389] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,389] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,395] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,395] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,395] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,395] DEBUG - UpdateThread.update() : total 333, complete 126
[2010-01-25 00:29:23,395] DEBUG - UpdateThread.update() : update 589830, type class Statistics
[2010-01-25 00:29:23,395] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,396] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,397] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,397] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,397] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,399] DEBUG - XmlCompare.compare() : [[1081348:address, 1212419:address-book]]
[2010-01-25 00:29:23,400] DEBUG - XmlSerializer.save() : timing 64 at [changed]
[2010-01-25 00:29:23,400] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book11], old [robs address book1]
[2010-01-25 00:29:23,401] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,401] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,401] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,401] DEBUG - UpdateThread.update() : total 333, complete 127
[2010-01-25 00:29:23,401] DEBUG - UpdateThread.update() : update 622604, type class Favorite
[2010-01-25 00:29:23,401] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,402] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,402] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,403] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,403] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,404] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1, 2]], old [[1]]
[2010-01-25 00:29:23,404] DEBUG - XmlSerializer().storeAll() :  save [Address], id [1081348]
[2010-01-25 00:29:23,406] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,406] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,406] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,406] DEBUG - UpdateThread.update() : total 333, complete 128
[2010-01-25 00:29:23,406] DEBUG - UpdateThread.update() : update 622605, type class Favorite
[2010-01-25 00:29:23,406] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,407] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,408] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,408] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,408] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,410] DEBUG - XmlSerializer().storeAll() : old [1081348, 1081349, 1081350, 1081351, 1081352, 1081353, 1081354, 1081355, 1081356, 1081357, 1081358, 1081359, 1081360, 1081361]
[2010-01-25 00:29:23,410] DEBUG - XmlSerializer().storeAll() : new [1081348, 1081349, 1081350, 1081351, 1081352, 1081353, 1081354, 1081355, 1081356, 1081357, 1081358, 1081359, 1081360, 1081361]
[2010-01-25 00:29:23,410] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,410] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,410] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,410] DEBUG - UpdateThread.update() : total 333, complete 129
[2010-01-25 00:29:23,411] DEBUG - UpdateThread.update() : update 655366, type class Remover
[2010-01-25 00:29:23,414] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,415] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,415] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,416] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,416] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,418] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,419] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,419] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,419] DEBUG - UpdateThread.update() : total 333, complete 130
[2010-01-25 00:29:23,419] DEBUG - UpdateThread.update() : update 688134, type class AddressBook
[2010-01-25 00:29:23,420] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,421] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 1081348, Address : 1081349, Address : 1081350, Address : 1081351, Address : 1081352, Address : 1081353, Address : 1081354, Address : 1081355, Address : 1081356, Address : 1081357, Address : 1081358, Address : 1081359, Address : 1081360, Address : 1081361]], old [[Address : 1081348, Address : 1081349, Address : 1081350, Address : 1081351, Address : 1081352, Address : 1081353, Address : 1081354, Address : 1081355, Address : 1081356, Address : 1081357, Address : 1081358, Address : 1081359, Address : 1081360, Address : 1081361]]
[2010-01-25 00:29:23,421] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,423] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,424] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,424] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,424] DEBUG - UpdateThread.update() : total 333, complete 131
[2010-01-25 00:29:23,424] DEBUG - UpdateThread.update() : update 557076, type class Address
[2010-01-25 00:29:23,424] DEBUG - XmlSerializer().storeAll() : old [1146886, 1146887]
[2010-01-25 00:29:23,425] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,426] DEBUG - XmlSerializer().storeAll() : new [1146886, 1146887]
[2010-01-25 00:29:23,427] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1212419]
[2010-01-25 00:29:23,427] DEBUG - XmlSerializer.save() : timing 27 at [storeAll]
[2010-01-25 00:29:23,427] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,429] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,429] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,429] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,429] DEBUG - UpdateThread.update() : total 333, complete 132
[2010-01-25 00:29:23,430] DEBUG - UpdateThread.update() : update 589830, type class Statistics
[2010-01-25 00:29:23,430] DEBUG - XmlSerializer.save() : timing 3 at [findupdate]
[2010-01-25 00:29:23,430] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,430] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212419]
[2010-01-25 00:29:23,430] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,431] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,433] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,433] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,433] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,433] DEBUG - UpdateThread.update() : total 333, complete 133
[2010-01-25 00:29:23,434] DEBUG - UpdateThread.update() : update 622604, type class Favorite
[2010-01-25 00:29:23,434] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,435] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,436] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,436] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,436] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,436] DEBUG - UpdateThread.update() : total 333, complete 134
[2010-01-25 00:29:23,436] DEBUG - UpdateThread.update() : update 622605, type class Favorite
[2010-01-25 00:29:23,437] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,438] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,439] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,439] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,439] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,439] DEBUG - UpdateThread.update() : total 333, complete 135
[2010-01-25 00:29:23,439] DEBUG - UpdateThread.update() : update 655366, type class Remover
[2010-01-25 00:29:23,440] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,440] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,442] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,442] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,442] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,442] DEBUG - UpdateThread.update() : total 333, complete 136
[2010-01-25 00:29:23,443] DEBUG - UpdateThread.update() : update 688134, type class AddressBook
[2010-01-25 00:29:23,443] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,445] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,447] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,447] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,447] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,447] DEBUG - UpdateThread.update() : total 333, complete 137
[2010-01-25 00:29:23,447] DEBUG - UpdateThread.update() : update 589830, type class Statistics
[2010-01-25 00:29:23,448] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,448] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,448] DEBUG - UpdateCache.update() : update [class Address], id [1081348]
[2010-01-25 00:29:23,448] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,449] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,450] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,450] DEBUG - XmlSerializer.save() : timing 20 at [cache]
[2010-01-25 00:29:23,450] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,450] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,450] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,450] DEBUG - UpdateThread.update() : total 333, complete 138
[2010-01-25 00:29:23,450] DEBUG - UpdateThread.update() : update 819200, type class Levelone
[2010-01-25 00:29:23,451] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:23,467] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,468] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:23,472] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,472] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,477] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:29:23,477] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:23,477] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:23,477] DEBUG - XmlSerializer.save() : timing 27 at [save]
[2010-01-25 00:29:23,477] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:23,477] DEBUG - testUpdateTiming() : timing 223 at [save2]
[2010-01-25 00:29:23,477] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,480] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:23,480] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,480] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,480] DEBUG - UpdateThread.update() : total 333, complete 139
[2010-01-25 00:29:23,480] DEBUG - UpdateThread.update() : update 786432, type class Leveltwo
[2010-01-25 00:29:23,481] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:23,485] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,485] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:23,488] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,488] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,490] DEBUG - LockItem.unlock() : 3 current
[2010-01-25 00:29:23,490] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,490] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,490] DEBUG - UpdateThread.update() : total 333, complete 140
[2010-01-25 00:29:23,491] DEBUG - UpdateThread.update() : update 753664, type class Levelthree
[2010-01-25 00:29:23,491] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:23,500] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,500] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:23,501] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,501] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,503] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,503] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,503] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,503] DEBUG - UpdateThread.update() : total 333, complete 141
[2010-01-25 00:29:23,503] DEBUG - UpdateThread.update() : update 753665, type class Levelthree
[2010-01-25 00:29:23,504] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:23,505] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,505] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:23,506] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,506] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,509] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,509] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,509] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,509] DEBUG - UpdateThread.update() : total 333, complete 142
[2010-01-25 00:29:23,509] DEBUG - UpdateThread.update() : update 786433, type class Leveltwo
[2010-01-25 00:29:23,509] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:23,510] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:23,512] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,513] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:23,514] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,515] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,515] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,516] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,518] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:23,518] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,518] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,518] DEBUG - UpdateThread.update() : total 333, complete 143
[2010-01-25 00:29:23,518] DEBUG - UpdateThread.update() : update 753666, type class Levelthree
[2010-01-25 00:29:23,518] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:23,519] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,520] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:23,520] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,520] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,523] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,523] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,523] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,523] DEBUG - UpdateThread.update() : total 333, complete 144
[2010-01-25 00:29:23,525] DEBUG - UpdateThread.update() : update 819200, type class Levelone
[2010-01-25 00:29:23,526] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,526] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,528] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,528] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,528] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,528] DEBUG - UpdateThread.update() : total 333, complete 145
[2010-01-25 00:29:23,529] DEBUG - UpdateThread.update() : update 786432, type class Leveltwo
[2010-01-25 00:29:23,533] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,534] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,535] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,535] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,535] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,535] DEBUG - UpdateThread.update() : total 333, complete 146
[2010-01-25 00:29:23,536] DEBUG - UpdateThread.update() : update 753664, type class Levelthree
[2010-01-25 00:29:23,536] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,537] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,539] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,539] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,539] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,539] DEBUG - UpdateThread.update() : total 333, complete 147
[2010-01-25 00:29:23,539] DEBUG - UpdateThread.update() : update 753665, type class Levelthree
[2010-01-25 00:29:23,540] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,540] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,542] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,542] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,542] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,542] DEBUG - UpdateThread.update() : total 333, complete 148
[2010-01-25 00:29:23,543] DEBUG - UpdateThread.update() : update 786433, type class Leveltwo
[2010-01-25 00:29:23,543] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,544] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,546] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,546] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,546] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,546] DEBUG - UpdateThread.update() : total 333, complete 149
[2010-01-25 00:29:23,546] DEBUG - UpdateThread.update() : update 753666, type class Levelthree
[2010-01-25 00:29:23,547] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,548] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,550] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,550] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,550] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,550] DEBUG - UpdateThread.update() : total 333, complete 150
[2010-01-25 00:29:23,550] DEBUG - UpdateThread.update() : update 753664, type class Levelthree
[2010-01-25 00:29:23,550] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,551] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,553] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,553] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,553] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,553] DEBUG - UpdateThread.update() : total 333, complete 151
[2010-01-25 00:29:23,553] DEBUG - UpdateThread.update() : update 819200, type class Levelone
[2010-01-25 00:29:23,555] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,556] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,558] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,558] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,558] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,558] DEBUG - UpdateThread.update() : total 333, complete 152
[2010-01-25 00:29:23,558] DEBUG - UpdateThread.update() : update 786432, type class Leveltwo
[2010-01-25 00:29:23,558] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,559] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,561] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,561] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,561] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,561] DEBUG - UpdateThread.update() : total 333, complete 153
[2010-01-25 00:29:23,562] DEBUG - UpdateThread.update() : update 688135, type class AddressBook
[2010-01-25 00:29:23,563] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,574] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,575] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,578] DEBUG - XmlSerializer.save() : timing 68 at [extract]
[2010-01-25 00:29:23,579] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:23,579] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:29:23,579] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,581] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,581] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,584] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:29:23,584] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,584] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,584] DEBUG - UpdateThread.update() : total 333, complete 154
[2010-01-25 00:29:23,585] DEBUG - UpdateThread.update() : update 557077, type class Address
[2010-01-25 00:29:23,585] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,587] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,588] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,589] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,589] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,596] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,596] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,596] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,596] DEBUG - UpdateThread.update() : total 333, complete 155
[2010-01-25 00:29:23,597] DEBUG - UpdateThread.update() : update 589831, type class Statistics
[2010-01-25 00:29:23,597] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,598] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,598] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,598] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,598] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,601] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,601] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,601] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,601] DEBUG - UpdateThread.update() : total 333, complete 156
[2010-01-25 00:29:23,601] DEBUG - UpdateThread.update() : update 622606, type class Favorite
[2010-01-25 00:29:23,602] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,603] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,603] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,604] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,604] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,606] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,606] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,606] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,606] DEBUG - UpdateThread.update() : total 333, complete 157
[2010-01-25 00:29:23,606] DEBUG - UpdateThread.update() : update 622607, type class Favorite
[2010-01-25 00:29:23,606] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,608] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,608] DEBUG - XmlCompare.next(): hit  <name>robs address book11</name> vs.  <name>robs address book111</name>
[2010-01-25 00:29:23,608] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,608] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,608] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,609] DEBUG - XmlCompare.next(): hit   <street>2</street> vs.   <street>3</street>
[2010-01-25 00:29:23,610] DEBUG - XmlCompare.next(): hit   <street>1</street> vs.   <street>2</street>
[2010-01-25 00:29:23,610] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <street>1</street>
[2010-01-25 00:29:23,610] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <city>San Francisco</city>
[2010-01-25 00:29:23,611] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.   <state>CA</state>
[2010-01-25 00:29:23,611] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.   <zip-code>94122</zip-code>
[2010-01-25 00:29:23,611] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,611] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,611] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,611] DEBUG - UpdateThread.update() : total 333, complete 158
[2010-01-25 00:29:23,611] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <region>USA</region>
[2010-01-25 00:29:23,612] DEBUG - UpdateThread.update() : update 655367, type class Remover
[2010-01-25 00:29:23,612] DEBUG - XmlCompare.next(): hit  </address> vs.   <region>North America</region>
[2010-01-25 00:29:23,612] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,613] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,614] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,614] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,614] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,618] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,618] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,618] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,618] DEBUG - UpdateThread.update() : total 333, complete 159
[2010-01-25 00:29:23,619] DEBUG - UpdateThread.update() : update 688135, type class AddressBook
[2010-01-25 00:29:23,619] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,620] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,642] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,642] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,642] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,642] DEBUG - UpdateThread.update() : total 333, complete 160
[2010-01-25 00:29:23,642] DEBUG - UpdateThread.update() : update 557077, type class Address
[2010-01-25 00:29:23,643] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,644] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,646] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,646] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,646] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,646] DEBUG - UpdateThread.update() : total 333, complete 161
[2010-01-25 00:29:23,646] DEBUG - UpdateThread.update() : update 589831, type class Statistics
[2010-01-25 00:29:23,647] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,648] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,649] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,649] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,649] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,650] DEBUG - UpdateThread.update() : total 333, complete 162
[2010-01-25 00:29:23,650] DEBUG - UpdateThread.update() : update 622606, type class Favorite
[2010-01-25 00:29:23,650] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,651] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,652] DEBUG - XmlCompare.compare() : [[1081348:address, 1212419:address-book]]
[2010-01-25 00:29:23,652] DEBUG - XmlSerializer.save() : timing 73 at [changed]
[2010-01-25 00:29:23,653] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book111], old [robs address book11]
[2010-01-25 00:29:23,653] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,653] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,653] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,653] DEBUG - UpdateThread.update() : total 333, complete 163
[2010-01-25 00:29:23,653] DEBUG - UpdateThread.update() : update 622607, type class Favorite
[2010-01-25 00:29:23,653] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,654] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,656] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1, 2, 3]], old [[1, 2]]
[2010-01-25 00:29:23,657] DEBUG - XmlSerializer().storeAll() :  save [Address], id [1081348]
[2010-01-25 00:29:23,657] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,657] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,657] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,657] DEBUG - UpdateThread.update() : total 333, complete 164
[2010-01-25 00:29:23,657] DEBUG - UpdateThread.update() : update 655367, type class Remover
[2010-01-25 00:29:23,658] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,659] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,660] DEBUG - XmlSerializer().storeAll() : old [1081348, 1081349, 1081350, 1081351, 1081352, 1081353, 1081354, 1081355, 1081356, 1081357, 1081358, 1081359, 1081360, 1081361]
[2010-01-25 00:29:23,660] DEBUG - XmlSerializer().storeAll() : new [1081348, 1081349, 1081350, 1081351, 1081352, 1081353, 1081354, 1081355, 1081356, 1081357, 1081358, 1081359, 1081360, 1081361]
[2010-01-25 00:29:23,660] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,660] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,660] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,660] DEBUG - UpdateThread.update() : total 333, complete 165
[2010-01-25 00:29:23,661] DEBUG - UpdateThread.update() : update 688136, type class AddressBook
[2010-01-25 00:29:23,662] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,666] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 1081348, Address : 1081349, Address : 1081350, Address : 1081351, Address : 1081352, Address : 1081353, Address : 1081354, Address : 1081355, Address : 1081356, Address : 1081357, Address : 1081358, Address : 1081359, Address : 1081360, Address : 1081361]], old [[Address : 1081348, Address : 1081349, Address : 1081350, Address : 1081351, Address : 1081352, Address : 1081353, Address : 1081354, Address : 1081355, Address : 1081356, Address : 1081357, Address : 1081358, Address : 1081359, Address : 1081360, Address : 1081361]]
[2010-01-25 00:29:23,668] DEBUG - XmlSerializer().storeAll() : old [1146886, 1146887]
[2010-01-25 00:29:23,668] DEBUG - XmlSerializer().storeAll() : new [1146886, 1146887]
[2010-01-25 00:29:23,673] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1212419]
[2010-01-25 00:29:23,673] DEBUG - XmlSerializer.save() : timing 21 at [storeAll]
[2010-01-25 00:29:23,675] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:29:23,675] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212419]
[2010-01-25 00:29:23,675] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,680] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,684] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,691] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,692] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,695] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:29:23,695] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,695] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,695] DEBUG - UpdateThread.update() : total 333, complete 166
[2010-01-25 00:29:23,695] DEBUG - UpdateThread.update() : update 557078, type class Address
[2010-01-25 00:29:23,696] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,697] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,697] DEBUG - UpdateCache.update() : update [class Address], id [1081348]
[2010-01-25 00:29:23,697] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,697] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,698] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,698] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,698] DEBUG - XmlSerializer.save() : timing 23 at [cache]
[2010-01-25 00:29:23,699] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,699] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,703] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:29:23,704] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,704] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:29:23,704] DEBUG - UpdateThread.update() : total 333, complete 167
[2010-01-25 00:29:23,704] DEBUG - UpdateThread.update() : update 589831, type class Statistics
[2010-01-25 00:29:23,704] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,705] DEBUG - LockItem.unlock() : 19 current
[2010-01-25 00:29:23,705] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:23,705] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,705] DEBUG - XmlSerializer.save() : timing 7 at [save]
[2010-01-25 00:29:23,705] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:23,705] DEBUG - testUpdateTiming() : timing 228 at [save3]
[2010-01-25 00:29:23,705] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,708] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:23,708] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,708] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,708] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,708] DEBUG - UpdateThread.update() : total 333, complete 168
[2010-01-25 00:29:23,709] DEBUG - UpdateThread.update() : update 622608, type class Favorite
[2010-01-25 00:29:23,710] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,711] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,711] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,712] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,712] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,714] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,716] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,716] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,716] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,716] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,716] DEBUG - UpdateThread.update() : total 333, complete 169
[2010-01-25 00:29:23,716] DEBUG - UpdateThread.update() : update 622609, type class Favorite
[2010-01-25 00:29:23,716] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,717] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,718] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,718] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,718] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,721] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,721] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,721] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,721] DEBUG - UpdateThread.update() : total 333, complete 170
[2010-01-25 00:29:23,721] DEBUG - UpdateThread.update() : update 655368, type class Remover
[2010-01-25 00:29:23,722] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,726] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,727] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,728] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:29:23,728] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:29:23,730] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,730] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,730] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,730] DEBUG - UpdateThread.update() : total 333, complete 171
[2010-01-25 00:29:23,730] DEBUG - UpdateThread.update() : update 688136, type class AddressBook
[2010-01-25 00:29:23,732] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,733] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,735] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,736] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,736] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,736] DEBUG - UpdateThread.update() : total 333, complete 172
[2010-01-25 00:29:23,736] DEBUG - UpdateThread.update() : update 557078, type class Address
[2010-01-25 00:29:23,736] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,738] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,741] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,741] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,741] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,741] DEBUG - UpdateThread.update() : total 333, complete 173
[2010-01-25 00:29:23,742] DEBUG - UpdateThread.update() : update 622608, type class Favorite
[2010-01-25 00:29:23,742] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,743] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,746] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,746] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,746] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,747] DEBUG - UpdateThread.update() : total 333, complete 174
[2010-01-25 00:29:23,747] DEBUG - UpdateThread.update() : update 622609, type class Favorite
[2010-01-25 00:29:23,747] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,748] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,750] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,750] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,750] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,750] DEBUG - UpdateThread.update() : total 333, complete 175
[2010-01-25 00:29:23,750] DEBUG - UpdateThread.update() : update 655368, type class Remover
[2010-01-25 00:29:23,750] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,751] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,771] DEBUG - XmlSerializer.save() : timing 64 at [extract]
[2010-01-25 00:29:23,771] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,771] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,771] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:23,771] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,771] DEBUG - UpdateThread.update() : total 333, complete 176
[2010-01-25 00:29:23,771] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:23,771] DEBUG - UpdateThread.update() : update 688137, type class AddressBook
[2010-01-25 00:29:23,772] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:23,772] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:23,772] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:23,773] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:23,773] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,774] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:23,774] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:23,774] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:23,774] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:23,775] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:23,775] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:23,775] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:29:23,777] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:29:23,777] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212420]
[2010-01-25 00:29:23,778] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,781] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,782] DEBUG - UpdateCache.update() : update [class Address], id [1081362]
[2010-01-25 00:29:23,782] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,783] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,783] DEBUG - UpdateCache.update() : update [class Statistics], id [1114116]
[2010-01-25 00:29:23,783] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,784] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,784] DEBUG - UpdateCache.update() : update [class Favorite], id [1146888]
[2010-01-25 00:29:23,784] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,785] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,785] DEBUG - UpdateCache.update() : update [class Favorite], id [1146889]
[2010-01-25 00:29:23,785] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,786] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,786] DEBUG - UpdateCache.update() : update [class Remover], id [1179652]
[2010-01-25 00:29:23,786] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,787] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,787] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212420]
[2010-01-25 00:29:23,787] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,789] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,790] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,792] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,792] DEBUG - UpdateCache.update() : update [class Address], id [1081362]
[2010-01-25 00:29:23,792] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,794] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,794] DEBUG - UpdateCache.update() : update [class Statistics], id [1114116]
[2010-01-25 00:29:23,794] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,795] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,795] DEBUG - UpdateCache.update() : update [class Favorite], id [1146888]
[2010-01-25 00:29:23,795] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,795] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,796] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,796] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,796] DEBUG - UpdateCache.update() : update [class Favorite], id [1146889]
[2010-01-25 00:29:23,796] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,797] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,797] DEBUG - UpdateCache.update() : update [class Remover], id [1179652]
[2010-01-25 00:29:23,797] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,798] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,798] DEBUG - XmlSerializer.save() : timing 21 at [cache]
[2010-01-25 00:29:23,809] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:23,809] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,809] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,809] DEBUG - UpdateThread.update() : total 333, complete 177
[2010-01-25 00:29:23,809] DEBUG - UpdateThread.update() : update 557079, type class Address
[2010-01-25 00:29:23,810] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,812] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,813] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,814] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,814] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,817] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,817] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,817] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,817] DEBUG - UpdateThread.update() : total 333, complete 178
[2010-01-25 00:29:23,817] DEBUG - UpdateThread.update() : update 589832, type class Statistics
[2010-01-25 00:29:23,818] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,819] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,819] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,819] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,819] DEBUG - XmlSerializer.save() : timing 21 at [save]
[2010-01-25 00:29:23,819] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:23,820] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,820] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:23,820] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,822] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,822] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,822] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,822] DEBUG - UpdateThread.update() : total 333, complete 179
[2010-01-25 00:29:23,822] DEBUG - UpdateThread.update() : update 622610, type class Favorite
[2010-01-25 00:29:23,823] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,823] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,825] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,826] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,826] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,828] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,828] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,828] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,828] DEBUG - UpdateThread.update() : total 333, complete 180
[2010-01-25 00:29:23,828] DEBUG - UpdateThread.update() : update 622611, type class Favorite
[2010-01-25 00:29:23,829] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,829] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,830] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,830] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,830] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,831] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,831] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,836] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,837] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,837] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,837] DEBUG - UpdateThread.update() : total 333, complete 181
[2010-01-25 00:29:23,837] DEBUG - UpdateThread.update() : update 655369, type class Remover
[2010-01-25 00:29:23,837] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,839] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,839] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,840] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,840] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,843] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,843] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,843] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,843] DEBUG - UpdateThread.update() : total 333, complete 182
[2010-01-25 00:29:23,843] DEBUG - UpdateThread.update() : update 688137, type class AddressBook
[2010-01-25 00:29:23,844] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,845] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,847] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,847] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,847] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,847] DEBUG - UpdateThread.update() : total 333, complete 183
[2010-01-25 00:29:23,847] DEBUG - UpdateThread.update() : update 557079, type class Address
[2010-01-25 00:29:23,848] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,848] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,850] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,850] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,850] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,850] DEBUG - UpdateThread.update() : total 333, complete 184
[2010-01-25 00:29:23,851] DEBUG - UpdateThread.update() : update 589832, type class Statistics
[2010-01-25 00:29:23,851] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,852] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,854] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,854] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,855] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,855] DEBUG - UpdateThread.update() : total 333, complete 185
[2010-01-25 00:29:23,855] DEBUG - UpdateThread.update() : update 622610, type class Favorite
[2010-01-25 00:29:23,855] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,856] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,856] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,858] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,858] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,858] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,858] DEBUG - UpdateThread.update() : total 333, complete 186
[2010-01-25 00:29:23,858] DEBUG - UpdateThread.update() : update 622611, type class Favorite
[2010-01-25 00:29:23,859] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,859] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,861] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:23,861] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,861] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,861] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,861] DEBUG - UpdateThread.update() : total 333, complete 187
[2010-01-25 00:29:23,861] DEBUG - UpdateThread.update() : update 655369, type class Remover
[2010-01-25 00:29:23,861] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:23,862] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,870] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,871] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,877] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:23,877] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,877] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,877] DEBUG - UpdateThread.update() : total 333, complete 188
[2010-01-25 00:29:23,877] DEBUG - UpdateThread.update() : update 688138, type class AddressBook
[2010-01-25 00:29:23,879] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,895] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,896] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,902] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,902] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,908] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:23,908] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,908] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,908] DEBUG - UpdateThread.update() : total 333, complete 189
[2010-01-25 00:29:23,908] DEBUG - UpdateThread.update() : update 557080, type class Address
[2010-01-25 00:29:23,908] DEBUG - XmlSerializer.save() : timing 47 at [extract]
[2010-01-25 00:29:23,909] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:23,910] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,910] DEBUG - XmlSerializer.save() : timing 2 at [lock]
[2010-01-25 00:29:23,910] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,911] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,912] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:23,915] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,915] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,917] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:23,918] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,918] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:23,918] DEBUG - UpdateThread.update() : total 333, complete 190
[2010-01-25 00:29:23,918] DEBUG - UpdateThread.update() : update 589833, type class Statistics
[2010-01-25 00:29:23,918] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,919] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,919] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,919] DEBUG - XmlCompare.next(): hit  <statistics accessed="100" size="100" id="1114116"> vs.  <statistics accessed="200" size="100" id="1114116">
[2010-01-25 00:29:23,920] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,920] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,923] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:23,924] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,924] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:23,924] DEBUG - UpdateThread.update() : total 333, complete 191
[2010-01-25 00:29:23,924] DEBUG - UpdateThread.update() : update 622612, type class Favorite
[2010-01-25 00:29:23,924] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,925] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,925] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,926] DEBUG - XmlCompare.compare() : [[1212420:address-book, 1114116:statistics]]
[2010-01-25 00:29:23,926] DEBUG - XmlSerializer.save() : timing 16 at [changed]
[2010-01-25 00:29:23,927] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,927] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,927] DEBUG - XmlSerializer().storeAll() : old [1081362]
[2010-01-25 00:29:23,927] DEBUG - XmlSerializer().storeAll() : new [1081362]
[2010-01-25 00:29:23,928] DEBUG - XmlSerializer().storeAll() : update timestamp on class Statistics for field accessed. New Val [200], old [100]
[2010-01-25 00:29:23,930] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [1114116]
[2010-01-25 00:29:23,931] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:23,931] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,931] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:23,931] DEBUG - UpdateThread.update() : total 333, complete 192
[2010-01-25 00:29:23,931] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field statistics. New Val [Statistics : 1114116], old [Statistics : 1114116]
[2010-01-25 00:29:23,931] DEBUG - UpdateThread.update() : update 622613, type class Favorite
[2010-01-25 00:29:23,931] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,932] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,932] DEBUG - XmlSerializer().storeAll() : old [1146888, 1146889]
[2010-01-25 00:29:23,932] DEBUG - XmlSerializer().storeAll() : new [1146888, 1146889]
[2010-01-25 00:29:23,932] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:23,933] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1212420]
[2010-01-25 00:29:23,933] DEBUG - XmlSerializer.save() : timing 7 at [storeAll]
[2010-01-25 00:29:23,933] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,933] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,934] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:23,934] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212420]
[2010-01-25 00:29:23,934] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,938] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:23,938] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,938] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:23,938] DEBUG - UpdateThread.update() : total 333, complete 193
[2010-01-25 00:29:23,938] DEBUG - UpdateThread.update() : update 655370, type class Remover
[2010-01-25 00:29:23,938] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,938] DEBUG - UpdateCache.update() : update [class Statistics], id [1114116]
[2010-01-25 00:29:23,938] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,938] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:23,941] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:23,941] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,941] DEBUG - XmlSerializer.save() : timing 7 at [cache]
[2010-01-25 00:29:23,941] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:23,942] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:29:23,942] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:29:23,947] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:23,947] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:23,947] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:23,947] DEBUG - UpdateThread.update() : total 333, complete 194
[2010-01-25 00:29:23,947] DEBUG - UpdateThread.update() : update 983040, type class MixedKids
[2010-01-25 00:29:23,955] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:23,955] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:23,955] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:23,955] DEBUG - XmlSerializer.save() : timing 14 at [save]
[2010-01-25 00:29:23,955] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:23,955] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:29:23,955] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:29:23,959] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-25 00:29:23,964] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:23,968] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:23,968] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,970] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:23,988] DEBUG - XmlSerializer.save() : timing 25 at [extract]
[2010-01-25 00:29:23,989] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:29:23,989] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:23,989] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:23,990] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:23,990] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:23,991] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:23,991] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:23,991] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:23,992] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:23,992] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:23,993] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:23,993] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:23,993] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:29:23,994] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:23,994] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212421]
[2010-01-25 00:29:23,995] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:23,999] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:23,999] DEBUG - UpdateCache.update() : update [class Address], id [1081363]
[2010-01-25 00:29:23,999] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,002] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,002] DEBUG - UpdateCache.update() : update [class Statistics], id [1114117]
[2010-01-25 00:29:24,002] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,003] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,003] DEBUG - UpdateCache.update() : update [class Favorite], id [1146890]
[2010-01-25 00:29:24,003] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,004] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,004] DEBUG - UpdateCache.update() : update [class Favorite], id [1146891]
[2010-01-25 00:29:24,004] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,005] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,005] DEBUG - UpdateCache.update() : update [class Remover], id [1179653]
[2010-01-25 00:29:24,005] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,006] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,006] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212421]
[2010-01-25 00:29:24,006] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,011] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,011] DEBUG - UpdateCache.update() : update [class Address], id [1081363]
[2010-01-25 00:29:24,011] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,014] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,014] DEBUG - UpdateCache.update() : update [class Statistics], id [1114117]
[2010-01-25 00:29:24,014] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,015] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,015] DEBUG - UpdateCache.update() : update [class Favorite], id [1146890]
[2010-01-25 00:29:24,015] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,016] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,016] DEBUG - UpdateCache.update() : update [class Favorite], id [1146891]
[2010-01-25 00:29:24,016] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,018] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,018] DEBUG - UpdateCache.update() : update [class Remover], id [1179653]
[2010-01-25 00:29:24,018] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,019] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,019] DEBUG - XmlSerializer.save() : timing 25 at [cache]
[2010-01-25 00:29:24,057] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:24,057] DEBUG - XmlSerializer.save() : timing 38 at [save]
[2010-01-25 00:29:24,057] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:24,058] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,064] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,065] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,088] DEBUG - XmlSerializer.sqlLoad() : query [query.fav.by.id]
[2010-01-25 00:29:24,089] DEBUG - XmlSerializer.sqlLoad() : sql [from Favorite where id = ?]
[2010-01-25 00:29:24,101] DEBUG - XmlSerializer.sqlLoad() : timing 8 at [query]
[2010-01-25 00:29:24,102] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,103] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,110] DEBUG - XmlSerializer.save() : timing 8 at [extract]
[2010-01-25 00:29:24,111] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:24,111] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:29:24,111] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,118] DEBUG - XmlCompare.next(): hit  <name>gary</name> vs.  <name>ice cream!</name>
[2010-01-25 00:29:24,119] DEBUG - XmlCompare.compare() : [[1146890:favorite]]
[2010-01-25 00:29:24,119] DEBUG - XmlSerializer.save() : timing 8 at [changed]
[2010-01-25 00:29:24,119] DEBUG - XmlSerializer().storeAll() : update timestamp on class Favorite for field name. New Val [ice cream!], old [gary]
[2010-01-25 00:29:24,120] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [1146890]
[2010-01-25 00:29:24,120] DEBUG - XmlSerializer.save() : timing 1 at [storeAll]
[2010-01-25 00:29:24,120] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,120] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:29:24,122] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:24,130] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:29:24,130] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:29:24,130] DEBUG - UpdateCache.updateCache() : process [select parent from AddressBook parent join parent.favorite as favorite where favorite.id = 1146890]
[2010-01-25 00:29:24,143] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:24,143] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,143] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,143] DEBUG - UpdateThread.update() : total 333, complete 195
[2010-01-25 00:29:24,143] DEBUG - UpdateThread.update() : update 950272, type class Interleave
[2010-01-25 00:29:24,145] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:29:24,147] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,148] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:29:24,149] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:29:24,149] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:29:24,158] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,158] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,158] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,158] DEBUG - UpdateThread.update() : total 333, complete 196
[2010-01-25 00:29:24,158] DEBUG - UpdateThread.update() : update 851968, type class KidOne
[2010-01-25 00:29:24,159] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,160] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,160] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,161] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:29:24,161] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:29:24,170] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,170] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,170] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,170] DEBUG - UpdateThread.update() : total 333, complete 197
[2010-01-25 00:29:24,171] DEBUG - UpdateThread.update() : update 851969, type class KidOne
[2010-01-25 00:29:24,171] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,172] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,172] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,173] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:29:24,173] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:29:24,180] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,181] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,181] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,181] DEBUG - UpdateThread.update() : total 333, complete 198
[2010-01-25 00:29:24,181] DEBUG - UpdateThread.update() : update 851970, type class KidOne
[2010-01-25 00:29:24,181] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,182] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,182] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,183] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:29:24,183] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:29:24,184] DEBUG - UpdateCache.update() : update [class Favorite], id [1146890]
[2010-01-25 00:29:24,184] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,186] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,186] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212421]
[2010-01-25 00:29:24,186] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,188] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,188] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,188] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,188] DEBUG - UpdateThread.update() : total 333, complete 199
[2010-01-25 00:29:24,189] DEBUG - UpdateThread.update() : update 884736, type class KidTwo
[2010-01-25 00:29:24,189] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:24,190] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,190] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:24,191] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:29:24,191] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:29:24,194] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,194] DEBUG - XmlSerializer.save() : timing 74 at [cache]
[2010-01-25 00:29:24,196] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,196] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:24,196] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,196] DEBUG - XmlSerializer.save() : timing 2 at [save]
[2010-01-25 00:29:24,196] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:24,197] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:29:24,197] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:29:24,200] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,200] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,200] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,200] DEBUG - UpdateThread.update() : total 333, complete 200
[2010-01-25 00:29:24,201] DEBUG - UpdateThread.update() : update 917504, type class KidThree
[2010-01-25 00:29:24,201] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:29:24,202] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,202] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:29:24,203] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:29:24,203] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:29:24,203] DEBUG - XmlSerializer.sqlLoad() : timing 4 at [query]
[2010-01-25 00:29:24,209] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,217] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,220] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,220] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,220] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,220] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,220] DEBUG - UpdateThread.update() : total 333, complete 201
[2010-01-25 00:29:24,221] DEBUG - UpdateThread.update() : update 983040, type class MixedKids
[2010-01-25 00:29:24,221] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,222] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,224] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,224] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,224] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,224] DEBUG - UpdateThread.update() : total 333, complete 202
[2010-01-25 00:29:24,224] DEBUG - UpdateThread.update() : update 851968, type class KidOne
[2010-01-25 00:29:24,229] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,231] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,232] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,232] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,232] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,232] DEBUG - UpdateThread.update() : total 333, complete 203
[2010-01-25 00:29:24,233] DEBUG - UpdateThread.update() : update 851969, type class KidOne
[2010-01-25 00:29:24,233] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,234] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,236] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,236] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,236] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,236] DEBUG - UpdateThread.update() : total 333, complete 204
[2010-01-25 00:29:24,236] DEBUG - UpdateThread.update() : update 851970, type class KidOne
[2010-01-25 00:29:24,236] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,237] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,239] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,239] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,239] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,239] DEBUG - UpdateThread.update() : total 333, complete 205
[2010-01-25 00:29:24,239] DEBUG - UpdateThread.update() : update 884736, type class KidTwo
[2010-01-25 00:29:24,240] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,241] DEBUG - XmlSerializer.save() : timing 31 at [extract]
[2010-01-25 00:29:24,241] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:29:24,241] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:24,241] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,242] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:24,242] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:24,242] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:24,243] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,243] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,243] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,243] DEBUG - UpdateThread.update() : total 333, complete 206
[2010-01-25 00:29:24,243] DEBUG - UpdateThread.update() : update 917504, type class KidThree
[2010-01-25 00:29:24,243] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:24,243] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,244] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:24,244] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:24,244] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:24,244] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:24,244] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:24,245] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:24,245] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,245] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:29:24,246] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:24,246] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212422]
[2010-01-25 00:29:24,246] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,246] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,246] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,246] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,246] DEBUG - UpdateThread.update() : total 333, complete 207
[2010-01-25 00:29:24,247] DEBUG - UpdateThread.update() : update 983041, type class MixedKids
[2010-01-25 00:29:24,250] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:24,251] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,251] DEBUG - UpdateCache.update() : update [class Address], id [1081364]
[2010-01-25 00:29:24,251] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,252] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,253] DEBUG - UpdateCache.update() : update [class Statistics], id [1114118]
[2010-01-25 00:29:24,253] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,253] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,254] DEBUG - UpdateCache.update() : update [class Favorite], id [1146892]
[2010-01-25 00:29:24,254] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,255] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,255] DEBUG - UpdateCache.update() : update [class Favorite], id [1146893]
[2010-01-25 00:29:24,255] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,256] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,256] DEBUG - UpdateCache.update() : update [class Remover], id [1179654]
[2010-01-25 00:29:24,256] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,257] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,257] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212422]
[2010-01-25 00:29:24,257] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,261] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,261] DEBUG - UpdateCache.update() : update [class Address], id [1081364]
[2010-01-25 00:29:24,261] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,262] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,263] DEBUG - UpdateCache.update() : update [class Statistics], id [1114118]
[2010-01-25 00:29:24,263] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,263] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,264] DEBUG - UpdateCache.update() : update [class Favorite], id [1146892]
[2010-01-25 00:29:24,264] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,264] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,265] DEBUG - UpdateCache.update() : update [class Favorite], id [1146893]
[2010-01-25 00:29:24,265] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,265] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,265] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,265] DEBUG - UpdateCache.update() : update [class Remover], id [1179654]
[2010-01-25 00:29:24,266] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,266] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:24,266] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,266] DEBUG - XmlSerializer.save() : timing 20 at [cache]
[2010-01-25 00:29:24,279] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,279] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,288] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:24,288] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,288] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,288] DEBUG - UpdateThread.update() : total 333, complete 208
[2010-01-25 00:29:24,288] DEBUG - UpdateThread.update() : update 950273, type class Interleave
[2010-01-25 00:29:24,288] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:29:24,288] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:24,289] DEBUG - XmlSerializer.save() : timing 23 at [save]
[2010-01-25 00:29:24,289] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:24,289] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,289] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,290] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:29:24,291] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,291] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,292] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,293] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,293] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,293] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,293] DEBUG - UpdateThread.update() : total 333, complete 209
[2010-01-25 00:29:24,294] DEBUG - UpdateThread.update() : update 851971, type class KidOne
[2010-01-25 00:29:24,294] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,296] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,297] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,298] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,299] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,299] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,301] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,301] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,301] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,302] DEBUG - UpdateThread.update() : total 333, complete 210
[2010-01-25 00:29:24,302] DEBUG - UpdateThread.update() : update 851972, type class KidOne
[2010-01-25 00:29:24,302] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,303] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,303] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,304] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,304] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,307] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,307] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,307] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,307] DEBUG - UpdateThread.update() : total 333, complete 211
[2010-01-25 00:29:24,307] DEBUG - UpdateThread.update() : update 851973, type class KidOne
[2010-01-25 00:29:24,307] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,311] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,312] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,312] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,312] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,316] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,316] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,316] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,316] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,317] DEBUG - UpdateThread.update() : total 333, complete 212
[2010-01-25 00:29:24,317] DEBUG - UpdateThread.update() : update 884737, type class KidTwo
[2010-01-25 00:29:24,317] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:24,318] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,318] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:24,319] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,319] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,321] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,322] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,322] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,322] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,322] DEBUG - UpdateThread.update() : total 333, complete 213
[2010-01-25 00:29:24,322] DEBUG - UpdateThread.update() : update 917505, type class KidThree
[2010-01-25 00:29:24,323] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:29:24,323] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,324] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,324] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:29:24,325] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,325] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,329] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,329] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,329] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,329] DEBUG - UpdateThread.update() : total 333, complete 214
[2010-01-25 00:29:24,329] DEBUG - UpdateThread.update() : update 688139, type class AddressBook
[2010-01-25 00:29:24,331] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,340] DEBUG - XmlSerializer.save() : timing 24 at [extract]
[2010-01-25 00:29:24,340] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:24,340] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:24,341] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,341] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,342] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,347] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,347] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,354] DEBUG - XmlCompare.next(): hit  <statistics accessed="100" size="100" id="1114118"> vs.  <statistics accessed="1000" size="100" id="1114118">
[2010-01-25 00:29:24,354] DEBUG - LockItem.unlock() : 12 current
[2010-01-25 00:29:24,354] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,354] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:24,354] DEBUG - UpdateThread.update() : total 333, complete 215
[2010-01-25 00:29:24,355] DEBUG - UpdateThread.update() : update 557081, type class Address
[2010-01-25 00:29:24,355] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,356] DEBUG - XmlCompare.compare() : [[1212422:address-book, 1114118:statistics]]
[2010-01-25 00:29:24,356] DEBUG - XmlSerializer.save() : timing 16 at [changed]
[2010-01-25 00:29:24,357] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,357] DEBUG - XmlSerializer().storeAll() : old [1081364]
[2010-01-25 00:29:24,357] DEBUG - XmlSerializer().storeAll() : new [1081364]
[2010-01-25 00:29:24,358] DEBUG - XmlSerializer().storeAll() : update timestamp on class Statistics for field accessed. New Val [1000], old [100]
[2010-01-25 00:29:24,358] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,358] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [1114118]
[2010-01-25 00:29:24,358] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field statistics. New Val [Statistics : 1114118], old [Statistics : 1114118]
[2010-01-25 00:29:24,359] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,359] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,360] DEBUG - XmlSerializer().storeAll() : old [1146892, 1146893]
[2010-01-25 00:29:24,360] DEBUG - XmlSerializer().storeAll() : new [1146892, 1146893]
[2010-01-25 00:29:24,360] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1212422]
[2010-01-25 00:29:24,360] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:29:24,361] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:24,362] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212422]
[2010-01-25 00:29:24,362] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,363] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:24,363] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,363] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:24,363] DEBUG - UpdateThread.update() : total 333, complete 216
[2010-01-25 00:29:24,363] DEBUG - UpdateThread.update() : update 589834, type class Statistics
[2010-01-25 00:29:24,364] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,364] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,365] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,365] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,365] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,366] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,366] DEBUG - UpdateCache.update() : update [class Statistics], id [1114118]
[2010-01-25 00:29:24,366] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,367] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,367] DEBUG - XmlSerializer.save() : timing 6 at [cache]
[2010-01-25 00:29:24,368] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:24,368] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,368] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:24,368] DEBUG - UpdateThread.update() : total 333, complete 217
[2010-01-25 00:29:24,368] DEBUG - UpdateThread.update() : update 622614, type class Favorite
[2010-01-25 00:29:24,369] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,370] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,370] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,371] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,371] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,388] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:24,388] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,388] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:29:24,388] DEBUG - UpdateThread.update() : total 333, complete 218
[2010-01-25 00:29:24,388] DEBUG - UpdateThread.update() : update 622615, type class Favorite
[2010-01-25 00:29:24,388] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:24,388] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:24,388] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,388] DEBUG - XmlSerializer.save() : timing 21 at [save]
[2010-01-25 00:29:24,388] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:24,389] DEBUG - XmlSerializer.sqlLoad() : query [query.stats.by.id]
[2010-01-25 00:29:24,389] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,389] DEBUG - XmlSerializer.sqlLoad() : sql [from Statistics where id = ?]
[2010-01-25 00:29:24,390] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,390] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,391] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,391] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,395] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,395] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,395] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,395] DEBUG - UpdateThread.update() : total 333, complete 219
[2010-01-25 00:29:24,395] DEBUG - UpdateThread.update() : update 655371, type class Remover
[2010-01-25 00:29:24,396] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,397] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,397] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,398] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:29:24,398] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:29:24,400] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,400] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,400] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,400] DEBUG - UpdateThread.update() : total 333, complete 220
[2010-01-25 00:29:24,400] DEBUG - UpdateThread.update() : update 688139, type class AddressBook
[2010-01-25 00:29:24,401] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,402] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,403] DEBUG - XmlSerializer.sqlLoad() : timing 8 at [query]
[2010-01-25 00:29:24,404] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,404] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,404] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,404] DEBUG - UpdateThread.update() : total 333, complete 221
[2010-01-25 00:29:24,404] DEBUG - UpdateThread.update() : update 557081, type class Address
[2010-01-25 00:29:24,405] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,409] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,410] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,412] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,412] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,412] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,412] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:29:24,412] DEBUG - UpdateThread.update() : total 333, complete 222
[2010-01-25 00:29:24,412] DEBUG - UpdateThread.update() : update 589834, type class Statistics
[2010-01-25 00:29:24,412] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,413] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,416] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,416] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,416] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,416] DEBUG - UpdateThread.update() : total 333, complete 223
[2010-01-25 00:29:24,416] DEBUG - UpdateThread.update() : update 622614, type class Favorite
[2010-01-25 00:29:24,416] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,417] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,419] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,419] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,419] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,419] DEBUG - UpdateThread.update() : total 333, complete 224
[2010-01-25 00:29:24,419] DEBUG - UpdateThread.update() : update 622615, type class Favorite
[2010-01-25 00:29:24,419] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,420] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,422] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,422] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,422] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,422] DEBUG - UpdateThread.update() : total 333, complete 225
[2010-01-25 00:29:24,422] DEBUG - UpdateThread.update() : update 655371, type class Remover
[2010-01-25 00:29:24,422] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,423] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,424] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,424] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,425] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,425] DEBUG - UpdateThread.update() : total 333, complete 226
[2010-01-25 00:29:24,425] DEBUG - XmlSerializer.save() : timing 20 at [extract]
[2010-01-25 00:29:24,425] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:24,425] DEBUG - UpdateThread.update() : update 688140, type class AddressBook
[2010-01-25 00:29:24,426] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-25 00:29:24,428] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,429] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:29:24,433] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:29:24,433] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:29:24,433] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:29:24,434] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:24,434] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:24,434] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:29:24,438] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:29:24,438] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:24,438] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:24,438] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:29:24,438] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:24,438] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:24,438] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:29:24,441] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,441] DEBUG - XmlSerializer.save() : timing 15 at [storeAll]
[2010-01-25 00:29:24,441] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:29:24,442] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,442] DEBUG - UpdateCache.update() : update [class Levelone], id [1343488]
[2010-01-25 00:29:24,442] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:24,445] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,445] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310720]
[2010-01-25 00:29:24,446] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:24,447] DEBUG - UpdateCache.remove() : size before 58
[2010-01-25 00:29:24,447] DEBUG - UpdateCache.remove() : size after 58
[2010-01-25 00:29:24,447] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,447] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277952]
[2010-01-25 00:29:24,447] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:24,448] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,448] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277953]
[2010-01-25 00:29:24,448] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:24,449] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,449] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310721]
[2010-01-25 00:29:24,449] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:24,450] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:24,450] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,450] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,450] DEBUG - UpdateThread.update() : total 333, complete 227
[2010-01-25 00:29:24,450] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,450] DEBUG - UpdateThread.update() : update 557082, type class Address
[2010-01-25 00:29:24,450] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277954]
[2010-01-25 00:29:24,450] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:24,451] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,451] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,451] DEBUG - UpdateCache.update() : update [class Levelone], id [1343488]
[2010-01-25 00:29:24,451] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:24,452] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,452] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,454] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,454] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,454] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,454] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310720]
[2010-01-25 00:29:24,454] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:24,459] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,459] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277952]
[2010-01-25 00:29:24,459] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:24,460] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,460] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277953]
[2010-01-25 00:29:24,460] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:24,460] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,460] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,460] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,460] DEBUG - UpdateThread.update() : total 333, complete 228
[2010-01-25 00:29:24,461] DEBUG - UpdateThread.update() : update 589835, type class Statistics
[2010-01-25 00:29:24,461] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,461] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,461] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310721]
[2010-01-25 00:29:24,461] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:24,462] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,462] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,462] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,462] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277954]
[2010-01-25 00:29:24,462] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:24,462] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,462] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,464] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,464] DEBUG - XmlSerializer.save() : timing 23 at [cache]
[2010-01-25 00:29:24,464] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,464] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,464] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,464] DEBUG - UpdateThread.update() : total 333, complete 229
[2010-01-25 00:29:24,465] DEBUG - UpdateThread.update() : update 622616, type class Favorite
[2010-01-25 00:29:24,465] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,466] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,466] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,467] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,467] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,469] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,469] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,469] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,469] DEBUG - UpdateThread.update() : total 333, complete 230
[2010-01-25 00:29:24,469] DEBUG - UpdateThread.update() : update 622617, type class Favorite
[2010-01-25 00:29:24,469] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,470] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,470] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,471] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,471] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,473] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,473] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,473] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,473] DEBUG - UpdateThread.update() : total 333, complete 231
[2010-01-25 00:29:24,473] DEBUG - UpdateThread.update() : update 655372, type class Remover
[2010-01-25 00:29:24,474] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,475] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,475] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,476] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,476] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,478] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,478] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,478] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,478] DEBUG - UpdateThread.update() : total 333, complete 232
[2010-01-25 00:29:24,478] DEBUG - UpdateThread.update() : update 688140, type class AddressBook
[2010-01-25 00:29:24,479] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,480] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,482] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,482] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,482] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,482] DEBUG - UpdateThread.update() : total 333, complete 233
[2010-01-25 00:29:24,482] DEBUG - UpdateThread.update() : update 557082, type class Address
[2010-01-25 00:29:24,483] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,484] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,486] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,486] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,486] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,486] DEBUG - UpdateThread.update() : total 333, complete 234
[2010-01-25 00:29:24,490] DEBUG - UpdateThread.update() : update 589835, type class Statistics
[2010-01-25 00:29:24,490] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,491] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,492] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,492] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,492] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,492] DEBUG - UpdateThread.update() : total 333, complete 235
[2010-01-25 00:29:24,492] DEBUG - UpdateThread.update() : update 622616, type class Favorite
[2010-01-25 00:29:24,493] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,494] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,496] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,496] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,496] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,496] DEBUG - UpdateThread.update() : total 333, complete 236
[2010-01-25 00:29:24,496] DEBUG - UpdateThread.update() : update 622617, type class Favorite
[2010-01-25 00:29:24,496] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,497] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,499] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,499] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,499] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,499] DEBUG - UpdateThread.update() : total 333, complete 237
[2010-01-25 00:29:24,499] DEBUG - UpdateThread.update() : update 655372, type class Remover
[2010-01-25 00:29:24,499] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,500] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,502] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,502] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,502] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,502] DEBUG - UpdateThread.update() : total 333, complete 238
[2010-01-25 00:29:24,502] DEBUG - UpdateThread.update() : update 688141, type class AddressBook
[2010-01-25 00:29:24,504] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,510] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:24,510] DEBUG - XmlSerializer.save() : timing 46 at [save]
[2010-01-25 00:29:24,510] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:24,511] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,513] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:29:24,515] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,516] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,521] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,522] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,524] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:24,524] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,524] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,524] DEBUG - UpdateThread.update() : total 333, complete 239
[2010-01-25 00:29:24,525] DEBUG - UpdateThread.update() : update 557083, type class Address
[2010-01-25 00:29:24,525] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,527] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,527] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,529] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,529] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,537] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,537] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,537] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,537] DEBUG - UpdateThread.update() : total 333, complete 240
[2010-01-25 00:29:24,537] DEBUG - UpdateThread.update() : update 589836, type class Statistics
[2010-01-25 00:29:24,537] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,538] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,538] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,539] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,539] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,541] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,541] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,541] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,541] DEBUG - UpdateThread.update() : total 333, complete 241
[2010-01-25 00:29:24,541] DEBUG - UpdateThread.update() : update 622618, type class Favorite
[2010-01-25 00:29:24,541] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,542] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,542] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,543] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,543] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,545] DEBUG - XmlSerializer.sqlLoad() : query [query.lthree.by.id]
[2010-01-25 00:29:24,546] DEBUG - XmlSerializer.sqlLoad() : sql [from Levelthree where id = ?]
[2010-01-25 00:29:24,556] DEBUG - XmlSerializer.sqlLoad() : timing 7 at [query]
[2010-01-25 00:29:24,557] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,564] DEBUG - XmlSerializer.save() : timing 7 at [extract]
[2010-01-25 00:29:24,564] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:24,564] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:24,565] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:24,566] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,566] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,566] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,566] DEBUG - UpdateThread.update() : total 333, complete 242
[2010-01-25 00:29:24,566] DEBUG - UpdateThread.update() : update 622619, type class Favorite
[2010-01-25 00:29:24,566] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,567] DEBUG - XmlCompare.next(): hit  <name>child</name> vs.  <name>childNEW</name>
[2010-01-25 00:29:24,567] DEBUG - XmlCompare.compare() : [[1277952:levelthree]]
[2010-01-25 00:29:24,567] DEBUG - XmlSerializer.save() : timing 3 at [changed]
[2010-01-25 00:29:24,567] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,567] DEBUG - XmlSerializer().storeAll() : update timestamp on class Levelthree for field name. New Val [childNEW], old [child]
[2010-01-25 00:29:24,567] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,568] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,568] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,568] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1277952]
[2010-01-25 00:29:24,568] DEBUG - XmlSerializer.save() : timing 1 at [storeAll]
[2010-01-25 00:29:24,568] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:29:24,569] DEBUG - UpdateCache.updateCache() : process [select parent from Leveltwo parent join parent.levelthree as levelthree where levelthree.id = 1277952]
[2010-01-25 00:29:24,571] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,571] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,571] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,571] DEBUG - UpdateThread.update() : total 333, complete 243
[2010-01-25 00:29:24,572] DEBUG - UpdateThread.update() : update 655373, type class Remover
[2010-01-25 00:29:24,572] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,573] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,573] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,574] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,574] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,576] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,576] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,576] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,576] DEBUG - UpdateThread.update() : total 333, complete 244
[2010-01-25 00:29:24,576] DEBUG - UpdateThread.update() : update 688141, type class AddressBook
[2010-01-25 00:29:24,577] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,578] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,580] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,580] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,580] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,580] DEBUG - UpdateThread.update() : total 333, complete 245
[2010-01-25 00:29:24,581] DEBUG - UpdateThread.update() : update 557083, type class Address
[2010-01-25 00:29:24,581] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,582] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,584] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,584] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,584] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,584] DEBUG - UpdateThread.update() : total 333, complete 246
[2010-01-25 00:29:24,584] DEBUG - UpdateThread.update() : update 589836, type class Statistics
[2010-01-25 00:29:24,585] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,585] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,587] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,587] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,587] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,587] DEBUG - UpdateThread.update() : total 333, complete 247
[2010-01-25 00:29:24,587] DEBUG - UpdateThread.update() : update 622618, type class Favorite
[2010-01-25 00:29:24,587] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,588] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,590] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,590] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,590] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,590] DEBUG - UpdateThread.update() : total 333, complete 248
[2010-01-25 00:29:24,590] DEBUG - UpdateThread.update() : update 622619, type class Favorite
[2010-01-25 00:29:24,590] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,591] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,593] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,593] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,593] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,593] DEBUG - UpdateThread.update() : total 333, complete 249
[2010-01-25 00:29:24,593] DEBUG - UpdateThread.update() : update 655373, type class Remover
[2010-01-25 00:29:24,594] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,599] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,601] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,601] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,601] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,601] DEBUG - UpdateThread.update() : total 333, complete 250
[2010-01-25 00:29:24,601] DEBUG - UpdateThread.update() : update 688142, type class AddressBook
[2010-01-25 00:29:24,602] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,613] DEBUG - UpdateCache.updateCache() : process [select parent from Levelone parent join parent.leveltwo as leveltwo where leveltwo.id = 1310720]
[2010-01-25 00:29:24,614] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,615] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,622] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,622] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,626] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:29:24,626] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,626] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,626] DEBUG - UpdateThread.update() : total 333, complete 251
[2010-01-25 00:29:24,626] DEBUG - UpdateThread.update() : update 557084, type class Address
[2010-01-25 00:29:24,627] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,628] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,629] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,630] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,630] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,634] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,634] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,634] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,634] DEBUG - UpdateThread.update() : total 333, complete 252
[2010-01-25 00:29:24,634] DEBUG - UpdateThread.update() : update 589837, type class Statistics
[2010-01-25 00:29:24,635] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,635] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,636] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,636] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,636] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,640] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,640] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,640] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,640] DEBUG - UpdateThread.update() : total 333, complete 253
[2010-01-25 00:29:24,640] DEBUG - UpdateThread.update() : update 622620, type class Favorite
[2010-01-25 00:29:24,641] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,641] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,642] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,642] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,642] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,644] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,644] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,644] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,644] DEBUG - UpdateThread.update() : total 333, complete 254
[2010-01-25 00:29:24,645] DEBUG - UpdateThread.update() : update 622621, type class Favorite
[2010-01-25 00:29:24,645] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,646] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,646] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,647] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,647] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,649] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,649] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,649] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,649] DEBUG - UpdateThread.update() : total 333, complete 255
[2010-01-25 00:29:24,649] DEBUG - UpdateThread.update() : update 655374, type class Remover
[2010-01-25 00:29:24,650] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,651] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,651] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277952]
[2010-01-25 00:29:24,651] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:24,651] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,651] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,652] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,652] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,652] DEBUG - UpdateCache.update() : update [class Levelone], id [1343488]
[2010-01-25 00:29:24,652] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:24,654] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,654] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,654] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,654] DEBUG - UpdateThread.update() : total 333, complete 256
[2010-01-25 00:29:24,654] DEBUG - UpdateThread.update() : update 688142, type class AddressBook
[2010-01-25 00:29:24,656] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,658] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,662] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,663] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310720]
[2010-01-25 00:29:24,663] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:24,663] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,663] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,663] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,663] DEBUG - UpdateThread.update() : total 333, complete 257
[2010-01-25 00:29:24,663] DEBUG - UpdateThread.update() : update 557084, type class Address
[2010-01-25 00:29:24,664] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,664] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,664] DEBUG - XmlSerializer.save() : timing 96 at [cache]
[2010-01-25 00:29:24,665] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,667] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:29:24,667] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:24,667] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:29:24,667] DEBUG - XmlSerializer.save() : timing 3 at [save]
[2010-01-25 00:29:24,667] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:24,667] DEBUG - XmlSerializer.sqlLoad() : query [query.lone.by.id]
[2010-01-25 00:29:24,668] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,668] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,668] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,668] DEBUG - XmlSerializer.sqlLoad() : sql [from Levelone where id = ?]
[2010-01-25 00:29:24,668] DEBUG - UpdateThread.update() : total 333, complete 258
[2010-01-25 00:29:24,668] DEBUG - UpdateThread.update() : update 589837, type class Statistics
[2010-01-25 00:29:24,668] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,669] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,671] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,671] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,671] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,671] DEBUG - UpdateThread.update() : total 333, complete 259
[2010-01-25 00:29:24,671] DEBUG - UpdateThread.update() : update 622620, type class Favorite
[2010-01-25 00:29:24,672] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,673] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,675] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,675] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,675] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,675] DEBUG - UpdateThread.update() : total 333, complete 260
[2010-01-25 00:29:24,675] DEBUG - UpdateThread.update() : update 622621, type class Favorite
[2010-01-25 00:29:24,675] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,676] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,678] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,678] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,678] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,678] DEBUG - UpdateThread.update() : total 333, complete 261
[2010-01-25 00:29:24,678] DEBUG - UpdateThread.update() : update 655374, type class Remover
[2010-01-25 00:29:24,678] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,679] DEBUG - XmlSerializer.sqlLoad() : timing 8 at [query]
[2010-01-25 00:29:24,680] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,681] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,682] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,682] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,682] DEBUG - UpdateThread.update() : total 333, complete 262
[2010-01-25 00:29:24,682] DEBUG - UpdateThread.update() : update 688143, type class AddressBook
[2010-01-25 00:29:24,682] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,684] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,687] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,690] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,695] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,697] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,703] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,703] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,706] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:24,706] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,706] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,706] DEBUG - UpdateThread.update() : total 333, complete 263
[2010-01-25 00:29:24,706] DEBUG - UpdateThread.update() : update 557085, type class Address
[2010-01-25 00:29:24,707] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,708] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,709] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,710] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,710] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,717] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,717] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,717] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,717] DEBUG - UpdateThread.update() : total 333, complete 264
[2010-01-25 00:29:24,718] DEBUG - UpdateThread.update() : update 589838, type class Statistics
[2010-01-25 00:29:24,718] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,719] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,719] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,719] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,720] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,721] DEBUG - XmlSerializer.save() : timing 39 at [extract]
[2010-01-25 00:29:24,721] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:24,721] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:24,722] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:24,724] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:24,725] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:24,725] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:24,726] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:24,726] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,726] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,726] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,726] DEBUG - UpdateThread.update() : total 333, complete 265
[2010-01-25 00:29:24,726] DEBUG - UpdateThread.update() : update 622622, type class Favorite
[2010-01-25 00:29:24,726] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:24,726] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:24,726] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:24,726] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,726] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:24,727] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:24,727] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,727] DEBUG - XmlSerializer.save() : timing 6 at [storeAll]
[2010-01-25 00:29:24,727] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,728] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,728] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,728] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:24,728] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212423]
[2010-01-25 00:29:24,728] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,730] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,730] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,730] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,730] DEBUG - UpdateThread.update() : total 333, complete 266
[2010-01-25 00:29:24,730] DEBUG - UpdateThread.update() : update 622623, type class Favorite
[2010-01-25 00:29:24,731] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,731] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,731] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,732] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:29:24,732] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:29:24,733] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,733] DEBUG - UpdateCache.update() : update [class Address], id [1081365]
[2010-01-25 00:29:24,733] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,734] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,734] DEBUG - UpdateCache.update() : update [class Statistics], id [1114119]
[2010-01-25 00:29:24,734] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,735] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,735] DEBUG - UpdateCache.update() : update [class Favorite], id [1146894]
[2010-01-25 00:29:24,735] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,736] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,736] DEBUG - UpdateCache.update() : update [class Favorite], id [1146895]
[2010-01-25 00:29:24,736] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,736] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,736] DEBUG - UpdateCache.update() : update [class Remover], id [1179655]
[2010-01-25 00:29:24,737] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,737] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,737] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212423]
[2010-01-25 00:29:24,737] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,741] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,741] DEBUG - UpdateCache.update() : update [class Address], id [1081365]
[2010-01-25 00:29:24,741] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,742] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,742] DEBUG - UpdateCache.update() : update [class Statistics], id [1114119]
[2010-01-25 00:29:24,743] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,743] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,743] DEBUG - UpdateCache.update() : update [class Favorite], id [1146894]
[2010-01-25 00:29:24,743] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,744] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,744] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,744] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,744] DEBUG - UpdateThread.update() : total 333, complete 267
[2010-01-25 00:29:24,744] DEBUG - UpdateThread.update() : update 655375, type class Remover
[2010-01-25 00:29:24,744] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,744] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,744] DEBUG - UpdateCache.update() : update [class Favorite], id [1146895]
[2010-01-25 00:29:24,744] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,745] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,745] DEBUG - UpdateCache.update() : update [class Remover], id [1179655]
[2010-01-25 00:29:24,745] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,745] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,746] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,746] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,746] DEBUG - XmlSerializer.save() : timing 18 at [cache]
[2010-01-25 00:29:24,747] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:29:24,747] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:29:24,749] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,749] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,749] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,749] DEBUG - UpdateThread.update() : total 333, complete 268
[2010-01-25 00:29:24,749] DEBUG - UpdateThread.update() : update 688143, type class AddressBook
[2010-01-25 00:29:24,750] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,752] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,757] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,757] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,757] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,757] DEBUG - UpdateThread.update() : total 333, complete 269
[2010-01-25 00:29:24,757] DEBUG - UpdateThread.update() : update 557085, type class Address
[2010-01-25 00:29:24,760] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,761] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,763] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,763] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,763] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,763] DEBUG - UpdateThread.update() : total 333, complete 270
[2010-01-25 00:29:24,763] DEBUG - UpdateThread.update() : update 589838, type class Statistics
[2010-01-25 00:29:24,764] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,765] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,766] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,766] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,766] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,766] DEBUG - UpdateThread.update() : total 333, complete 271
[2010-01-25 00:29:24,767] DEBUG - UpdateThread.update() : update 622622, type class Favorite
[2010-01-25 00:29:24,767] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:24,767] DEBUG - XmlSerializer.save() : timing 21 at [save]
[2010-01-25 00:29:24,767] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:24,767] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,768] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,769] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,771] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,771] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,771] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,771] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,771] DEBUG - UpdateThread.update() : total 333, complete 272
[2010-01-25 00:29:24,771] DEBUG - UpdateThread.update() : update 622623, type class Favorite
[2010-01-25 00:29:24,771] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,772] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,773] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,774] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,774] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,774] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,774] DEBUG - UpdateThread.update() : total 333, complete 273
[2010-01-25 00:29:24,774] DEBUG - UpdateThread.update() : update 655375, type class Remover
[2010-01-25 00:29:24,775] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,776] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,778] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,778] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,778] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,778] DEBUG - UpdateThread.update() : total 333, complete 274
[2010-01-25 00:29:24,778] DEBUG - UpdateThread.update() : update 688143, type class AddressBook
[2010-01-25 00:29:24,780] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,781] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,783] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,783] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,783] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,783] DEBUG - UpdateThread.update() : total 333, complete 275
[2010-01-25 00:29:24,783] DEBUG - UpdateThread.update() : update 622623, type class Favorite
[2010-01-25 00:29:24,784] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,785] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,787] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,788] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,788] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,788] DEBUG - UpdateThread.update() : total 333, complete 276
[2010-01-25 00:29:24,788] DEBUG - UpdateThread.update() : update 622622, type class Favorite
[2010-01-25 00:29:24,788] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,789] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,791] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,791] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,791] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,791] DEBUG - UpdateThread.update() : total 333, complete 277
[2010-01-25 00:29:24,791] DEBUG - UpdateThread.update() : update 983042, type class MixedKids
[2010-01-25 00:29:24,792] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:24,794] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,795] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,801] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,803] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,810] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,811] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:24,814] DEBUG - XmlSerializer.save() : timing 19 at [extract]
[2010-01-25 00:29:24,814] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:24,814] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:24,815] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:24,815] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:24,815] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:24,816] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [1114119]
[2010-01-25 00:29:24,816] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:24,817] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:29:24,817] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:29:24,817] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:24,818] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:24,818] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:24,818] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:24,818] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:24,819] DEBUG - XmlSerializer.save() : timing 5 at [storeAll]
[2010-01-25 00:29:24,819] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:29:24,820] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212424]
[2010-01-25 00:29:24,820] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,822] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:24,822] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,822] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,822] DEBUG - UpdateThread.update() : total 333, complete 278
[2010-01-25 00:29:24,822] DEBUG - UpdateThread.update() : update 950274, type class Interleave
[2010-01-25 00:29:24,822] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:29:24,823] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,823] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:29:24,824] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:29:24,824] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:29:24,825] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,825] DEBUG - UpdateCache.update() : update [class Address], id [1081366]
[2010-01-25 00:29:24,825] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,827] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,827] DEBUG - UpdateCache.update() : update [class Statistics], id [1114119]
[2010-01-25 00:29:24,827] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,828] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,828] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,828] DEBUG - UpdateCache.update() : update [class Favorite], id [1146896]
[2010-01-25 00:29:24,828] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,828] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,828] DEBUG - UpdateThread.update() : total 333, complete 279
[2010-01-25 00:29:24,829] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,829] DEBUG - UpdateThread.update() : update 851974, type class KidOne
[2010-01-25 00:29:24,829] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,830] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,830] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,830] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,830] DEBUG - UpdateCache.update() : update [class Favorite], id [1146897]
[2010-01-25 00:29:24,830] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,830] DEBUG - UpdateCache.remove() : size before 71
[2010-01-25 00:29:24,830] DEBUG - UpdateCache.remove() : size after 71
[2010-01-25 00:29:24,831] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,831] DEBUG - UpdateCache.update() : update [class Remover], id [1179656]
[2010-01-25 00:29:24,831] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,832] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,832] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212424]
[2010-01-25 00:29:24,832] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,833] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,833] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,833] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,833] DEBUG - UpdateThread.update() : total 333, complete 280
[2010-01-25 00:29:24,834] DEBUG - UpdateThread.update() : update 851975, type class KidOne
[2010-01-25 00:29:24,834] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,835] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,835] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,836] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:29:24,836] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:29:24,836] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,836] DEBUG - UpdateCache.update() : update [class Address], id [1081366]
[2010-01-25 00:29:24,836] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,838] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,838] DEBUG - UpdateCache.update() : update [class Favorite], id [1146896]
[2010-01-25 00:29:24,838] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,839] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,839] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,839] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,839] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,839] DEBUG - UpdateCache.update() : update [class Favorite], id [1146897]
[2010-01-25 00:29:24,839] DEBUG - UpdateThread.update() : total 333, complete 281
[2010-01-25 00:29:24,839] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,839] DEBUG - UpdateThread.update() : update 851976, type class KidOne
[2010-01-25 00:29:24,839] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,840] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,840] DEBUG - UpdateCache.update() : update [class Remover], id [1179656]
[2010-01-25 00:29:24,840] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,840] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,840] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:24,841] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:29:24,841] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:29:24,841] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,841] DEBUG - XmlSerializer.save() : timing 22 at [cache]
[2010-01-25 00:29:24,847] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,847] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,847] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,847] DEBUG - UpdateThread.update() : total 333, complete 282
[2010-01-25 00:29:24,848] DEBUG - UpdateThread.update() : update 884738, type class KidTwo
[2010-01-25 00:29:24,848] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:24,849] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,851] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:24,851] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:29:24,851] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:29:24,877] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,877] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,877] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,877] DEBUG - UpdateThread.update() : total 333, complete 283
[2010-01-25 00:29:24,878] DEBUG - UpdateThread.update() : update 917506, type class KidThree
[2010-01-25 00:29:24,878] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:29:24,878] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:24,878] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:24,878] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,878] DEBUG - XmlSerializer.save() : timing 37 at [save]
[2010-01-25 00:29:24,878] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:24,879] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,879] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,880] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:29:24,880] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:29:24,880] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:29:24,884] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,884] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,884] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,885] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,885] DEBUG - UpdateThread.update() : total 333, complete 284
[2010-01-25 00:29:24,885] DEBUG - UpdateThread.update() : update 983042, type class MixedKids
[2010-01-25 00:29:24,886] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,886] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,887] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,890] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,890] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,890] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,890] DEBUG - UpdateThread.update() : total 333, complete 285
[2010-01-25 00:29:24,893] DEBUG - UpdateThread.update() : update 851974, type class KidOne
[2010-01-25 00:29:24,893] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,894] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,896] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,896] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,896] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,896] DEBUG - UpdateThread.update() : total 333, complete 286
[2010-01-25 00:29:24,896] DEBUG - UpdateThread.update() : update 851975, type class KidOne
[2010-01-25 00:29:24,897] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,897] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,899] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,899] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,899] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,899] DEBUG - UpdateThread.update() : total 333, complete 287
[2010-01-25 00:29:24,899] DEBUG - UpdateThread.update() : update 851976, type class KidOne
[2010-01-25 00:29:24,900] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,900] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,902] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,902] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,902] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,902] DEBUG - UpdateThread.update() : total 333, complete 288
[2010-01-25 00:29:24,902] DEBUG - UpdateThread.update() : update 884738, type class KidTwo
[2010-01-25 00:29:24,903] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,904] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,905] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,906] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,906] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,906] DEBUG - UpdateThread.update() : total 333, complete 289
[2010-01-25 00:29:24,906] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,906] DEBUG - UpdateThread.update() : update 917506, type class KidThree
[2010-01-25 00:29:24,906] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,907] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,909] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,909] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,909] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,909] DEBUG - UpdateThread.update() : total 333, complete 290
[2010-01-25 00:29:24,909] DEBUG - UpdateThread.update() : update 983042, type class MixedKids
[2010-01-25 00:29:24,910] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,911] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,911] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,912] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,914] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,914] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,914] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,914] DEBUG - UpdateThread.update() : total 333, complete 291
[2010-01-25 00:29:24,914] DEBUG - UpdateThread.update() : update 851974, type class KidOne
[2010-01-25 00:29:24,915] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,916] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,917] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,917] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,918] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,918] DEBUG - UpdateThread.update() : total 333, complete 292
[2010-01-25 00:29:24,918] DEBUG - UpdateThread.update() : update 884738, type class KidTwo
[2010-01-25 00:29:24,918] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,919] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,922] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,922] DEBUG - XmlSerializer.save() : timing 17 at [extract]
[2010-01-25 00:29:24,922] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,922] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,922] DEBUG - UpdateThread.update() : total 333, complete 293
[2010-01-25 00:29:24,922] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:24,922] DEBUG - UpdateThread.update() : update 688144, type class AddressBook
[2010-01-25 00:29:24,922] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:24,923] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:24,923] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:24,923] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:24,924] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:24,924] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,924] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:24,924] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:24,924] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:24,925] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:24,925] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:24,925] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:24,925] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:29:24,926] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:24,926] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212425]
[2010-01-25 00:29:24,926] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,930] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,930] DEBUG - UpdateCache.update() : update [class Address], id [1081367]
[2010-01-25 00:29:24,931] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,932] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,932] DEBUG - UpdateCache.update() : update [class Statistics], id [1114120]
[2010-01-25 00:29:24,932] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,933] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,933] DEBUG - UpdateCache.update() : update [class Favorite], id [1146898]
[2010-01-25 00:29:24,933] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,934] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,934] DEBUG - UpdateCache.update() : update [class Favorite], id [1146899]
[2010-01-25 00:29:24,934] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,935] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,935] DEBUG - UpdateCache.update() : update [class Remover], id [1179657]
[2010-01-25 00:29:24,935] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,936] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,936] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212425]
[2010-01-25 00:29:24,936] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,937] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,938] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:24,939] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,939] DEBUG - UpdateCache.update() : update [class Address], id [1081367]
[2010-01-25 00:29:24,939] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:24,941] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,941] DEBUG - UpdateCache.update() : update [class Statistics], id [1114120]
[2010-01-25 00:29:24,941] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,945] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:29:24,945] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,945] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:29:24,945] DEBUG - UpdateCache.update() : update [class Favorite], id [1146898]
[2010-01-25 00:29:24,945] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,946] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,946] DEBUG - UpdateCache.update() : update [class Favorite], id [1146899]
[2010-01-25 00:29:24,946] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,947] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,947] DEBUG - UpdateCache.update() : update [class Remover], id [1179657]
[2010-01-25 00:29:24,947] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:24,948] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:24,948] DEBUG - XmlSerializer.save() : timing 22 at [cache]
[2010-01-25 00:29:24,948] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:29:24,948] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,948] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,948] DEBUG - UpdateThread.update() : total 333, complete 294
[2010-01-25 00:29:24,948] DEBUG - UpdateThread.update() : update 557086, type class Address
[2010-01-25 00:29:24,949] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,950] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,951] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,952] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,952] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,952] DEBUG - UpdateThread.update() : total 333, complete 295
[2010-01-25 00:29:24,952] DEBUG - UpdateThread.update() : update 589839, type class Statistics
[2010-01-25 00:29:24,952] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,953] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,954] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:24,954] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:29:24,954] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:29:24,957] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,957] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,957] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,957] DEBUG - UpdateThread.update() : total 333, complete 296
[2010-01-25 00:29:24,957] DEBUG - UpdateThread.update() : update 622624, type class Favorite
[2010-01-25 00:29:24,958] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,959] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,959] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,960] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:29:24,960] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:29:24,962] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,962] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,962] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,962] DEBUG - XmlSerializer.save() : timing 14 at [save]
[2010-01-25 00:29:24,962] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:24,962] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,962] DEBUG - UpdateThread.update() : total 333, complete 297
[2010-01-25 00:29:24,962] DEBUG - UpdateThread.update() : update 622625, type class Favorite
[2010-01-25 00:29:24,962] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:24,962] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,964] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,964] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:24,964] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:29:24,964] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:29:24,970] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,971] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,971] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,971] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,971] DEBUG - UpdateThread.update() : total 333, complete 298
[2010-01-25 00:29:24,971] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:24,972] DEBUG - UpdateThread.update() : update 655376, type class Remover
[2010-01-25 00:29:24,973] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,974] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,988] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,988] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,988] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,988] DEBUG - UpdateThread.update() : total 333, complete 299
[2010-01-25 00:29:24,988] DEBUG - UpdateThread.update() : update 688144, type class AddressBook
[2010-01-25 00:29:24,989] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,990] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,992] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:24,992] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:24,992] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:24,992] DEBUG - UpdateThread.update() : total 333, complete 300
[2010-01-25 00:29:24,992] DEBUG - UpdateThread.update() : update 557086, type class Address
[2010-01-25 00:29:24,993] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:24,994] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:24,995] DEBUG - XmlSerializer.copy() : AddressBook, id 1212425
[2010-01-25 00:29:24,996] DEBUG - XmlSerializer.copy() : timing 1 at [setup]
[2010-01-25 00:29:24,997] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,000] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,001] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,004] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,004] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,004] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,004] DEBUG - UpdateThread.update() : total 333, complete 301
[2010-01-25 00:29:25,004] DEBUG - UpdateThread.update() : update 589839, type class Statistics
[2010-01-25 00:29:25,004] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,005] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,007] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,007] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,007] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,007] DEBUG - UpdateThread.update() : total 333, complete 302
[2010-01-25 00:29:25,007] DEBUG - UpdateThread.update() : update 622624, type class Favorite
[2010-01-25 00:29:25,007] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,009] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,010] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,010] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,010] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,010] DEBUG - UpdateThread.update() : total 333, complete 303
[2010-01-25 00:29:25,010] DEBUG - UpdateThread.update() : update 622625, type class Favorite
[2010-01-25 00:29:25,011] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,016] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,018] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,018] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,018] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,018] DEBUG - UpdateThread.update() : total 333, complete 304
[2010-01-25 00:29:25,018] DEBUG - UpdateThread.update() : update 655376, type class Remover
[2010-01-25 00:29:25,019] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,020] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,020] DEBUG - XmlSerializer.copy() : timing 24 at [extract]
[2010-01-25 00:29:25,021] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,021] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,021] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,021] DEBUG - UpdateThread.update() : total 333, complete 305
[2010-01-25 00:29:25,022] DEBUG - UpdateThread.update() : update 688145, type class AddressBook
[2010-01-25 00:29:25,023] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,035] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,036] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,042] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:29:25,042] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:29:25,045] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:25,045] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,045] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,045] DEBUG - UpdateThread.update() : total 333, complete 306
[2010-01-25 00:29:25,045] DEBUG - UpdateThread.update() : update 557087, type class Address
[2010-01-25 00:29:25,046] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,046] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:25,046] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,046] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:25,047] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:25,047] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,047] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,048] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,048] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:25,048] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,048] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:25,048] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:25,048] DEBUG - XmlSerializer.copy() : timing 28 at [save]
[2010-01-25 00:29:25,048] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,050] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:29:25,050] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:29:25,054] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,054] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,054] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,054] DEBUG - UpdateThread.update() : total 333, complete 307
[2010-01-25 00:29:25,054] DEBUG - UpdateThread.update() : update 589840, type class Statistics
[2010-01-25 00:29:25,054] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212426]
[2010-01-25 00:29:25,054] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,054] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,055] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,055] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,056] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:29:25,056] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:29:25,058] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,059] DEBUG - UpdateCache.update() : update [class Address], id [1081368]
[2010-01-25 00:29:25,059] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,060] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,060] DEBUG - UpdateCache.update() : update [class Statistics], id [1114121]
[2010-01-25 00:29:25,061] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,066] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,067] DEBUG - UpdateCache.update() : update [class Favorite], id [1146900]
[2010-01-25 00:29:25,067] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,068] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,068] DEBUG - UpdateCache.update() : update [class Favorite], id [1146901]
[2010-01-25 00:29:25,068] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,069] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,069] DEBUG - UpdateCache.update() : update [class Remover], id [1179658]
[2010-01-25 00:29:25,069] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,070] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,070] DEBUG - XmlSerializer.copy() : timing 22 at [update]
[2010-01-25 00:29:25,071] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,071] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,071] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,071] DEBUG - UpdateThread.update() : total 333, complete 308
[2010-01-25 00:29:25,071] DEBUG - UpdateThread.update() : update 622626, type class Favorite
[2010-01-25 00:29:25,072] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,072] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,073] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,074] DEBUG - UpdateCache.remove() : size before 85
[2010-01-25 00:29:25,074] DEBUG - UpdateCache.remove() : size after 85
[2010-01-25 00:29:25,076] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,076] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,076] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,076] DEBUG - UpdateThread.update() : total 333, complete 309
[2010-01-25 00:29:25,077] DEBUG - UpdateThread.update() : update 622627, type class Favorite
[2010-01-25 00:29:25,077] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,078] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,078] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,079] DEBUG - UpdateCache.remove() : size before 85
[2010-01-25 00:29:25,079] DEBUG - UpdateCache.remove() : size after 85
[2010-01-25 00:29:25,080] DEBUG - XmlSerializer.copy() : timing 10 at [finish]
[2010-01-25 00:29:25,080] DEBUG - XmlSerializer.copy() : timing ================
[2010-01-25 00:29:25,081] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,081] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,082] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,082] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,082] DEBUG - UpdateThread.update() : total 333, complete 310
[2010-01-25 00:29:25,082] DEBUG - UpdateThread.update() : update 655377, type class Remover
[2010-01-25 00:29:25,082] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,083] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,083] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,084] DEBUG - UpdateCache.remove() : size before 85
[2010-01-25 00:29:25,084] DEBUG - UpdateCache.remove() : size after 85
[2010-01-25 00:29:25,084] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,086] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,087] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,087] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,087] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,087] DEBUG - UpdateThread.update() : total 333, complete 311
[2010-01-25 00:29:25,087] DEBUG - UpdateThread.update() : update 688145, type class AddressBook
[2010-01-25 00:29:25,088] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,089] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,092] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,092] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,092] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,092] DEBUG - UpdateThread.update() : total 333, complete 312
[2010-01-25 00:29:25,093] DEBUG - UpdateThread.update() : update 557087, type class Address
[2010-01-25 00:29:25,098] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,099] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,112] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,122] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,122] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,122] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,122] DEBUG - UpdateThread.update() : total 333, complete 313
[2010-01-25 00:29:25,122] DEBUG - UpdateThread.update() : update 589840, type class Statistics
[2010-01-25 00:29:25,122] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,123] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,125] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,125] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,125] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,125] DEBUG - UpdateThread.update() : total 333, complete 314
[2010-01-25 00:29:25,125] DEBUG - UpdateThread.update() : update 622626, type class Favorite
[2010-01-25 00:29:25,126] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,127] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,128] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,128] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,128] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,128] DEBUG - UpdateThread.update() : total 333, complete 315
[2010-01-25 00:29:25,128] DEBUG - UpdateThread.update() : update 622627, type class Favorite
[2010-01-25 00:29:25,129] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,130] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,143] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,143] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,143] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,143] DEBUG - UpdateThread.update() : total 333, complete 316
[2010-01-25 00:29:25,143] DEBUG - UpdateThread.update() : update 655377, type class Remover
[2010-01-25 00:29:25,143] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,144] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,146] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,146] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,146] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,146] DEBUG - UpdateThread.update() : total 333, complete 317
[2010-01-25 00:29:25,146] DEBUG - UpdateThread.update() : update 819201, type class Levelone
[2010-01-25 00:29:25,147] DEBUG - XmlSerializer.save() : timing 35 at [extract]
[2010-01-25 00:29:25,147] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:25,147] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,147] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:25,148] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,150] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,150] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,150] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,150] DEBUG - UpdateThread.update() : total 333, complete 318
[2010-01-25 00:29:25,150] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1376256]
[2010-01-25 00:29:25,150] DEBUG - UpdateThread.update() : update 786434, type class Leveltwo
[2010-01-25 00:29:25,150] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1376257]
[2010-01-25 00:29:25,150] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,150] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1376258]
[2010-01-25 00:29:25,150] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,150] DEBUG - XmlSerializer().storeAll() : new [1376256, 1376257, 1376258]
[2010-01-25 00:29:25,152] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,152] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [1409024]
[2010-01-25 00:29:25,152] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,152] DEBUG - XmlSerializer().storeAll() : new [1409024]
[2010-01-25 00:29:25,154] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [1441792]
[2010-01-25 00:29:25,154] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,154] DEBUG - XmlSerializer().storeAll() : new [1441792]
[2010-01-25 00:29:25,154] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-25 00:29:25,154] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,154] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,154] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,154] DEBUG - UpdateThread.update() : total 333, complete 319
[2010-01-25 00:29:25,154] DEBUG - UpdateThread.update() : update 753667, type class Levelthree
[2010-01-25 00:29:25,155] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,156] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,158] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,158] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,158] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,158] DEBUG - UpdateThread.update() : total 333, complete 320
[2010-01-25 00:29:25,158] DEBUG - UpdateThread.update() : update 753668, type class Levelthree
[2010-01-25 00:29:25,158] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,159] DEBUG - XmlSerializer.save() : timing 12 at [storeAll]
[2010-01-25 00:29:25,159] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,166] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,166] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,166] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,166] DEBUG - UpdateThread.update() : total 333, complete 321
[2010-01-25 00:29:25,166] DEBUG - XmlSerializer.save() : timing 7 at [findupdate]
[2010-01-25 00:29:25,166] DEBUG - UpdateThread.update() : update 1212416, type class AddressBook
[2010-01-25 00:29:25,166] DEBUG - UpdateCache.update() : update [class MixedKids], id [1507328]
[2010-01-25 00:29:25,166] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:25,167] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,172] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,172] DEBUG - UpdateCache.update() : update [class Interleave], id [1474560]
[2010-01-25 00:29:25,172] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:29:25,173] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,173] DEBUG - UpdateCache.update() : update [class KidOne], id [1376256]
[2010-01-25 00:29:25,173] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:25,174] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,174] DEBUG - UpdateCache.update() : update [class KidOne], id [1376257]
[2010-01-25 00:29:25,174] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:25,174] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,175] DEBUG - UpdateCache.update() : update [class KidOne], id [1376258]
[2010-01-25 00:29:25,175] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:25,175] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,175] DEBUG - UpdateCache.update() : update [class KidTwo], id [1409024]
[2010-01-25 00:29:25,175] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:25,176] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,176] DEBUG - UpdateCache.update() : update [class KidThree], id [1441792]
[2010-01-25 00:29:25,176] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:29:25,178] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,178] DEBUG - UpdateCache.update() : update [class MixedKids], id [1507328]
[2010-01-25 00:29:25,178] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:25,180] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,181] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,182] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,182] DEBUG - UpdateCache.update() : update [class KidOne], id [1376256]
[2010-01-25 00:29:25,182] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:25,184] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,184] DEBUG - UpdateCache.update() : update [class KidOne], id [1376257]
[2010-01-25 00:29:25,184] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:25,185] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,185] DEBUG - UpdateCache.update() : update [class KidOne], id [1376258]
[2010-01-25 00:29:25,185] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:25,185] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,185] DEBUG - UpdateCache.update() : update [class KidTwo], id [1409024]
[2010-01-25 00:29:25,185] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:25,186] DEBUG - UpdateCache.remove() : size before 92
[2010-01-25 00:29:25,187] DEBUG - UpdateCache.remove() : size after 91
[2010-01-25 00:29:25,187] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,187] DEBUG - UpdateCache.update() : update [class KidThree], id [1441792]
[2010-01-25 00:29:25,187] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:29:25,188] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,188] DEBUG - XmlSerializer.save() : timing 22 at [cache]
[2010-01-25 00:29:25,200] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:25,200] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,200] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,200] DEBUG - UpdateThread.update() : total 333, complete 322
[2010-01-25 00:29:25,200] DEBUG - UpdateThread.update() : update 1081344, type class Address
[2010-01-25 00:29:25,201] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,203] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,204] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,205] DEBUG - UpdateCache.remove() : size before 91
[2010-01-25 00:29:25,205] DEBUG - UpdateCache.remove() : size after 90
[2010-01-25 00:29:25,229] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,229] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,229] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,229] DEBUG - UpdateThread.update() : total 333, complete 323
[2010-01-25 00:29:25,229] DEBUG - UpdateThread.update() : update 1114112, type class Statistics
[2010-01-25 00:29:25,230] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,230] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,231] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,232] DEBUG - UpdateCache.remove() : size before 90
[2010-01-25 00:29:25,232] DEBUG - UpdateCache.remove() : size after 89
[2010-01-25 00:29:25,234] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,234] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,234] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,234] DEBUG - UpdateThread.update() : total 333, complete 324
[2010-01-25 00:29:25,235] DEBUG - UpdateThread.update() : update 1146880, type class Favorite
[2010-01-25 00:29:25,235] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,236] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,236] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,237] DEBUG - UpdateCache.remove() : size before 89
[2010-01-25 00:29:25,237] DEBUG - UpdateCache.remove() : size after 88
[2010-01-25 00:29:25,239] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,239] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,239] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,239] DEBUG - UpdateThread.update() : total 333, complete 325
[2010-01-25 00:29:25,239] DEBUG - UpdateThread.update() : update 1146881, type class Favorite
[2010-01-25 00:29:25,239] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,242] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,243] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,243] DEBUG - UpdateCache.remove() : size before 88
[2010-01-25 00:29:25,244] DEBUG - UpdateCache.remove() : size after 87
[2010-01-25 00:29:25,246] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,246] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,246] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,246] DEBUG - UpdateThread.update() : total 333, complete 326
[2010-01-25 00:29:25,246] DEBUG - UpdateThread.update() : update 1179648, type class Remover
[2010-01-25 00:29:25,246] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,247] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,256] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,257] DEBUG - UpdateCache.remove() : size before 87
[2010-01-25 00:29:25,257] DEBUG - UpdateCache.remove() : size after 86
[2010-01-25 00:29:25,265] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,265] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,265] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,265] DEBUG - UpdateThread.update() : total 333, complete 327
[2010-01-25 00:29:25,265] DEBUG - UpdateThread.update() : update 1212416, type class AddressBook
[2010-01-25 00:29:25,266] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,267] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,272] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,273] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,273] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,273] DEBUG - UpdateThread.update() : total 333, complete 328
[2010-01-25 00:29:25,273] DEBUG - UpdateThread.update() : update 1081344, type class Address
[2010-01-25 00:29:25,274] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,275] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,276] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,276] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,276] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,276] DEBUG - UpdateThread.update() : total 333, complete 329
[2010-01-25 00:29:25,276] DEBUG - UpdateThread.update() : update 1114112, type class Statistics
[2010-01-25 00:29:25,277] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,277] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:25,277] DEBUG - XmlSerializer.save() : timing 89 at [save]
[2010-01-25 00:29:25,277] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:25,277] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,278] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,279] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,279] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,279] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,279] DEBUG - UpdateThread.update() : total 333, complete 330
[2010-01-25 00:29:25,279] DEBUG - UpdateThread.update() : update 1146880, type class Favorite
[2010-01-25 00:29:25,280] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,280] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,282] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,282] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,282] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,282] DEBUG - UpdateThread.update() : total 333, complete 331
[2010-01-25 00:29:25,282] DEBUG - UpdateThread.update() : update 1146881, type class Favorite
[2010-01-25 00:29:25,282] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,283] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,285] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,285] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,285] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,285] DEBUG - UpdateThread.update() : total 333, complete 332
[2010-01-25 00:29:25,285] DEBUG - UpdateThread.update() : update 1179648, type class Remover
[2010-01-25 00:29:25,285] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:29:25,286] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:29:25,288] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:25,288] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:29:25,288] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:25,288] DEBUG - UpdateThread.update() : total 333, complete 333
[2010-01-25 00:29:25,288] DEBUG - UpdateThread.update() : finish
[2010-01-25 00:29:25,291] DEBUG - XmlSerializer.copy() : MixedKids, id 1507328
[2010-01-25 00:29:25,292] DEBUG - XmlSerializer.copy() : timing 1 at [setup]
[2010-01-25 00:29:25,292] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,304] DEBUG - XmlSerializer.copy() : timing 12 at [extract]
[2010-01-25 00:29:25,321] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1376259]
[2010-01-25 00:29:25,321] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1376260]
[2010-01-25 00:29:25,321] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1376261]
[2010-01-25 00:29:25,321] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,321] DEBUG - XmlSerializer().storeAll() : new [1376259, 1376260, 1376261]
[2010-01-25 00:29:25,322] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [1409025]
[2010-01-25 00:29:25,322] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,322] DEBUG - XmlSerializer().storeAll() : new [1409025]
[2010-01-25 00:29:25,322] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [1441793]
[2010-01-25 00:29:25,322] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,322] DEBUG - XmlSerializer().storeAll() : new [1441793]
[2010-01-25 00:29:25,322] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-25 00:29:25,324] DEBUG - XmlSerializer.copy() : timing 20 at [save]
[2010-01-25 00:29:25,325] DEBUG - UpdateCache.update() : update [class MixedKids], id [1507329]
[2010-01-25 00:29:25,325] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:25,332] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,333] DEBUG - UpdateCache.update() : update [class Interleave], id [1474561]
[2010-01-25 00:29:25,333] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:29:25,333] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,333] DEBUG - UpdateCache.update() : update [class KidOne], id [1376259]
[2010-01-25 00:29:25,333] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:25,334] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,334] DEBUG - UpdateCache.update() : update [class KidOne], id [1376260]
[2010-01-25 00:29:25,334] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:25,335] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,335] DEBUG - UpdateCache.update() : update [class KidOne], id [1376261]
[2010-01-25 00:29:25,335] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:25,335] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,335] DEBUG - UpdateCache.update() : update [class KidTwo], id [1409025]
[2010-01-25 00:29:25,336] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:25,336] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,336] DEBUG - UpdateCache.update() : update [class KidThree], id [1441793]
[2010-01-25 00:29:25,336] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:29:25,337] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,337] DEBUG - XmlSerializer.copy() : timing 13 at [update]
[2010-01-25 00:29:25,348] DEBUG - XmlSerializer.copy() : timing 11 at [finish]
[2010-01-25 00:29:25,348] DEBUG - XmlSerializer.copy() : timing ================
[2010-01-25 00:29:25,349] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,365] DEBUG - XmlSerializer.sqlLoad() : query [query.multi.by.id]
[2010-01-25 00:29:25,366] DEBUG - XmlSerializer.sqlLoad() : sql [from MixedKids where id = ?]
[2010-01-25 00:29:25,381] DEBUG - XmlSerializer.sqlLoad() : timing 13 at [query]
[2010-01-25 00:29:25,471] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,474] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,475] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,489] DEBUG - XmlSerializer.save() : timing 18 at [extract]
[2010-01-25 00:29:25,489] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:25,489] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:25,490] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:25,491] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,491] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:25,491] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:25,492] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,492] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,492] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,492] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:25,492] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:25,492] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:25,493] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:29:25,493] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:29:25,493] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212427]
[2010-01-25 00:29:25,494] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,497] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,497] DEBUG - UpdateCache.update() : update [class Address], id [1081369]
[2010-01-25 00:29:25,497] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,498] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,498] DEBUG - UpdateCache.update() : update [class Statistics], id [1114122]
[2010-01-25 00:29:25,498] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,499] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,499] DEBUG - UpdateCache.update() : update [class Favorite], id [1146902]
[2010-01-25 00:29:25,499] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,500] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,500] DEBUG - UpdateCache.update() : update [class Favorite], id [1146903]
[2010-01-25 00:29:25,500] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,500] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,500] DEBUG - UpdateCache.update() : update [class Remover], id [1179659]
[2010-01-25 00:29:25,500] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,501] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,501] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212427]
[2010-01-25 00:29:25,501] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,505] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,505] DEBUG - UpdateCache.update() : update [class Address], id [1081369]
[2010-01-25 00:29:25,505] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,506] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,506] DEBUG - UpdateCache.update() : update [class Statistics], id [1114122]
[2010-01-25 00:29:25,506] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,506] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,507] DEBUG - UpdateCache.update() : update [class Favorite], id [1146902]
[2010-01-25 00:29:25,507] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,507] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,507] DEBUG - UpdateCache.update() : update [class Favorite], id [1146903]
[2010-01-25 00:29:25,507] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,508] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,508] DEBUG - UpdateCache.update() : update [class Remover], id [1179659]
[2010-01-25 00:29:25,508] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,509] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,509] DEBUG - XmlSerializer.save() : timing 16 at [cache]
[2010-01-25 00:29:25,521] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:25,521] DEBUG - XmlSerializer.save() : timing 12 at [save]
[2010-01-25 00:29:25,521] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:25,522] DEBUG - XmlSerializer.sqlLoad() : query [query.all.entries]
[2010-01-25 00:29:25,522] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook]
[2010-01-25 00:29:25,551] DEBUG - XmlSerializer.sqlLoad() : timing 28 at [query]
[2010-01-25 00:29:25,575] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,578] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,579] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,589] DEBUG - XmlSerializer.save() : timing 14 at [extract]
[2010-01-25 00:29:25,589] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:25,590] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-25 00:29:25,590] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:25,591] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,591] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:25,591] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:25,591] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,592] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,592] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,592] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:25,592] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:25,592] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:25,593] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:29:25,593] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:29:25,594] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212428]
[2010-01-25 00:29:25,594] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,597] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,597] DEBUG - UpdateCache.update() : update [class Address], id [1081370]
[2010-01-25 00:29:25,597] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,598] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,598] DEBUG - UpdateCache.update() : update [class Statistics], id [1114123]
[2010-01-25 00:29:25,598] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,599] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,599] DEBUG - UpdateCache.update() : update [class Favorite], id [1146904]
[2010-01-25 00:29:25,599] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,600] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,600] DEBUG - UpdateCache.update() : update [class Favorite], id [1146905]
[2010-01-25 00:29:25,600] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,600] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,601] DEBUG - UpdateCache.update() : update [class Remover], id [1179660]
[2010-01-25 00:29:25,601] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,601] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,601] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212428]
[2010-01-25 00:29:25,601] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,604] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,605] DEBUG - UpdateCache.update() : update [class Address], id [1081370]
[2010-01-25 00:29:25,605] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,606] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,606] DEBUG - UpdateCache.update() : update [class Statistics], id [1114123]
[2010-01-25 00:29:25,606] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,606] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,606] DEBUG - UpdateCache.update() : update [class Favorite], id [1146904]
[2010-01-25 00:29:25,606] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,608] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,608] DEBUG - UpdateCache.update() : update [class Favorite], id [1146905]
[2010-01-25 00:29:25,613] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,614] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,614] DEBUG - UpdateCache.update() : update [class Remover], id [1179660]
[2010-01-25 00:29:25,614] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,615] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,615] DEBUG - XmlSerializer.save() : timing 22 at [cache]
[2010-01-25 00:29:25,627] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:25,627] DEBUG - XmlSerializer.save() : timing 12 at [save]
[2010-01-25 00:29:25,627] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:25,627] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,630] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,632] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,647] DEBUG - XmlSerializer.sqlLoad() : query [query.native.by.id]
[2010-01-25 00:29:25,648] DEBUG - XmlSerializer.sqlLoad() : sql [select {address_book.*} from address_book where id = ?]
[2010-01-25 00:29:25,692] DEBUG - XmlSerializer.sqlLoad() : timing 35 at [query]
[2010-01-25 00:29:25,694] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,697] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,698] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,708] DEBUG - XmlSerializer.save() : timing 14 at [extract]
[2010-01-25 00:29:25,708] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:25,708] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:25,709] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:25,709] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,709] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:25,710] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:25,710] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,710] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,710] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,710] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:25,711] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:25,711] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:25,711] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:29:25,712] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:25,712] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212429]
[2010-01-25 00:29:25,712] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,715] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,715] DEBUG - UpdateCache.update() : update [class Address], id [1081371]
[2010-01-25 00:29:25,715] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,716] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,717] DEBUG - UpdateCache.update() : update [class Statistics], id [1114124]
[2010-01-25 00:29:25,717] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,717] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,717] DEBUG - UpdateCache.update() : update [class Favorite], id [1146906]
[2010-01-25 00:29:25,717] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,718] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,718] DEBUG - UpdateCache.update() : update [class Favorite], id [1146907]
[2010-01-25 00:29:25,718] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,719] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,719] DEBUG - UpdateCache.update() : update [class Remover], id [1179661]
[2010-01-25 00:29:25,719] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,720] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,720] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212429]
[2010-01-25 00:29:25,720] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,727] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,727] DEBUG - UpdateCache.update() : update [class Address], id [1081371]
[2010-01-25 00:29:25,727] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,728] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,728] DEBUG - UpdateCache.update() : update [class Statistics], id [1114124]
[2010-01-25 00:29:25,728] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,729] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,729] DEBUG - UpdateCache.update() : update [class Favorite], id [1146906]
[2010-01-25 00:29:25,729] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,729] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,729] DEBUG - UpdateCache.update() : update [class Favorite], id [1146907]
[2010-01-25 00:29:25,729] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,730] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,730] DEBUG - UpdateCache.update() : update [class Remover], id [1179661]
[2010-01-25 00:29:25,730] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,731] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,731] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-25 00:29:25,742] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:25,742] DEBUG - XmlSerializer.save() : timing 11 at [save]
[2010-01-25 00:29:25,742] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:25,743] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,745] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,746] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,762] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:29:25,763] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:29:25,766] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-25 00:29:25,768] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,771] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,773] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,783] DEBUG - XmlSerializer.save() : timing 15 at [extract]
[2010-01-25 00:29:25,783] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:25,783] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:25,784] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:25,784] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,784] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:25,784] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:25,785] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,785] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,785] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,785] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:25,785] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:25,786] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:25,786] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:29:25,786] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:29:25,786] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212430]
[2010-01-25 00:29:25,787] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,790] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,790] DEBUG - UpdateCache.update() : update [class Address], id [1081372]
[2010-01-25 00:29:25,790] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,791] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,791] DEBUG - UpdateCache.update() : update [class Statistics], id [1114125]
[2010-01-25 00:29:25,791] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,792] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,792] DEBUG - UpdateCache.update() : update [class Favorite], id [1146908]
[2010-01-25 00:29:25,792] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,793] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,793] DEBUG - UpdateCache.update() : update [class Favorite], id [1146909]
[2010-01-25 00:29:25,793] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,794] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,794] DEBUG - UpdateCache.update() : update [class Remover], id [1179662]
[2010-01-25 00:29:25,794] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,794] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,794] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212430]
[2010-01-25 00:29:25,795] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,798] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,798] DEBUG - UpdateCache.update() : update [class Address], id [1081372]
[2010-01-25 00:29:25,798] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,799] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,799] DEBUG - UpdateCache.update() : update [class Statistics], id [1114125]
[2010-01-25 00:29:25,799] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,800] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,800] DEBUG - UpdateCache.update() : update [class Favorite], id [1146908]
[2010-01-25 00:29:25,800] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,801] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,801] DEBUG - UpdateCache.update() : update [class Favorite], id [1146909]
[2010-01-25 00:29:25,801] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,801] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,801] DEBUG - UpdateCache.update() : update [class Remover], id [1179662]
[2010-01-25 00:29:25,801] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,802] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,802] DEBUG - XmlSerializer.save() : timing 16 at [cache]
[2010-01-25 00:29:25,817] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:25,817] DEBUG - XmlSerializer.save() : timing 15 at [save]
[2010-01-25 00:29:25,817] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:25,817] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,820] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,822] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,832] DEBUG - XmlSerializer.sqlLoad() : query [query.multiple]
[2010-01-25 00:29:25,833] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ? or id in (:ids)]
[2010-01-25 00:29:25,861] DEBUG - XmlSerializer.sqlLoad() : timing 11 at [query]
[2010-01-25 00:29:25,863] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,865] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,867] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,878] DEBUG - XmlSerializer.save() : timing 15 at [extract]
[2010-01-25 00:29:25,878] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:25,878] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:25,879] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:25,880] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,880] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:25,880] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:25,880] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,881] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:25,881] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:25,881] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:25,882] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:25,882] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:25,883] DEBUG - XmlSerializer.save() : timing 5 at [storeAll]
[2010-01-25 00:29:25,884] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:25,884] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212431]
[2010-01-25 00:29:25,884] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,887] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,887] DEBUG - UpdateCache.update() : update [class Address], id [1081373]
[2010-01-25 00:29:25,887] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,888] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,888] DEBUG - UpdateCache.update() : update [class Statistics], id [1114126]
[2010-01-25 00:29:25,889] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,889] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,889] DEBUG - UpdateCache.update() : update [class Favorite], id [1146910]
[2010-01-25 00:29:25,889] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,890] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,890] DEBUG - UpdateCache.update() : update [class Favorite], id [1146911]
[2010-01-25 00:29:25,890] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,891] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,891] DEBUG - UpdateCache.update() : update [class Remover], id [1179663]
[2010-01-25 00:29:25,891] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,892] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,892] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212431]
[2010-01-25 00:29:25,892] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:25,896] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,896] DEBUG - UpdateCache.update() : update [class Address], id [1081373]
[2010-01-25 00:29:25,896] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:25,897] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,897] DEBUG - UpdateCache.update() : update [class Statistics], id [1114126]
[2010-01-25 00:29:25,897] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:25,898] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,898] DEBUG - UpdateCache.update() : update [class Favorite], id [1146910]
[2010-01-25 00:29:25,898] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,899] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,899] DEBUG - UpdateCache.update() : update [class Favorite], id [1146911]
[2010-01-25 00:29:25,899] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:25,900] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,900] DEBUG - UpdateCache.update() : update [class Remover], id [1179663]
[2010-01-25 00:29:25,900] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:25,900] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:25,900] DEBUG - XmlSerializer.save() : timing 16 at [cache]
[2010-01-25 00:29:25,915] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:25,915] DEBUG - XmlSerializer.save() : timing 15 at [save]
[2010-01-25 00:29:25,915] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:25,915] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:25,918] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:25,920] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:26,936] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:26,941] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:26,945] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:26,946] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:26,960] DEBUG - XmlSerializer.save() : timing 19 at [extract]
[2010-01-25 00:29:26,960] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:26,961] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:29:26,961] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:26,971] DEBUG - XmlCompare.next(): hit  <favorite user-id="25" id="1146910"> vs.  <favorite user-id="30" id="1146911">
[2010-01-25 00:29:26,971] DEBUG - XmlCompare.next(): hit   <name>gary</name> vs.   <name>jerryg</name>
[2010-01-25 00:29:26,972] DEBUG - XmlCompare.next(): hit  <favorite user-id="30" id="1146911"> vs.  <favorite user-id="25" id="1146910">
[2010-01-25 00:29:26,972] DEBUG - XmlCompare.next(): hit   <name>joe</name> vs.   <name>gary</name>
[2010-01-25 00:29:26,973] DEBUG - XmlCompare.compare() : [[1146910:favorite, 1212431:address-book, 1146911:favorite]]
[2010-01-25 00:29:26,973] DEBUG - XmlSerializer.save() : timing 12 at [changed]
[2010-01-25 00:29:26,975] DEBUG - XmlSerializer().storeAll() : old [1081373]
[2010-01-25 00:29:26,975] DEBUG - XmlSerializer().storeAll() : new [1081373]
[2010-01-25 00:29:26,978] DEBUG - XmlSerializer().storeAll() : update timestamp on class Favorite for field name. New Val [jerryg], old [joe]
[2010-01-25 00:29:26,978] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [1146911]
[2010-01-25 00:29:26,980] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [1146910]
[2010-01-25 00:29:26,980] DEBUG - XmlSerializer().storeAll() : old [1146910, 1146911]
[2010-01-25 00:29:26,980] DEBUG - XmlSerializer().storeAll() : new [1146911, 1146910]
[2010-01-25 00:29:26,981] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field favorite. New Val [[Favorite : 1146911, Favorite : 1146910]], old [[Favorite : 1146911, Favorite : 1146910]]
[2010-01-25 00:29:26,982] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1212431]
[2010-01-25 00:29:26,982] DEBUG - XmlSerializer.save() : timing 9 at [storeAll]
[2010-01-25 00:29:26,983] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:26,983] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212431]
[2010-01-25 00:29:26,983] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:26,990] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:26,990] DEBUG - UpdateCache.update() : update [class Favorite], id [1146911]
[2010-01-25 00:29:26,991] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:26,991] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:26,991] DEBUG - UpdateCache.update() : update [class Favorite], id [1146910]
[2010-01-25 00:29:26,992] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:26,992] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:26,992] DEBUG - XmlSerializer.save() : timing 9 at [cache]
[2010-01-25 00:29:27,038] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:27,038] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:27,038] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:27,038] DEBUG - XmlSerializer.save() : timing 46 at [save]
[2010-01-25 00:29:27,038] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:27,038] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:29:27,039] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:29:27,059] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-25 00:29:27,059] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,062] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,064] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,084] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,095] DEBUG - XmlSerializer.save() : timing 11 at [extract]
[2010-01-25 00:29:27,095] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:27,095] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:27,096] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1376262]
[2010-01-25 00:29:27,096] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1376263]
[2010-01-25 00:29:27,096] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1376264]
[2010-01-25 00:29:27,096] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,096] DEBUG - XmlSerializer().storeAll() : new [1376262, 1376263, 1376264]
[2010-01-25 00:29:27,097] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [1409026]
[2010-01-25 00:29:27,097] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,097] DEBUG - XmlSerializer().storeAll() : new [1409026]
[2010-01-25 00:29:27,097] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [1441794]
[2010-01-25 00:29:27,097] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,097] DEBUG - XmlSerializer().storeAll() : new [1441794]
[2010-01-25 00:29:27,097] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-25 00:29:27,098] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:29:27,099] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:27,099] DEBUG - UpdateCache.update() : update [class MixedKids], id [1507330]
[2010-01-25 00:29:27,099] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:27,103] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,103] DEBUG - UpdateCache.update() : update [class Interleave], id [1474562]
[2010-01-25 00:29:27,103] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:29:27,104] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,104] DEBUG - UpdateCache.update() : update [class KidOne], id [1376262]
[2010-01-25 00:29:27,104] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:27,105] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,105] DEBUG - UpdateCache.update() : update [class KidOne], id [1376263]
[2010-01-25 00:29:27,105] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:27,105] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,105] DEBUG - UpdateCache.update() : update [class KidOne], id [1376264]
[2010-01-25 00:29:27,105] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:27,106] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,106] DEBUG - UpdateCache.update() : update [class KidTwo], id [1409026]
[2010-01-25 00:29:27,106] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:27,106] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,107] DEBUG - UpdateCache.update() : update [class KidThree], id [1441794]
[2010-01-25 00:29:27,107] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:29:27,107] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,107] DEBUG - UpdateCache.update() : update [class MixedKids], id [1507330]
[2010-01-25 00:29:27,107] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:27,110] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,110] DEBUG - UpdateCache.update() : update [class KidOne], id [1376262]
[2010-01-25 00:29:27,110] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:27,111] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,111] DEBUG - UpdateCache.update() : update [class KidOne], id [1376263]
[2010-01-25 00:29:27,111] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:27,112] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,112] DEBUG - UpdateCache.update() : update [class KidOne], id [1376264]
[2010-01-25 00:29:27,112] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:27,113] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,113] DEBUG - UpdateCache.update() : update [class KidTwo], id [1409026]
[2010-01-25 00:29:27,113] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:27,115] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,115] DEBUG - UpdateCache.update() : update [class KidThree], id [1441794]
[2010-01-25 00:29:27,115] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:29:27,116] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,116] DEBUG - XmlSerializer.save() : timing 17 at [cache]
[2010-01-25 00:29:27,132] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:27,132] DEBUG - XmlSerializer.save() : timing 16 at [save]
[2010-01-25 00:29:27,132] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:27,132] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,145] DEBUG - XmlSerializer.sqlLoad() : query [query.multi.by.id]
[2010-01-25 00:29:27,145] DEBUG - XmlSerializer.sqlLoad() : sql [from MixedKids where id = ?]
[2010-01-25 00:29:27,152] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-25 00:29:27,285] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,296] DEBUG - XmlSerializer.save() : timing 11 at [extract]
[2010-01-25 00:29:27,296] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:27,297] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:29:27,297] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:27,301] DEBUG - XmlCompare.next(): hit  <kid-one id="1376262"> vs.  <kid-two id="1409026">
[2010-01-25 00:29:27,301] DEBUG - XmlCompare.next(): hit   <title>kid1-1</title> vs.   <title>kid2-1</title>
[2010-01-25 00:29:27,302] DEBUG - XmlCompare.next(): hit  </kid-one> vs.  </kid-two>
[2010-01-25 00:29:27,302] DEBUG - XmlCompare.next(): hit  <kid-two id="1409026"> vs.  <kid-one id="1376262">
[2010-01-25 00:29:27,302] DEBUG - XmlCompare.next(): hit   <title>kid2-1</title> vs.   <title>kid1-1</title>
[2010-01-25 00:29:27,302] DEBUG - XmlCompare.next(): hit  </kid-two> vs.  </kid-one>
[2010-01-25 00:29:27,304] DEBUG - XmlCompare.compare() : [[1507330:mixed-kids, 1409026:kid-two, 1376262:kid-one]]
[2010-01-25 00:29:27,304] DEBUG - XmlSerializer.save() : timing 7 at [changed]
[2010-01-25 00:29:27,305] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1376262]
[2010-01-25 00:29:27,316] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,316] DEBUG - XmlSerializer().storeAll() : new [1376262, 1376263, 1376264]
[2010-01-25 00:29:27,316] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidOne. New Val [[KidOne : 1376262, KidOne : 1376263, KidOne : 1376264]], old [[KidOne : 1376262, KidOne : 1376263, KidOne : 1376264]]
[2010-01-25 00:29:27,318] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [1409026]
[2010-01-25 00:29:27,318] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,318] DEBUG - XmlSerializer().storeAll() : new [1409026]
[2010-01-25 00:29:27,318] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidTwo. New Val [[KidTwo : 1409026]], old [[KidTwo : 1409026]]
[2010-01-25 00:29:27,323] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,323] DEBUG - XmlSerializer().storeAll() : new [1441794]
[2010-01-25 00:29:27,323] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidThree. New Val [[KidThree : 1441794]], old [[KidThree : 1441794]]
[2010-01-25 00:29:27,323] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [1507330]
[2010-01-25 00:29:27,324] DEBUG - XmlSerializer.orderchange() : go [title:3556498,kidOne:-2046376474,kidTwo:-2046338616,kidOne:-2046376473,kidOne:-2046376472,kidThree:-789461350,] vs [title:3556498,kidTwo:-2046338616,kidOne:-2046376474,kidOne:-2046376473,kidOne:-2046376472,kidThree:-789461350,]
[2010-01-25 00:29:27,326] DEBUG - XmlSerializer.save() : timing 22 at [storeAll]
[2010-01-25 00:29:27,327] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:27,328] DEBUG - UpdateCache.update() : update [class MixedKids], id [1507330]
[2010-01-25 00:29:27,328] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:29:27,331] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,331] DEBUG - UpdateCache.update() : update [class KidOne], id [1376262]
[2010-01-25 00:29:27,331] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:29:27,332] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,332] DEBUG - UpdateCache.update() : update [class KidTwo], id [1409026]
[2010-01-25 00:29:27,332] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:29:27,332] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,332] DEBUG - XmlSerializer.save() : timing 5 at [cache]
[2010-01-25 00:29:27,349] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:27,349] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:27,349] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:27,349] DEBUG - XmlSerializer.save() : timing 17 at [save]
[2010-01-25 00:29:27,349] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:27,378] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,384] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,386] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,398] DEBUG - XmlSerializer.save() : timing 20 at [extract]
[2010-01-25 00:29:27,398] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:27,398] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:27,399] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:27,399] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,399] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:27,400] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:27,401] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:27,401] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:27,401] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,401] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:27,401] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:27,401] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:27,402] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:29:27,402] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:29:27,402] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212432]
[2010-01-25 00:29:27,403] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:27,406] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,406] DEBUG - UpdateCache.update() : update [class Address], id [1081374]
[2010-01-25 00:29:27,406] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:27,407] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,407] DEBUG - UpdateCache.update() : update [class Statistics], id [1114127]
[2010-01-25 00:29:27,407] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:27,408] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,408] DEBUG - UpdateCache.update() : update [class Favorite], id [1146912]
[2010-01-25 00:29:27,408] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:27,415] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,415] DEBUG - UpdateCache.update() : update [class Favorite], id [1146913]
[2010-01-25 00:29:27,415] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:27,416] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,416] DEBUG - UpdateCache.update() : update [class Remover], id [1179664]
[2010-01-25 00:29:27,416] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:27,417] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,417] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212432]
[2010-01-25 00:29:27,417] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:27,420] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,420] DEBUG - UpdateCache.update() : update [class Address], id [1081374]
[2010-01-25 00:29:27,420] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:27,421] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,421] DEBUG - UpdateCache.update() : update [class Statistics], id [1114127]
[2010-01-25 00:29:27,422] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:27,422] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,422] DEBUG - UpdateCache.update() : update [class Favorite], id [1146912]
[2010-01-25 00:29:27,422] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:27,423] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,423] DEBUG - UpdateCache.update() : update [class Favorite], id [1146913]
[2010-01-25 00:29:27,423] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:27,424] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,424] DEBUG - UpdateCache.update() : update [class Remover], id [1179664]
[2010-01-25 00:29:27,424] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:27,424] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,424] DEBUG - XmlSerializer.save() : timing 22 at [cache]
[2010-01-25 00:29:27,448] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:27,448] DEBUG - XmlSerializer.save() : timing 24 at [save]
[2010-01-25 00:29:27,448] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:27,449] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,453] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,455] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,482] DEBUG - XmlSerializer.remove() : Address, id 1081374
[2010-01-25 00:29:27,483] DEBUG - UpdateCache.updateCache() : process [select parent from AddressBook parent join parent.address as address where address.id = 1081374]
[2010-01-25 00:29:27,559] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212432]
[2010-01-25 00:29:27,559] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:27,565] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,566] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:29:27,566] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:29:27,569] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-25 00:29:27,569] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,573] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,579] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,591] DEBUG - XmlSerializer.remove() : Remover, id 1179664
[2010-01-25 00:29:27,591] DEBUG - UpdateCache.updateCache() : process [select parent from AddressBook parent join parent.remover as remover where remover.id = 1179664]
[2010-01-25 00:29:27,624] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212432]
[2010-01-25 00:29:27,624] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:27,630] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,631] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:29:27,631] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:29:27,637] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-25 00:29:27,638] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,640] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,642] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,657] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,659] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,661] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,687] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,690] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,691] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,700] DEBUG - XmlSerializer.save() : timing 14 at [extract]
[2010-01-25 00:29:27,700] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:27,700] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:27,701] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:29:27,701] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,701] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:27,702] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:29:27,702] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:27,702] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:29:27,703] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,703] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:27,703] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:29:27,703] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:29:27,703] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:29:27,704] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:27,704] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212433]
[2010-01-25 00:29:27,704] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:27,716] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,716] DEBUG - UpdateCache.update() : update [class Address], id [1081375]
[2010-01-25 00:29:27,716] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:27,718] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,718] DEBUG - UpdateCache.update() : update [class Statistics], id [1114128]
[2010-01-25 00:29:27,718] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:27,718] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,718] DEBUG - UpdateCache.update() : update [class Favorite], id [1146914]
[2010-01-25 00:29:27,719] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:27,719] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,719] DEBUG - UpdateCache.update() : update [class Favorite], id [1146915]
[2010-01-25 00:29:27,719] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:27,720] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,720] DEBUG - UpdateCache.update() : update [class Remover], id [1179665]
[2010-01-25 00:29:27,720] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:27,721] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,721] DEBUG - UpdateCache.update() : update [class AddressBook], id [1212433]
[2010-01-25 00:29:27,721] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:27,724] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,724] DEBUG - UpdateCache.update() : update [class Address], id [1081375]
[2010-01-25 00:29:27,724] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:29:27,725] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,725] DEBUG - UpdateCache.update() : update [class Statistics], id [1114128]
[2010-01-25 00:29:27,725] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:29:27,726] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,726] DEBUG - UpdateCache.update() : update [class Favorite], id [1146914]
[2010-01-25 00:29:27,726] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:27,727] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,727] DEBUG - UpdateCache.update() : update [class Favorite], id [1146915]
[2010-01-25 00:29:27,727] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:29:27,727] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,728] DEBUG - UpdateCache.update() : update [class Remover], id [1179665]
[2010-01-25 00:29:27,728] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:29:27,728] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,728] DEBUG - XmlSerializer.save() : timing 24 at [cache]
[2010-01-25 00:29:27,738] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:27,738] DEBUG - XmlSerializer.save() : timing 10 at [save]
[2010-01-25 00:29:27,738] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:27,761] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,761] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,764] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,764] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,766] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,767] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,768] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,774] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,776] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:29:27,786] DEBUG - XmlSerializer.save() : timing 25 at [extract]
[2010-01-25 00:29:27,787] DEBUG - LockItem.lock() : lock on Thread-5
[2010-01-25 00:29:27,787] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:29:27,788] DEBUG - XmlSerializer.save() : timing 27 at [extract]
[2010-01-25 00:29:27,789] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:27,807] DEBUG - XmlSerializer.save() : timing 43 at [extract]
[2010-01-25 00:29:27,808] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:29:27,808] DEBUG - XmlSerializer.save() : timing 21 at [changed]
[2010-01-25 00:29:27,808] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-25 00:29:27,809] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:27,809] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:29:27,809] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:27,809] DEBUG - LockItem.unlock() : unlocked on Thread-5
[2010-01-25 00:29:27,809] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:27,809] DEBUG - XmlSerializer.save() : timing 0 at [save]
[2010-01-25 00:29:27,809] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:27,889] DEBUG - LockItem.lock() : lock on Thread-9
[2010-01-25 00:29:27,890] DEBUG - XmlSerializer.save() : timing 102 at [lock]
[2010-01-25 00:29:27,890] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:27,901] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:29:27,901] DEBUG - XmlSerializer.save() : timing 11 at [changed]
[2010-01-25 00:29:27,901] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-25 00:29:27,902] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:27,902] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:29:27,903] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:27,903] DEBUG - LockItem.unlock() : unlocked on Thread-9
[2010-01-25 00:29:27,903] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:27,903] DEBUG - XmlSerializer.save() : timing 1 at [save]
[2010-01-25 00:29:27,903] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:27,907] DEBUG - LockItem.lock() : lock on Thread-7
[2010-01-25 00:29:27,908] DEBUG - XmlSerializer.save() : timing 101 at [lock]
[2010-01-25 00:29:27,908] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:29:27,924] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:29:27,924] DEBUG - XmlSerializer.save() : timing 16 at [changed]
[2010-01-25 00:29:27,924] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-25 00:29:27,925] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:27,925] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:29:27,925] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:27,925] DEBUG - LockItem.unlock() : unlocked on Thread-7
[2010-01-25 00:29:27,925] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:27,925] DEBUG - XmlSerializer.save() : timing 0 at [save]
[2010-01-25 00:29:27,925] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:27,951] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:27,954] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:29:27,968] DEBUG - XmlSerializer.save() : timing 17 at [extract]
[2010-01-25 00:29:27,968] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:27,968] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:27,969] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:29:27,969] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:29:27,969] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,969] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:27,969] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:29:27,970] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:29:27,971] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,971] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:27,971] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:29:27,972] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:27,972] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:29:27,972] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:29:27,972] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:29:27,973] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:27,973] DEBUG - UpdateCache.update() : update [class Levelone], id [1343489]
[2010-01-25 00:29:27,973] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:27,976] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,976] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310722]
[2010-01-25 00:29:27,976] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:27,977] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,978] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277955]
[2010-01-25 00:29:27,978] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:27,978] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,978] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277956]
[2010-01-25 00:29:27,978] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:27,979] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,979] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310723]
[2010-01-25 00:29:27,979] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:27,981] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,981] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277957]
[2010-01-25 00:29:27,981] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:27,982] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,984] DEBUG - UpdateCache.update() : update [class Levelone], id [1343489]
[2010-01-25 00:29:27,984] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:27,991] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,991] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310722]
[2010-01-25 00:29:27,991] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:27,992] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,992] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277955]
[2010-01-25 00:29:27,992] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:27,993] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,993] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277956]
[2010-01-25 00:29:27,993] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:27,993] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,994] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310723]
[2010-01-25 00:29:27,994] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:27,995] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,995] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277957]
[2010-01-25 00:29:27,995] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:27,995] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:27,995] DEBUG - XmlSerializer.save() : timing 22 at [cache]
[2010-01-25 00:29:28,005] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:28,005] DEBUG - XmlSerializer.save() : timing 10 at [save]
[2010-01-25 00:29:28,005] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:28,008] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:28,008] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:28,017] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:28,019] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:29:28,019] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:29:28,024] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:29:28,030] DEBUG - XmlSerializer.save() : timing 22 at [extract]
[2010-01-25 00:29:28,030] DEBUG - LockItem.lock() : lock on Thread-11
[2010-01-25 00:29:28,030] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:28,030] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:28,031] DEBUG - XmlSerializer.save() : timing 14 at [extract]
[2010-01-25 00:29:28,031] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:28,031] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:28,033] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1277955]
[2010-01-25 00:29:28,033] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1277956]
[2010-01-25 00:29:28,033] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1277957]
[2010-01-25 00:29:28,034] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:28,034] DEBUG - XmlSerializer().storeAll() : new [1277955, 1277956, 1277957]
[2010-01-25 00:29:28,034] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:29:28,034] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:28,034] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:28,035] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:29:28,035] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:29:28,035] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:29:28,035] DEBUG - UpdateCache.update() : update [class Levelone], id [1343490]
[2010-01-25 00:29:28,035] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:28,036] DEBUG - XmlSerializer.save() : timing 28 at [extract]
[2010-01-25 00:29:28,036] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:28,036] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:28,038] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,038] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310724]
[2010-01-25 00:29:28,038] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:28,039] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,039] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277955]
[2010-01-25 00:29:28,039] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:28,040] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,040] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277956]
[2010-01-25 00:29:28,040] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:28,040] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:29:28,040] DEBUG - XmlSerializer.save() : timing 10 at [changed]
[2010-01-25 00:29:28,041] DEBUG - XmlSerializer.save() : timing 1 at [storeAll]
[2010-01-25 00:29:28,041] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,041] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277957]
[2010-01-25 00:29:28,041] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:28,041] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:29:28,041] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:29:28,041] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,041] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:29:28,041] DEBUG - LockItem.unlock() : unlocked on Thread-11
[2010-01-25 00:29:28,041] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:28,041] DEBUG - XmlSerializer.save() : timing 0 at [save]
[2010-01-25 00:29:28,041] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:28,042] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1277955]
[2010-01-25 00:29:28,043] DEBUG - UpdateCache.update() : update [class Levelone], id [1343490]
[2010-01-25 00:29:28,043] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:28,043] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1277956]
[2010-01-25 00:29:28,043] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1277957]
[2010-01-25 00:29:28,043] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:28,043] DEBUG - XmlSerializer().storeAll() : new [1277955, 1277956, 1277957]
[2010-01-25 00:29:28,044] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:29:28,053] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:29:28,053] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:29:28,053] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:29:28,053] DEBUG - XmlSerializer.save() : timing 17 at [storeAll]
[2010-01-25 00:29:28,054] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:28,054] DEBUG - UpdateCache.update() : update [class Levelone], id [1343491]
[2010-01-25 00:29:28,054] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:28,055] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,055] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310724]
[2010-01-25 00:29:28,055] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:28,056] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,056] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310725]
[2010-01-25 00:29:28,056] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:28,056] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,056] DEBUG - XmlSerializer.save() : timing 21 at [cache]
[2010-01-25 00:29:28,058] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,058] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277955]
[2010-01-25 00:29:28,058] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:28,059] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,059] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277956]
[2010-01-25 00:29:28,059] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:28,060] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,060] DEBUG - UpdateCache.update() : update [class Levelthree], id [1277957]
[2010-01-25 00:29:28,060] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:29:28,061] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,061] DEBUG - UpdateCache.update() : update [class Levelone], id [1343491]
[2010-01-25 00:29:28,061] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:29:28,064] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:28,064] DEBUG - LockItem.unlock() : unlocked on Thread-13
[2010-01-25 00:29:28,064] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:28,064] DEBUG - XmlSerializer.save() : timing 8 at [save]
[2010-01-25 00:29:28,064] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:28,064] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,065] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1310725]
[2010-01-25 00:29:28,065] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:29:28,066] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,066] DEBUG - XmlSerializer.save() : timing 12 at [cache]
[2010-01-25 00:29:28,075] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:28,075] DEBUG - LockItem.unlock() : unlocked on Thread-15
[2010-01-25 00:29:28,075] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:28,075] DEBUG - XmlSerializer.save() : timing 9 at [save]
[2010-01-25 00:29:28,075] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:28,110] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:28,125] DEBUG - XmlSerializer.save() : timing 15 at [extract]
[2010-01-25 00:29:28,125] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:28,125] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:29:28,126] DEBUG - XmlSerializer().storeAll() :  save [BoolTest], id [null]
[2010-01-25 00:29:28,128] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:29:28,129] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:29:28,129] DEBUG - UpdateCache.update() : update [class BoolTest], id [1540096]
[2010-01-25 00:29:28,129] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:29:28,130] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,130] DEBUG - UpdateCache.update() : update [class BoolTest], id [1540096]
[2010-01-25 00:29:28,130] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:29:28,131] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,131] DEBUG - XmlSerializer.save() : timing 2 at [cache]
[2010-01-25 00:29:28,137] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:29:28,137] DEBUG - XmlSerializer.save() : timing 6 at [save]
[2010-01-25 00:29:28,137] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:28,137] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:28,142] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:29:28,143] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:29:28,149] DEBUG - XmlSerializer.save() : timing 6 at [extract]
[2010-01-25 00:29:28,149] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:29:28,149] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:29:28,149] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:29:28,151] DEBUG - XmlCompare.next(): hit <bool-test id="1540096"> vs. <bool-test available="false" id="1540096">
[2010-01-25 00:29:28,151] DEBUG - XmlCompare.compare() : [[1540096:bool-test]]
[2010-01-25 00:29:28,151] DEBUG - XmlSerializer.save() : timing 2 at [changed]
[2010-01-25 00:29:28,152] DEBUG - XmlSerializer().storeAll() : update timestamp on class BoolTest for field available. New Val [false], old [null]
[2010-01-25 00:29:28,153] DEBUG - XmlSerializer().storeAll() :  save [BoolTest], id [1540096]
[2010-01-25 00:29:28,153] DEBUG - XmlSerializer.save() : timing 2 at [storeAll]
[2010-01-25 00:29:28,153] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:29:28,153] DEBUG - UpdateCache.update() : update [class BoolTest], id [1540096]
[2010-01-25 00:29:28,153] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:29:28,154] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:29:28,154] DEBUG - XmlSerializer.save() : timing 1 at [cache]
[2010-01-25 00:29:28,162] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:29:28,162] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:29:28,162] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:29:28,162] DEBUG - XmlSerializer.save() : timing 8 at [save]
[2010-01-25 00:29:28,162] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:29:30,142] DEBUG - MultiSort.sort() : timing 229 at [prep]
[2010-01-25 00:29:30,205] DEBUG - MultiSort.sort() : timing 74 at [sort]
[2010-01-25 00:29:30,226] DEBUG - MultiSort.sort() : timing 3 at [prep]
[2010-01-25 00:29:30,229] DEBUG - MultiSort.sort() : timing 3 at [sort]
[2010-01-25 00:29:30,249] DEBUG - MultiSort.sort() : timing 1 at [prep]
[2010-01-25 00:29:30,251] DEBUG - MultiSort.sort() : timing 2 at [sort]
[2010-01-25 00:29:30,266] DEBUG - MultiSort.sort() : timing 3 at [prep]
[2010-01-25 00:29:30,267] DEBUG - MultiSort.sort() : timing 1 at [sort]
[2010-01-25 00:29:30,288] DEBUG - MultiSort.sort() : timing 2 at [prep]
[2010-01-25 00:29:30,291] DEBUG - MultiSort.sort() : timing 3 at [sort]
[2010-01-25 00:29:32,330] DEBUG - XmlCompare.next(): hit             <name>one</name> vs.             <name>two</name>
[2010-01-25 00:29:32,340] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:29:32,359] DEBUG - XmlCompare.next(): hit             <display-element id="6684672"> vs.             <display-element id="6684672" blaa="yo">
[2010-01-25 00:29:32,364] DEBUG - XmlCompare.next(): hit                     <value>Topper</value> vs.                     <value>Top</value>
[2010-01-25 00:29:32,369] DEBUG - XmlCompare.next(): hit             <display-element id="6684674" blaa="diff1"> vs.             <display-element id="6684674" blaa="diff2">
[2010-01-25 00:29:32,371] DEBUG - XmlCompare.next(): hit         </wrap> vs.         </fap>
[2010-01-25 00:29:32,371] DEBUG - XmlCompare.compare() : [[6684672:display-element, 123:wrap, 456:block, 6684674:display-element]]
[2010-01-25 00:29:32,378] DEBUG - XmlCompare.next(): hit         </wrap> vs.             <display-element blaa="diff">
[2010-01-25 00:29:32,378] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:29:32,403] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:29:32,410] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:29:32,421] DEBUG - XmlCompare.next(): hit             <display-element id="6684674" blaa="diff"> vs. null
[2010-01-25 00:29:32,422] DEBUG - XmlCompare.next(): hit             </display-element> vs. null
[2010-01-25 00:29:32,425] DEBUG - XmlCompare.next(): hit         </wrap> vs. null
[2010-01-25 00:29:32,426] DEBUG - XmlCompare.compare() : [[123:wrap, 6684674:display-element]]
[2010-01-25 00:29:32,433] DEBUG - XmlCompare.next(): hit             <display-element id="6684673" blaa="old"> vs.             <display-element id="6684674" blaa="same">
[2010-01-25 00:29:32,436] DEBUG - XmlCompare.next(): hit         </wrap> vs.             <display-element blaa="new">
[2010-01-25 00:29:32,436] DEBUG - XmlCompare.compare() : [[123:wrap, 6684673:display-element]]
[2010-01-25 00:29:32,447] DEBUG - XmlCompare.next(): hit       <kid-two id="13828096"> vs.       <kid-one id="13795329">
[2010-01-25 00:29:32,447] DEBUG - XmlCompare.next(): hit        <title>kid2-1</title> vs.        <title>kid1-2</title>
[2010-01-25 00:29:32,448] DEBUG - XmlCompare.next(): hit       </kid-two> vs.       </kid-one>
[2010-01-25 00:29:32,449] DEBUG - XmlCompare.next(): hit       <kid-one id="13795329"> vs.       <kid-one id="13795330">
[2010-01-25 00:29:32,449] DEBUG - XmlCompare.next(): hit        <title>kid1-2</title> vs.        <title>kid1-3</title>
[2010-01-25 00:29:32,454] DEBUG - XmlCompare.next(): hit       <kid-one id="13795330"> vs.       <kid-two id="13828096">
[2010-01-25 00:29:32,455] DEBUG - XmlCompare.next(): hit        <title>kid1-3</title> vs.        <title>kid2-1</title>
[2010-01-25 00:29:32,455] DEBUG - XmlCompare.next(): hit       </kid-one> vs.       </kid-two>
[2010-01-25 00:29:32,457] DEBUG - XmlCompare.compare() : [[13795329:kid-one, 13828096:kid-two, 13926400:mixed-kids, 13795330:kid-one]]
[2010-01-25 00:29:32,459] INFO  - XmlCompare.compare() : null left or right
[2010-01-25 00:29:32,459] DEBUG - XmlCompare.compare() : left null
[2010-01-25 00:29:32,459] DEBUG - XmlCompare.compare() : right null
[2010-01-25 00:29:32,461] INFO  - XmlCompare.compare() : null left or right
[2010-01-25 00:29:32,461] DEBUG - XmlCompare.compare() : left </xml>
[2010-01-25 00:29:32,461] DEBUG - XmlCompare.compare() : right null
[2010-01-25 00:29:32,463] INFO  - XmlCompare.compare() : null left or right
[2010-01-25 00:29:32,463] DEBUG - XmlCompare.compare() : left null
[2010-01-25 00:29:32,463] DEBUG - XmlCompare.compare() : right </xml>
[2010-01-25 00:53:18,641] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Test { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = []

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['foo','bar','created','lastUpdated',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        foo(nullable : false,)
        bar(nullable : false,)
        created(nullable : false,)
        lastUpdated(nullable : false,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <foo nullable ="false"/>
            <bar nullable ="false"/>
            <created nullable ="false"/>
            <lastUpdated nullable ="false"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String foo
    String bar
    Date created
    Date lastUpdated


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Test".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:18,879] DEBUG - DomainObjectLoader.injectIdProperty() : adding property [id] to class [Test]
[2010-01-25 00:53:18,879] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Test]
[2010-01-25 00:53:18,879] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Test]
[2010-01-25 00:53:18,880] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:18,977] DEBUG - PersistenceLoader.addBaseClass() : load Test
[2010-01-25 00:53:19,204] INFO  - Hibernate 3.3.1.GA
[2010-01-25 00:53:19,210] INFO  - hibernate.properties not found
[2010-01-25 00:53:19,213] INFO  - Bytecode provider name : javassist
[2010-01-25 00:53:19,217] INFO  - using JDK 1.4 java.sql.Timestamp handling
[2010-01-25 00:53:19,283] INFO  - configuring from url: file:/Users/rgrey/Work/persistence/etc/hibernate.cfg.xml
[2010-01-25 00:53:19,363] INFO  - Configured SessionFactory: null
[2010-01-25 00:53:19,390] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:53:19,442] INFO  - Running hbm2ddl schema update
[2010-01-25 00:53:19,442] INFO  - fetching database metadata
[2010-01-25 00:53:19,445] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:53:19,445] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:53:19,445] INFO  - autocommit mode: false
[2010-01-25 00:53:19,690] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:53:19,690] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:53:20,879] INFO  - updating schema
[2010-01-25 00:53:21,712] INFO  - table found: .APP.TEST
[2010-01-25 00:53:21,712] INFO  - columns: [foo, created, bar, xmlcache, last_updated, id, version]
[2010-01-25 00:53:21,712] INFO  - foreign keys: []
[2010-01-25 00:53:21,712] INFO  - indexes: [sql100124042643800]
[2010-01-25 00:53:21,769] INFO  - table found: .APP.HIBERNATE_UNIQUE_KEY
[2010-01-25 00:53:21,769] INFO  - columns: [next_hi]
[2010-01-25 00:53:21,769] INFO  - foreign keys: []
[2010-01-25 00:53:21,769] INFO  - indexes: []
[2010-01-25 00:53:21,771] INFO  - schema update complete
[2010-01-25 00:53:21,772] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:53:21,772] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:53:21,772] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:53:21,777] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:53:21,777] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:53:21,777] INFO  - autocommit mode: false
[2010-01-25 00:53:21,777] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:53:21,777] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:53:21,780] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-25 00:53:21,780] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-25 00:53:21,785] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:53:21,787] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-25 00:53:21,789] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-25 00:53:21,789] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-25 00:53:21,789] INFO  - Automatic session close at end of transaction: disabled
[2010-01-25 00:53:21,790] INFO  - Scrollable result sets: enabled
[2010-01-25 00:53:21,790] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-25 00:53:21,790] INFO  - Connection release mode: auto
[2010-01-25 00:53:21,791] INFO  - Maximum outer join fetch depth: 1
[2010-01-25 00:53:21,791] INFO  - Default batch fetch size: 1
[2010-01-25 00:53:21,791] INFO  - Generate SQL with comments: disabled
[2010-01-25 00:53:21,791] INFO  - Order SQL updates by primary key: disabled
[2010-01-25 00:53:21,791] INFO  - Order SQL inserts for batching: disabled
[2010-01-25 00:53:21,791] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-25 00:53:21,793] INFO  - Using ASTQueryTranslatorFactory
[2010-01-25 00:53:21,793] INFO  - Query language substitutions: {}
[2010-01-25 00:53:21,793] INFO  - JPA-QL strict compliance: disabled
[2010-01-25 00:53:21,793] INFO  - Second-level cache: enabled
[2010-01-25 00:53:21,793] INFO  - Query cache: enabled
[2010-01-25 00:53:21,797] INFO  - Cache region factory : org.hibernate.cache.impl.bridge.RegionFactoryCacheProviderBridge
[2010-01-25 00:53:21,797] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-25 00:53:21,799] INFO  - Optimize cache for minimal puts: disabled
[2010-01-25 00:53:21,799] INFO  - Cache region prefix: arv
[2010-01-25 00:53:21,799] INFO  - Structured second-level cache entries: disabled
[2010-01-25 00:53:21,799] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-25 00:53:21,802] INFO  - Statistics: disabled
[2010-01-25 00:53:21,802] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-25 00:53:21,805] INFO  - Default entity-mode: pojo
[2010-01-25 00:53:21,805] INFO  - Named query checking : enabled
[2010-01-25 00:53:21,850] INFO  - building session factory
[2010-01-25 00:53:21,891] WARN  - Could not find configuration [arv.Test]; using defaults.
[2010-01-25 00:53:22,158] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:53:22,308] INFO  - Not binding factory to JNDI, no JNDI name configured
[2010-01-25 00:53:22,309] INFO  - starting update timestamps cache at region: arv.org.hibernate.cache.UpdateTimestampsCache
[2010-01-25 00:53:22,310] WARN  - Could not find configuration [arv.org.hibernate.cache.UpdateTimestampsCache]; using defaults.
[2010-01-25 00:53:22,313] INFO  - starting query cache at region: arv.org.hibernate.cache.StandardQueryCache
[2010-01-25 00:53:22,313] WARN  - Could not find configuration [arv.org.hibernate.cache.StandardQueryCache]; using defaults.
[2010-01-25 00:53:22,315] DEBUG - PersistenceLoader.load() : loaded 1 class(es)
[2010-01-25 00:53:22,458] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:53:22,458] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:53:22,475] INFO  - Save ID [1572864]
[2010-01-25 00:53:22,527] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:53:22,527] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:53:22,531] INFO  - Loaded Object [Test : 1572864]
[2010-01-25 00:53:22,531] INFO  - Loaded Value [blaa]
[2010-01-25 00:53:24,719] INFO  - SyncLock.run(): id 4, running 14, priorirty 500
[2010-01-25 00:53:24,721] INFO  - SyncLock.run(): id 7, running 14, priorirty 100
[2010-01-25 00:53:24,725] INFO  - SyncLock.run(): id 9, running 14, priorirty 100
[2010-01-25 00:53:24,726] INFO  - SyncLock.run(): id 3, running 14, priorirty 100
[2010-01-25 00:53:24,729] INFO  - SyncLock.run(): id 1, running 14, priorirty 100
[2010-01-25 00:53:24,730] INFO  - SyncLock.run(): id 6, running 14, priorirty 500
[2010-01-25 00:53:24,731] INFO  - SyncLock.run(): id 12, running 14, priorirty 500
[2010-01-25 00:53:24,732] INFO  - SyncLock.run(): id 8, running 14, priorirty 500
[2010-01-25 00:53:24,732] INFO  - SyncLock.run(): id 0, running 14, priorirty 500
[2010-01-25 00:53:24,733] INFO  - SyncLock.run(): id 13, running 14, priorirty 100
[2010-01-25 00:53:24,733] INFO  - SyncLock.run(): id 11, running 14, priorirty 100
[2010-01-25 00:53:24,734] INFO  - SyncLock.run(): id 2, running 14, priorirty 500
[2010-01-25 00:53:24,734] INFO  - SyncLock.run(): id 10, running 14, priorirty 500
[2010-01-25 00:53:24,735] INFO  - SyncLock.run(): id 5, running 14, priorirty 100
[2010-01-25 00:53:24,751] DEBUG - LockItem.lock() : lock on Thread-9
[2010-01-25 00:53:24,751] DEBUG - LockItem.lock() : lock on Thread-14
[2010-01-25 00:53:24,960] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:53:24,960] DEBUG - LockItem.unlock() : unlocked on Thread-9
[2010-01-25 00:53:24,960] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:53:24,961] DEBUG - LockItem.unlock() : unlocked on Thread-14
[2010-01-25 00:53:24,961] DEBUG - LockItem.unlock() : 2 remain
[2010-01-25 00:53:24,964] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:24,964] INFO  - SyncLock.run(): finish id 8, count 13
[2010-01-25 00:53:24,965] INFO  - SyncLock.run(): finish id 13, count 12
[2010-01-25 00:53:25,051] DEBUG - LockItem.lock() : lock on Thread-6
[2010-01-25 00:53:25,252] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:25,252] DEBUG - LockItem.unlock() : unlocked on Thread-6
[2010-01-25 00:53:25,252] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:25,252] INFO  - SyncLock.run(): finish id 5, count 11
[2010-01-25 00:53:25,253] DEBUG - LockItem.lock() : lock on Thread-10
[2010-01-25 00:53:25,453] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:25,453] DEBUG - LockItem.unlock() : unlocked on Thread-10
[2010-01-25 00:53:25,454] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:25,454] INFO  - SyncLock.run(): finish id 9, count 10
[2010-01-25 00:53:25,454] DEBUG - LockItem.lock() : lock on Thread-2
[2010-01-25 00:53:25,655] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:25,655] DEBUG - LockItem.unlock() : unlocked on Thread-2
[2010-01-25 00:53:25,655] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:25,655] INFO  - SyncLock.run(): finish id 1, count 9
[2010-01-25 00:53:25,747] DEBUG - LockItem.lock() : lock on Thread-3
[2010-01-25 00:53:25,948] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:25,948] DEBUG - LockItem.unlock() : unlocked on Thread-3
[2010-01-25 00:53:25,948] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:25,948] INFO  - SyncLock.run(): finish id 2, count 8
[2010-01-25 00:53:25,955] DEBUG - LockItem.lock() : lock on Thread-8
[2010-01-25 00:53:26,155] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:26,155] DEBUG - LockItem.unlock() : unlocked on Thread-8
[2010-01-25 00:53:26,155] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:26,155] INFO  - SyncLock.run(): finish id 7, count 7
[2010-01-25 00:53:26,156] DEBUG - LockItem.lock() : lock on Thread-4
[2010-01-25 00:53:26,356] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:26,357] DEBUG - LockItem.unlock() : unlocked on Thread-4
[2010-01-25 00:53:26,358] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:26,358] INFO  - SyncLock.run(): finish id 3, count 6
[2010-01-25 00:53:26,456] DEBUG - LockItem.lock() : lock on Thread-12
[2010-01-25 00:53:26,657] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:26,657] DEBUG - LockItem.unlock() : unlocked on Thread-12
[2010-01-25 00:53:26,657] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:26,657] INFO  - SyncLock.run(): finish id 11, count 5
[2010-01-25 00:53:26,751] DEBUG - LockItem.lock() : lock on Thread-5
[2010-01-25 00:53:26,953] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:26,953] DEBUG - LockItem.unlock() : unlocked on Thread-5
[2010-01-25 00:53:26,953] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:26,954] INFO  - SyncLock.run(): finish id 4, count 4
[2010-01-25 00:53:27,253] DEBUG - LockItem.lock() : lock on Thread-11
[2010-01-25 00:53:27,454] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:27,454] DEBUG - LockItem.unlock() : unlocked on Thread-11
[2010-01-25 00:53:27,454] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:27,454] INFO  - SyncLock.run(): finish id 10, count 3
[2010-01-25 00:53:27,753] DEBUG - LockItem.lock() : lock on Thread-1
[2010-01-25 00:53:27,954] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:27,954] DEBUG - LockItem.unlock() : unlocked on Thread-1
[2010-01-25 00:53:27,954] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:27,954] INFO  - SyncLock.run(): finish id 0, count 2
[2010-01-25 00:53:28,255] DEBUG - LockItem.lock() : lock on Thread-7
[2010-01-25 00:53:28,456] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:28,456] DEBUG - LockItem.unlock() : unlocked on Thread-7
[2010-01-25 00:53:28,456] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:28,456] INFO  - SyncLock.run(): finish id 6, count 1
[2010-01-25 00:53:28,755] DEBUG - LockItem.lock() : lock on Thread-13
[2010-01-25 00:53:28,957] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:28,957] DEBUG - LockItem.unlock() : unlocked on Thread-13
[2010-01-25 00:53:28,957] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:28,957] INFO  - SyncLock.run(): finish id 12, count 0
[2010-01-25 00:53:29,263] INFO  - SyncLock.run(): id 0, running 2, priorirty 1000
[2010-01-25 00:53:29,264] INFO  - SyncLock.run(): id 1, running 3, priorirty 1000
[2010-01-25 00:53:29,265] INFO  - SyncLock.run(): id 2, running 6, priorirty 1000
[2010-01-25 00:53:29,266] INFO  - SyncLock.run(): id 4, running 6, priorirty 1000
[2010-01-25 00:53:29,267] INFO  - SyncLock.run(): id 3, running 6, priorirty 1000
[2010-01-25 00:53:29,267] INFO  - SyncLock.run(): id 5, running 6, priorirty 1000
[2010-01-25 00:53:29,268] DEBUG - LockItem.lock() : lock on Thread-21
[2010-01-25 00:53:29,268] DEBUG - LockItem.lock() : lock on Thread-16
[2010-01-25 00:53:29,469] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:53:29,469] DEBUG - LockItem.unlock() : unlocked on Thread-21
[2010-01-25 00:53:29,469] DEBUG - LockItem.unlock() : 2 remain
[2010-01-25 00:53:29,469] INFO  - SyncLock.run(): finish id 5, count 5
[2010-01-25 00:53:29,471] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:29,471] DEBUG - LockItem.unlock() : unlocked on Thread-16
[2010-01-25 00:53:29,472] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:29,472] INFO  - SyncLock.run(): finish id 0, count 4
[2010-01-25 00:53:30,269] DEBUG - LockItem.lock() : lock on Thread-18
[2010-01-25 00:53:30,285] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:30,285] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:30,285] DEBUG - LockItem.unlock() : unlocked on Thread-20
[2010-01-25 00:53:30,285] DEBUG - LockItem.unlock() : unlocked on Thread-17
[2010-01-25 00:53:30,285] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:30,286] INFO  - SyncLock.run(): finish id 4, count 3
[2010-01-25 00:53:30,286] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:30,286] DEBUG - LockItem.unlock() : unlocked on Thread-17
[2010-01-25 00:53:30,285] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:30,286] DEBUG - LockItem.unlock() : unlocked on Thread-19
[2010-01-25 00:53:30,286] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:30,286] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:30,286] INFO  - SyncLock.run(): finish id 3, count 2
[2010-01-25 00:53:30,286] INFO  - SyncLock.run(): finish id 1, count 1
[2010-01-25 00:53:30,476] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:30,476] DEBUG - LockItem.unlock() : unlocked on Thread-18
[2010-01-25 00:53:30,476] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:30,476] INFO  - SyncLock.run(): finish id 2, count 0
[2010-01-25 00:53:32,863] DEBUG - SchemaLoader() : directory [test/schema/relax]
[2010-01-25 00:53:32,968] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Boolean.rng]
[2010-01-25 00:53:33,274] DEBUG - RelaxSchema.addBaseFields() : evaluating bool-test
[2010-01-25 00:53:33,276] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,282] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,309] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,309] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,310] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,311] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,344] DEBUG - RelaxSchema.recurse() : element BoolTest
[2010-01-25 00:53:33,379] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:53:33,379] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:53:33,391] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:53:33,391] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,399] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:53:33,399] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,425] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Complex.rng]
[2010-01-25 00:53:33,429] DEBUG - FileResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:53:33,441] DEBUG - RelaxSchema.addBaseFields() : evaluating levelone
[2010-01-25 00:53:33,441] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,441] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,441] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,442] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,442] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,442] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,444] DEBUG - RelaxSchema.recurse() : element Levelone
[2010-01-25 00:53:33,444] DEBUG - RelaxSchema.addBaseFields() : evaluating leveltwo
[2010-01-25 00:53:33,445] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,445] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,445] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,445] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,446] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,446] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,446] DEBUG - RelaxClass() : ancestor count for [Leveltwo] = 1
[2010-01-25 00:53:33,446] DEBUG - RelaxSchema.recurse() : element Leveltwo
[2010-01-25 00:53:33,449] DEBUG - RelaxClass() : ancestor count for [Levelthree.rng] = 2
[2010-01-25 00:53:33,451] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:53:33,451] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,454] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:53:33,454] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,459] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:53:33,460] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,462] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:53:33,462] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,466] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Favorite.rng]
[2010-01-25 00:53:33,474] DEBUG - RelaxSchema.addBaseFields() : evaluating favorite
[2010-01-25 00:53:33,474] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,474] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,475] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,475] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,475] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,476] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,476] DEBUG - RelaxSchema.recurse() : element Favorite
[2010-01-25 00:53:33,480] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:53:33,480] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:53:33,484] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:53:33,484] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,485] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:53:33,485] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,487] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Levelthree.rng]
[2010-01-25 00:53:33,501] DEBUG - RelaxSchema.addBaseFields() : evaluating levelthree
[2010-01-25 00:53:33,501] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,501] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,501] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,501] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,501] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,502] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,502] DEBUG - RelaxSchema.recurse() : element Levelthree
[2010-01-25 00:53:33,503] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:53:33,503] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:53:33,506] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:53:33,507] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,509] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:53:33,509] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,512] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Mixed.rng]
[2010-01-25 00:53:33,524] DEBUG - RelaxSchema.addBaseFields() : evaluating mixed-kids
[2010-01-25 00:53:33,525] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,525] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,526] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,526] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,527] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,527] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,528] DEBUG - RelaxSchema.recurse() : element MixedKids
[2010-01-25 00:53:33,529] DEBUG - RelaxClass() : ancestor count for [Title] = 1
[2010-01-25 00:53:33,529] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:53:33,537] DEBUG - RelaxClass() : ancestor count for [interleave.rng] = 1
[2010-01-25 00:53:33,539] DEBUG - RelaxSchema.ref() : follow [kid-one]
[2010-01-25 00:53:33,543] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-one
[2010-01-25 00:53:33,543] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,543] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,544] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,544] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,544] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,545] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,545] DEBUG - RelaxClass() : ancestor count for [KidOne] = 1
[2010-01-25 00:53:33,545] DEBUG - RelaxSchema.recurse() : element KidOne
[2010-01-25 00:53:33,546] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:53:33,546] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:53:33,553] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:53:33,553] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,556] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:53:33,556] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,559] DEBUG - RelaxSchema.ref() : follow [kid-two]
[2010-01-25 00:53:33,560] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-two
[2010-01-25 00:53:33,560] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,560] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,560] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,561] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,561] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,561] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,562] DEBUG - RelaxClass() : ancestor count for [KidTwo] = 1
[2010-01-25 00:53:33,562] DEBUG - RelaxSchema.recurse() : element KidTwo
[2010-01-25 00:53:33,563] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:53:33,563] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:53:33,564] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:53:33,564] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,568] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:53:33,568] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,569] DEBUG - RelaxSchema.ref() : follow [kid-three]
[2010-01-25 00:53:33,570] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-three
[2010-01-25 00:53:33,570] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,570] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,570] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,570] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,571] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,571] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,571] DEBUG - RelaxClass() : ancestor count for [KidThree] = 1
[2010-01-25 00:53:33,571] DEBUG - RelaxSchema.recurse() : element KidThree
[2010-01-25 00:53:33,572] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:53:33,572] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:53:33,574] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:53:33,574] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,575] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:53:33,575] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,577] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:53:33,577] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,578] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:53:33,578] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,583] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Sort.rng]
[2010-01-25 00:53:33,586] DEBUG - FileResolver.resolveEntity() : looking for [SortChild.rng]
[2010-01-25 00:53:33,593] DEBUG - RelaxSchema.addBaseFields() : evaluating sort
[2010-01-25 00:53:33,593] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,593] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,594] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,594] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,594] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,595] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,595] DEBUG - RelaxSchema.recurse() : element Sort
[2010-01-25 00:53:33,596] DEBUG - RelaxClass() : ancestor count for [Sort1] = 1
[2010-01-25 00:53:33,596] DEBUG - RelaxSchema.recurse() : element Sort1
[2010-01-25 00:53:33,597] DEBUG - RelaxClass() : ancestor count for [Sort2] = 1
[2010-01-25 00:53:33,597] DEBUG - RelaxSchema.recurse() : element Sort2
[2010-01-25 00:53:33,597] DEBUG - RelaxClass() : ancestor count for [SortChild.rng] = 1
[2010-01-25 00:53:33,599] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:53:33,600] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,601] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:53:33,601] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,604] INFO  - RelaxSchema.parse() : parse [test/schema/relax/SortChild.rng]
[2010-01-25 00:53:33,613] DEBUG - RelaxSchema.addBaseFields() : evaluating sort-child
[2010-01-25 00:53:33,613] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,613] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,615] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,615] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,615] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,616] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,616] DEBUG - RelaxSchema.recurse() : element SortChild
[2010-01-25 00:53:33,617] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:53:33,617] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:53:33,618] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:53:33,618] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,619] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:53:33,619] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,621] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Test.rng]
[2010-01-25 00:53:33,632] DEBUG - FileResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:33,633] DEBUG - FileResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:33,642] DEBUG - RelaxSchema.addBaseFields() : evaluating address-book
[2010-01-25 00:53:33,642] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,643] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,643] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,644] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,645] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,645] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,646] DEBUG - RelaxSchema.recurse() : element AddressBook
[2010-01-25 00:53:33,647] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-01-25 00:53:33,647] DEBUG - RelaxSchema.recurse() : element Name
[2010-01-25 00:53:33,651] DEBUG - RelaxClass() : ancestor count for [Email] = 1
[2010-01-25 00:53:33,651] DEBUG - RelaxSchema.recurse() : element Email
[2010-01-25 00:53:33,652] DEBUG - RelaxClass() : ancestor count for [Enabled] = 1
[2010-01-25 00:53:33,652] DEBUG - RelaxSchema.recurse() : element Enabled
[2010-01-25 00:53:33,654] DEBUG - RelaxSchema.ref() : follow [address]
[2010-01-25 00:53:33,656] DEBUG - RelaxSchema.addBaseFields() : evaluating address
[2010-01-25 00:53:33,656] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,656] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,656] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,657] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,657] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,658] DEBUG - RelaxClass() : ancestor count for [Address] = 1
[2010-01-25 00:53:33,658] DEBUG - RelaxSchema.recurse() : element Address
[2010-01-25 00:53:33,663] DEBUG - RelaxClass() : ancestor count for [Street] = 2
[2010-01-25 00:53:33,663] DEBUG - RelaxSchema.recurse() : element Street
[2010-01-25 00:53:33,664] DEBUG - RelaxClass() : ancestor count for [City] = 2
[2010-01-25 00:53:33,664] DEBUG - RelaxSchema.recurse() : element City
[2010-01-25 00:53:33,665] DEBUG - RelaxClass() : ancestor count for [State] = 2
[2010-01-25 00:53:33,665] DEBUG - RelaxSchema.recurse() : element State
[2010-01-25 00:53:33,665] DEBUG - RelaxClass() : ancestor count for [ZipCode] = 2
[2010-01-25 00:53:33,665] DEBUG - RelaxSchema.recurse() : element ZipCode
[2010-01-25 00:53:33,671] DEBUG - RelaxClass() : ancestor count for [Region] = 2
[2010-01-25 00:53:33,671] DEBUG - RelaxSchema.recurse() : element Region
[2010-01-25 00:53:33,673] DEBUG - RelaxClass() : ancestor count for [Region] = 2
[2010-01-25 00:53:33,673] DEBUG - RelaxSchema.recurse() : element Region
[2010-01-25 00:53:33,674] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:53:33,674] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,675] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:53:33,675] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,676] DEBUG - RelaxSchema.ref() : follow [status]
[2010-01-25 00:53:33,677] DEBUG - RelaxClass() : ancestor count for [Status] = 1
[2010-01-25 00:53:33,677] DEBUG - RelaxSchema.recurse() : element Status
[2010-01-25 00:53:33,678] DEBUG - RelaxSchema.ref() : follow [statistics]
[2010-01-25 00:53:33,679] DEBUG - RelaxSchema.addBaseFields() : evaluating statistics
[2010-01-25 00:53:33,679] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,679] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,679] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,679] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,679] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,681] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,682] DEBUG - RelaxClass() : ancestor count for [Statistics] = 1
[2010-01-25 00:53:33,682] DEBUG - RelaxSchema.recurse() : element Statistics
[2010-01-25 00:53:33,683] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:53:33,683] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,684] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:53:33,684] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,685] DEBUG - RelaxClass() : ancestor count for [Favorite.rng] = 1
[2010-01-25 00:53:33,685] DEBUG - RelaxClass() : ancestor count for [Favorite.rng] = 1
[2010-01-25 00:53:33,686] DEBUG - RelaxSchema.addBaseFields() : evaluating remover
[2010-01-25 00:53:33,686] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,686] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,686] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,688] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,688] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,689] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,689] DEBUG - RelaxClass() : ancestor count for [Remover] = 1
[2010-01-25 00:53:33,690] DEBUG - RelaxSchema.recurse() : element Remover
[2010-01-25 00:53:33,690] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-01-25 00:53:33,690] DEBUG - RelaxSchema.recurse() : element Title
[2010-01-25 00:53:33,691] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-01-25 00:53:33,691] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,692] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-01-25 00:53:33,692] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,694] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:53:33,694] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,695] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:53:33,695] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,706] DEBUG - RelaxSchema.addBaseFields() : evaluating cache
[2010-01-25 00:53:33,706] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,706] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,706] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,707] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,707] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,707] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,708] DEBUG - RelaxSchema.recurse() : element Cache
[2010-01-25 00:53:33,708] DEBUG - RelaxClass() : ancestor count for [Oid] = 1
[2010-01-25 00:53:33,708] DEBUG - RelaxSchema.recurse() : element Oid
[2010-01-25 00:53:33,716] DEBUG - RelaxClass() : ancestor count for [Otype] = 1
[2010-01-25 00:53:33,716] DEBUG - RelaxSchema.recurse() : element Otype
[2010-01-25 00:53:33,718] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:53:33,718] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,719] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:53:33,719] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,724] DEBUG - RelaxSchema.addBaseFields() : evaluating interleave
[2010-01-25 00:53:33,724] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-01-25 00:53:33,724] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-01-25 00:53:33,724] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-01-25 00:53:33,724] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-01-25 00:53:33,725] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-01-25 00:53:33,725] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-01-25 00:53:33,725] DEBUG - RelaxSchema.recurse() : element Interleave
[2010-01-25 00:53:33,725] DEBUG - RelaxClass() : ancestor count for [Ordering] = 1
[2010-01-25 00:53:33,725] DEBUG - RelaxSchema.recurse() : element Ordering
[2010-01-25 00:53:33,727] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-01-25 00:53:33,727] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-01-25 00:53:33,729] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-01-25 00:53:33,729] DEBUG - RelaxSchema.recurse() : element Created
[2010-01-25 00:53:33,735] DEBUG - DomainClass.resolveExternalRefs() : ext [Levelthree.rng]
[2010-01-25 00:53:33,742] DEBUG - DomainClass.resolveExternalRefs() : ext [interleave.rng]
[2010-01-25 00:53:33,743] DEBUG - DomainClass.resolveExternalRefs() : ext [SortChild.rng]
[2010-01-25 00:53:33,744] DEBUG - DomainClass.resolveExternalRefs() : ext [Favorite.rng]
[2010-01-25 00:53:33,755] INFO  - SchemaLoader.load() : load class [BoolTest]
[2010-01-25 00:53:34,373] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class BoolTest { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="bool-test"><optional><attribute name="available"><data type="boolean"/></attribute></optional><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Boolean.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['available','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        available(nullable : true,)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <available nullable ="true"/>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Boolean available
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "BoolTest".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:34,581] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [BoolTest]
[2010-01-25 00:53:34,581] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [BoolTest]
[2010-01-25 00:53:34,582] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:34,624] DEBUG - PersistenceLoader.addBaseClass() : load BoolTest
[2010-01-25 00:53:34,624] INFO  - SchemaLoader.load() : load class [Levelthree]
[2010-01-25 00:53:34,781] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Levelthree { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="levelthree"><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Levelthree.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['Leveltwo',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Levelthree".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:34,836] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Levelthree]
[2010-01-25 00:53:34,836] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Levelthree]
[2010-01-25 00:53:34,836] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:34,936] DEBUG - PersistenceLoader.addBaseClass() : load Levelthree
[2010-01-25 00:53:34,938] INFO  - SchemaLoader.load() : load class [Leveltwo]
[2010-01-25 00:53:35,087] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Leveltwo { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['levelthree','lastUpdated','created',]

    static final Collection<String> children = ['levelthree',]

    static final Collection<String> parents = ['Levelone',]

    // one-to-many
    static hasMany = [levelthree : Levelthree,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        levelthree(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <levelthree nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Long id
    Date lastUpdated
    Date created

    List    levelthree

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Leveltwo".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:35,122] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Leveltwo]
[2010-01-25 00:53:35,122] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Leveltwo]
[2010-01-25 00:53:35,122] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 1 properties
[2010-01-25 00:53:35,142] DEBUG - PersistenceLoader.addBaseClass() : load Leveltwo
[2010-01-25 00:53:35,142] INFO  - SchemaLoader.load() : load class [Levelone]
[2010-01-25 00:53:35,343] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Levelone { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="levelone"><oneOrMore><element name="leveltwo"><oneOrMore><externalRef href="Levelthree.rng"/></oneOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></oneOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Complex.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['leveltwo','lastUpdated','created',]

    static final Collection<String> children = ['leveltwo',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [leveltwo : Leveltwo,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        leveltwo(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <leveltwo nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Long id
    Date lastUpdated
    Date created

    List    leveltwo

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Levelone".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:35,384] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Levelone]
[2010-01-25 00:53:35,384] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Levelone]
[2010-01-25 00:53:35,384] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 1 properties
[2010-01-25 00:53:35,403] DEBUG - PersistenceLoader.addBaseClass() : load Levelone
[2010-01-25 00:53:35,403] INFO  - SchemaLoader.load() : load class [Favorite]
[2010-01-25 00:53:35,603] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Favorite { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="favorite" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><attribute name="user-id"><data type="integer"/></attribute><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Favorite.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['userId','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        userId(nullable : false,)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <userId nullable ="false"/>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer userId
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Favorite".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:35,629] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Favorite]
[2010-01-25 00:53:35,629] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Favorite]
[2010-01-25 00:53:35,629] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:35,650] DEBUG - PersistenceLoader.addBaseClass() : load Favorite
[2010-01-25 00:53:35,651] INFO  - SchemaLoader.load() : load class [Interleave]
[2010-01-25 00:53:35,748] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Interleave { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'
            ordering type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="interleave"><element name="ordering"><data type="string"><param name="maxLength">100000</param></data></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "interleave.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['ordering','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        ordering(maxSize : 100000,nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <ordering maxSize ="100000"nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String ordering
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Interleave".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:35,771] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Interleave]
[2010-01-25 00:53:35,771] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Interleave]
[2010-01-25 00:53:35,772] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:35,791] DEBUG - PersistenceLoader.addBaseClass() : load Interleave
[2010-01-25 00:53:35,791] INFO  - SchemaLoader.load() : load class [KidOne]
[2010-01-25 00:53:35,921] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidOne { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidOne".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:35,945] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidOne]
[2010-01-25 00:53:35,945] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidOne]
[2010-01-25 00:53:35,945] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:35,961] DEBUG - PersistenceLoader.addBaseClass() : load KidOne
[2010-01-25 00:53:35,961] INFO  - SchemaLoader.load() : load class [KidTwo]
[2010-01-25 00:53:36,188] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidTwo { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidTwo".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:36,211] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidTwo]
[2010-01-25 00:53:36,211] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidTwo]
[2010-01-25 00:53:36,211] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:36,226] DEBUG - PersistenceLoader.addBaseClass() : load KidTwo
[2010-01-25 00:53:36,226] INFO  - SchemaLoader.load() : load class [KidThree]
[2010-01-25 00:53:36,329] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidThree { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidThree".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:36,355] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidThree]
[2010-01-25 00:53:36,355] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidThree]
[2010-01-25 00:53:36,355] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:36,369] DEBUG - PersistenceLoader.addBaseClass() : load KidThree
[2010-01-25 00:53:36,369] INFO  - SchemaLoader.load() : load class [MixedKids]
[2010-01-25 00:53:36,464] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class MixedKids { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><define name="kid-one"><element name="kid-one"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="kid-two"><element name="kid-two"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="kid-three"><element name="kid-three"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><start><element name="mixed-kids"><element name="title"><text/></element><interleave><zeroOrMore><ref name="kid-one"/></zeroOrMore><zeroOrMore><ref name="kid-two"/></zeroOrMore></interleave><zeroOrMore><ref name="kid-three"/></zeroOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Mixed.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','interleave','kidOne','kidTwo','kidThree','lastUpdated','created',]

    static final Collection<String> children = ['interleave','kidOne','kidTwo','kidThree',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [kidOne : KidOne,kidTwo : KidTwo,kidThree : KidThree,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        interleave(nullable : true,)
        kidOne(nullable : true,)
        kidTwo(nullable : true,)
        kidThree(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <interleave nullable ="true"/>
            <kidOne nullable ="true"/>
            <kidTwo nullable ="true"/>
            <kidThree nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    Interleave interleave


    // fields
    String title
    Long id
    Date lastUpdated
    Date created

    List    kidOne
    List    kidTwo
    List    kidThree

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "MixedKids".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:36,501] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [MixedKids]
[2010-01-25 00:53:36,501] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [MixedKids]
[2010-01-25 00:53:36,501] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 3 properties
[2010-01-25 00:53:36,526] DEBUG - PersistenceLoader.addBaseClass() : load MixedKids
[2010-01-25 00:53:36,526] INFO  - SchemaLoader.load() : load class [SortChild]
[2010-01-25 00:53:36,693] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class SortChild { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="sort-child" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "SortChild.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['Sort',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "SortChild".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:36,721] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [SortChild]
[2010-01-25 00:53:36,721] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [SortChild]
[2010-01-25 00:53:36,721] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:36,735] DEBUG - PersistenceLoader.addBaseClass() : load SortChild
[2010-01-25 00:53:36,735] INFO  - SchemaLoader.load() : load class [Sort]
[2010-01-25 00:53:36,816] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Sort { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="sort" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><element name="sort1"><text/></element><element name="sort2"><text/></element><optional><externalRef href="SortChild.rng"/></optional><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Sort.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['sort1','sort2','sortChild','lastUpdated','created',]

    static final Collection<String> children = ['sortChild',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        sort1(nullable : false,)
        sort2(nullable : false,)
        sortChild(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <sort1 nullable ="false"/>
            <sort2 nullable ="false"/>
            <sortChild nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    SortChild sortChild


    // fields
    String sort1
    String sort2
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Sort".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:36,843] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Sort]
[2010-01-25 00:53:36,843] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Sort]
[2010-01-25 00:53:36,843] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:36,855] DEBUG - PersistenceLoader.addBaseClass() : load Sort
[2010-01-25 00:53:36,855] INFO  - SchemaLoader.load() : load class [Address]
[2010-01-25 00:53:36,975] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Address { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id','type',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['street','city','state','zipCode','region','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        id(nullable : true,)
        type(nullable : false,inList : ["home","work",], )
        street(nullable : false,)
        city(nullable : false,)
        state(nullable : false,)
        zipCode(nullable : false,)
        region(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <id nullable ="true"/>
            <type nullable ="false"inList ="["home"""work""]" />
            <street nullable ="false"/>
            <city nullable ="false"/>
            <state nullable ="false"/>
            <zipCode nullable ="false"/>
            <region nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer id
    String type
    String[] street
    String city
    String state
    Integer zipCode
    String[] region
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Address".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:36,998] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Address]
[2010-01-25 00:53:36,998] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Address]
[2010-01-25 00:53:36,998] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:37,011] DEBUG - PersistenceLoader.addBaseClass() : load Address
[2010-01-25 00:53:37,011] INFO  - SchemaLoader.load() : load class [Statistics]
[2010-01-25 00:53:37,085] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Statistics { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['accessed','size','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        accessed(nullable : false,)
        size(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <accessed nullable ="false"/>
            <size nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer accessed
    Long size
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Statistics".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:37,195] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Statistics]
[2010-01-25 00:53:37,195] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Statistics]
[2010-01-25 00:53:37,195] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:37,207] DEBUG - PersistenceLoader.addBaseClass() : load Statistics
[2010-01-25 00:53:37,207] INFO  - SchemaLoader.load() : load class [Remover]
[2010-01-25 00:53:37,280] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Remover { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Remover".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:37,305] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Remover]
[2010-01-25 00:53:37,305] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Remover]
[2010-01-25 00:53:37,306] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:37,317] DEBUG - PersistenceLoader.addBaseClass() : load Remover
[2010-01-25 00:53:37,317] INFO  - SchemaLoader.load() : load class [AddressBook]
[2010-01-25 00:53:37,393] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class AddressBook { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><define name="address"><element name="address"><optional><attribute name="id"><data type="integer"/></attribute></optional><attribute name="type"><choice><value>home</value><value>work</value></choice></attribute><oneOrMore><element name="street"><text/></element></oneOrMore><element name="city"><text/></element><element name="state"><text/></element><element name="zip-code"><data type="integer"/></element><optional><element name="region"><text/></element><element name="region"><text/></element></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="status"><element name="status"><choice><value>new</value><value>reviewed</value></choice></element></define><define name="statistics"><element name="statistics"><attribute name="accessed"><data type="integer"/></attribute><attribute name="size"><data type="long"/></attribute><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><start><element name="address-book"><optional><attribute name="address-count"><text/></attribute></optional><element name="name"><data type="string"><param name="maxLength">100</param></data></element><optional><element name="email"><text/></element></optional><optional><element name="enabled"><empty/></element></optional><zeroOrMore><ref name="address"/></zeroOrMore><optional><ref name="status"/></optional><ref name="statistics"/><externalRef href="Favorite.rng"/><externalRef href="Favorite.rng"/><optional><element name="remover"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></optional><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Test.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['addressCount','id',]

    // primitives that should be empty
    static final Collection<String> empty = ['enabled',]

    static final Collection<String> elements = ['name','email','enabled','address','status','statistics','favorite','remover','lastUpdated','created',]

    static final Collection<String> children = ['address','statistics','favorite','remover',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [address : Address,favorite : Favorite,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        addressCount(nullable : true,)
        name(maxSize : 100,nullable : false,)
        email(nullable : true,)
        enabled(nullable : false,)
        address(nullable : true,)
        status(nullable : true,inList : ["new","reviewed",], )
        statistics(nullable : false,)
        favorite(nullable : false,)
        remover(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <addressCount nullable ="true"/>
            <name maxSize ="100"nullable ="false"/>
            <email nullable ="true"/>
            <enabled nullable ="false"/>
            <address nullable ="true"/>
            <status nullable ="true"inList ="["new"""reviewed""]" />
            <statistics nullable ="false"/>
            <favorite nullable ="false"/>
            <remover nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    Statistics statistics
    Remover remover


    // fields
    String addressCount
    String name
    String email
    Boolean enabled
    String status
    Long id
    Date lastUpdated
    Date created

    List    address
    List    favorite

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "AddressBook".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:37,437] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [AddressBook]
[2010-01-25 00:53:37,437] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [AddressBook]
[2010-01-25 00:53:37,437] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 2 properties
[2010-01-25 00:53:37,448] DEBUG - PersistenceLoader.addBaseClass() : load AddressBook
[2010-01-25 00:53:37,449] INFO  - SchemaLoader.load() : load class [Cache]
[2010-01-25 00:53:37,519] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Cache { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="cache"><element name="oid"><text/></element><element name="otype"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "cache.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['oid','otype','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        oid(nullable : false,)
        otype(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <oid nullable ="false"/>
            <otype nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String oid
    String otype
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Cache".hashCode() + id.hashCode()
    }

}

[2010-01-25 00:53:37,538] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Cache]
[2010-01-25 00:53:37,538] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Cache]
[2010-01-25 00:53:37,539] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-01-25 00:53:37,552] DEBUG - PersistenceLoader.addBaseClass() : load Cache
[2010-01-25 00:53:38,449] INFO  - Hibernate 3.3.1.GA
[2010-01-25 00:53:38,453] INFO  - hibernate.properties not found
[2010-01-25 00:53:38,457] INFO  - Bytecode provider name : javassist
[2010-01-25 00:53:38,460] INFO  - using JDK 1.4 java.sql.Timestamp handling
[2010-01-25 00:53:38,515] INFO  - configuring from url: file:/Users/rgrey/Work/persistence/etc/hibernate.cfg.xml
[2010-01-25 00:53:38,704] INFO  - Configured SessionFactory: null
[2010-01-25 00:53:38,731] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:53:38,783] INFO  - Running hbm2ddl schema update
[2010-01-25 00:53:38,784] INFO  - fetching database metadata
[2010-01-25 00:53:38,787] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:53:38,787] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:53:38,787] INFO  - autocommit mode: false
[2010-01-25 00:53:39,034] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:53:39,035] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:53:39,455] INFO  - updating schema
[2010-01-25 00:53:40,939] INFO  - table found: .APP.ADDRESS
[2010-01-25 00:53:40,939] INFO  - columns: [created, type, street, region, xmlcache, state, last_updated, city, id, zip_code, version]
[2010-01-25 00:53:40,939] INFO  - foreign keys: []
[2010-01-25 00:53:40,939] INFO  - indexes: [sql100124042657690]
[2010-01-25 00:53:40,978] INFO  - table found: .APP.ADDRESS_BOOK
[2010-01-25 00:53:40,978] INFO  - columns: [created, enabled, xmlcache, email, status, statistics_id, address_count, last_updated, name, remover_id, id, version]
[2010-01-25 00:53:40,978] INFO  - foreign keys: [fkfb8b05459d996fa, fkfb8b054e5d50ada]
[2010-01-25 00:53:40,978] INFO  - indexes: [sql100124042657740, sql100124042658320, sql100124042658280]
[2010-01-25 00:53:40,996] INFO  - table found: .APP.ADDRESS_BOOK_ADDRESS
[2010-01-25 00:53:40,996] INFO  - columns: [address_id, address_book_address_id, address_idx]
[2010-01-25 00:53:40,996] INFO  - foreign keys: [fkd2a45f096ebf151a]
[2010-01-25 00:53:40,996] INFO  - indexes: [sql100125002636120]
[2010-01-25 00:53:41,032] INFO  - table found: .APP.ADDRESS_BOOK_FAVORITE
[2010-01-25 00:53:41,033] INFO  - columns: [favorite_idx, address_book_favorite_id, favorite_id]
[2010-01-25 00:53:41,033] INFO  - foreign keys: [fk92d6927cfe2205a]
[2010-01-25 00:53:41,033] INFO  - indexes: [sql100125002636210]
[2010-01-25 00:53:41,045] INFO  - table found: .APP.BOOL_TEST
[2010-01-25 00:53:41,045] INFO  - columns: [created, available, xmlcache, last_updated, name, id, version]
[2010-01-25 00:53:41,045] INFO  - foreign keys: []
[2010-01-25 00:53:41,045] INFO  - indexes: [sql100124042657800]
[2010-01-25 00:53:41,058] INFO  - table found: .APP.CACHE
[2010-01-25 00:53:41,058] INFO  - columns: [created, oid, xmlcache, last_updated, otype, id, version]
[2010-01-25 00:53:41,058] INFO  - foreign keys: []
[2010-01-25 00:53:41,058] INFO  - indexes: [sql100124042657810]
[2010-01-25 00:53:41,069] INFO  - table found: .APP.FAVORITE
[2010-01-25 00:53:41,069] INFO  - columns: [created, user_id, xmlcache, last_updated, name, id, version]
[2010-01-25 00:53:41,069] INFO  - foreign keys: []
[2010-01-25 00:53:41,069] INFO  - indexes: [sql100124042657840]
[2010-01-25 00:53:41,085] INFO  - table found: .APP.INTERLEAVE
[2010-01-25 00:53:41,085] INFO  - columns: [created, ordering, xmlcache, last_updated, id, version]
[2010-01-25 00:53:41,086] INFO  - foreign keys: []
[2010-01-25 00:53:41,086] INFO  - indexes: [sql100124042657860]
[2010-01-25 00:53:41,103] INFO  - table found: .APP.KID_ONE
[2010-01-25 00:53:41,103] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:53:41,103] INFO  - foreign keys: []
[2010-01-25 00:53:41,103] INFO  - indexes: [sql100124042657890]
[2010-01-25 00:53:41,114] INFO  - table found: .APP.KID_THREE
[2010-01-25 00:53:41,114] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:53:41,114] INFO  - foreign keys: []
[2010-01-25 00:53:41,114] INFO  - indexes: [sql100124042657910]
[2010-01-25 00:53:41,130] INFO  - table found: .APP.KID_TWO
[2010-01-25 00:53:41,130] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:53:41,130] INFO  - foreign keys: []
[2010-01-25 00:53:41,131] INFO  - indexes: [sql100124042657920]
[2010-01-25 00:53:41,144] INFO  - table found: .APP.LEVELONE
[2010-01-25 00:53:41,145] INFO  - columns: [created, xmlcache, last_updated, id, version]
[2010-01-25 00:53:41,145] INFO  - foreign keys: []
[2010-01-25 00:53:41,145] INFO  - indexes: [sql100124042657940]
[2010-01-25 00:53:41,158] INFO  - table found: .APP.LEVELONE_LEVELTWO
[2010-01-25 00:53:41,158] INFO  - columns: [leveltwo_id, leveltwo_idx, levelone_leveltwo_id]
[2010-01-25 00:53:41,158] INFO  - foreign keys: [fk64bd1385277790da]
[2010-01-25 00:53:41,158] INFO  - indexes: [sql100125002636240]
[2010-01-25 00:53:41,170] INFO  - table found: .APP.LEVELTHREE
[2010-01-25 00:53:41,170] INFO  - columns: [created, xmlcache, last_updated, name, id, version]
[2010-01-25 00:53:41,175] INFO  - foreign keys: []
[2010-01-25 00:53:41,175] INFO  - indexes: [sql100124042657960]
[2010-01-25 00:53:41,187] INFO  - table found: .APP.LEVELTWO
[2010-01-25 00:53:41,187] INFO  - columns: [created, xmlcache, last_updated, id, version]
[2010-01-25 00:53:41,187] INFO  - foreign keys: []
[2010-01-25 00:53:41,188] INFO  - indexes: [sql100124042658140]
[2010-01-25 00:53:41,226] INFO  - table found: .APP.LEVELTWO_LEVELTHREE
[2010-01-25 00:53:41,226] INFO  - columns: [levelthree_idx, leveltwo_levelthree_id, levelthree_id]
[2010-01-25 00:53:41,226] INFO  - foreign keys: [fk42a02cf113c3cf9a]
[2010-01-25 00:53:41,226] INFO  - indexes: [sql100125002636280]
[2010-01-25 00:53:41,239] INFO  - table found: .APP.MIXED_KIDS
[2010-01-25 00:53:41,239] INFO  - columns: [created, title, xmlcache, last_updated, interleave_id, id, version]
[2010-01-25 00:53:41,239] INFO  - foreign keys: [fk13caac31770fcbfa]
[2010-01-25 00:53:41,239] INFO  - indexes: [sql100124042658160, sql100124042658340]
[2010-01-25 00:53:41,265] INFO  - table found: .APP.MIXED_KIDS_KID_ONE
[2010-01-25 00:53:41,265] INFO  - columns: [mixed_kids_kid_one_id, kid_one_id, kid_one_idx]
[2010-01-25 00:53:41,265] INFO  - foreign keys: [fk671d3b5f69c27b0d]
[2010-01-25 00:53:41,265] INFO  - indexes: [sql100125002636310]
[2010-01-25 00:53:41,276] INFO  - table found: .APP.MIXED_KIDS_KID_THREE
[2010-01-25 00:53:41,276] INFO  - columns: [mixed_kids_kid_three_id, kid_three_idx, kid_three_id]
[2010-01-25 00:53:41,276] INFO  - foreign keys: [fk14ffd857e3d6174d]
[2010-01-25 00:53:41,276] INFO  - indexes: [sql100125002636330]
[2010-01-25 00:53:41,285] INFO  - table found: .APP.MIXED_KIDS_KID_TWO
[2010-01-25 00:53:41,285] INFO  - columns: [kid_two_id, mixed_kids_kid_two_id, kid_two_idx]
[2010-01-25 00:53:41,285] INFO  - foreign keys: [fk671d4f4572ce294d]
[2010-01-25 00:53:41,285] INFO  - indexes: [sql100125002636370]
[2010-01-25 00:53:41,294] INFO  - table found: .APP.REMOVER
[2010-01-25 00:53:41,294] INFO  - columns: [created, title, xmlcache, last_updated, id, version]
[2010-01-25 00:53:41,294] INFO  - foreign keys: []
[2010-01-25 00:53:41,294] INFO  - indexes: [sql100124042658200]
[2010-01-25 00:53:41,313] INFO  - table found: .APP.SORT
[2010-01-25 00:53:41,313] INFO  - columns: [created, sort2, sort_child_id, sort1, xmlcache, last_updated, id, version]
[2010-01-25 00:53:41,313] INFO  - foreign keys: [fk35f59e577cc69d]
[2010-01-25 00:53:41,313] INFO  - indexes: [sql100124042658350, sql100124042658220]
[2010-01-25 00:53:41,330] INFO  - table found: .APP.SORT_CHILD
[2010-01-25 00:53:41,330] INFO  - columns: [created, xmlcache, last_updated, name, id, version]
[2010-01-25 00:53:41,330] INFO  - foreign keys: []
[2010-01-25 00:53:41,330] INFO  - indexes: [sql100124042658240]
[2010-01-25 00:53:41,338] INFO  - table found: .APP.STATISTICS
[2010-01-25 00:53:41,338] INFO  - columns: [created, accessed, xmlcache, size, last_updated, id, version]
[2010-01-25 00:53:41,338] INFO  - foreign keys: []
[2010-01-25 00:53:41,339] INFO  - indexes: [sql100124042658260]
[2010-01-25 00:53:41,375] INFO  - table found: .APP.HIBERNATE_UNIQUE_KEY
[2010-01-25 00:53:41,375] INFO  - columns: [next_hi]
[2010-01-25 00:53:41,376] INFO  - foreign keys: []
[2010-01-25 00:53:41,376] INFO  - indexes: []
[2010-01-25 00:53:41,378] INFO  - schema update complete
[2010-01-25 00:53:41,384] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:53:41,384] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:53:41,384] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:53:41,392] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-01-25 00:53:41,392] INFO  - Hibernate connection pool size: 20
[2010-01-25 00:53:41,392] INFO  - autocommit mode: false
[2010-01-25 00:53:41,392] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-01-25 00:53:41,392] INFO  - connection properties: {user=, password=****}
[2010-01-25 00:53:41,395] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-01-25 00:53:41,395] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-01-25 00:53:41,398] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-01-25 00:53:41,400] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-01-25 00:53:41,401] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-01-25 00:53:41,402] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-01-25 00:53:41,402] INFO  - Automatic session close at end of transaction: disabled
[2010-01-25 00:53:41,402] INFO  - Scrollable result sets: enabled
[2010-01-25 00:53:41,402] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-01-25 00:53:41,402] INFO  - Connection release mode: auto
[2010-01-25 00:53:41,403] INFO  - Maximum outer join fetch depth: 1
[2010-01-25 00:53:41,403] INFO  - Default batch fetch size: 1
[2010-01-25 00:53:41,403] INFO  - Generate SQL with comments: disabled
[2010-01-25 00:53:41,403] INFO  - Order SQL updates by primary key: disabled
[2010-01-25 00:53:41,403] INFO  - Order SQL inserts for batching: disabled
[2010-01-25 00:53:41,403] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-01-25 00:53:41,405] INFO  - Using ASTQueryTranslatorFactory
[2010-01-25 00:53:41,405] INFO  - Query language substitutions: {}
[2010-01-25 00:53:41,405] INFO  - JPA-QL strict compliance: disabled
[2010-01-25 00:53:41,405] INFO  - Second-level cache: enabled
[2010-01-25 00:53:41,405] INFO  - Query cache: enabled
[2010-01-25 00:53:41,409] INFO  - Cache region factory : org.hibernate.cache.impl.bridge.RegionFactoryCacheProviderBridge
[2010-01-25 00:53:41,410] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-01-25 00:53:41,412] INFO  - Optimize cache for minimal puts: disabled
[2010-01-25 00:53:41,412] INFO  - Cache region prefix: arv
[2010-01-25 00:53:41,412] INFO  - Structured second-level cache entries: disabled
[2010-01-25 00:53:41,412] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-01-25 00:53:41,418] INFO  - Statistics: disabled
[2010-01-25 00:53:41,418] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-01-25 00:53:41,418] INFO  - Default entity-mode: pojo
[2010-01-25 00:53:41,419] INFO  - Named query checking : enabled
[2010-01-25 00:53:41,465] INFO  - building session factory
[2010-01-25 00:53:41,503] WARN  - Could not find configuration [arv.BoolTest]; using defaults.
[2010-01-25 00:53:41,829] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-01-25 00:53:41,865] WARN  - Could not find configuration [arv.Sort]; using defaults.
[2010-01-25 00:53:41,892] WARN  - Could not find configuration [arv.KidTwo]; using defaults.
[2010-01-25 00:53:41,917] WARN  - Could not find configuration [arv.MixedKids]; using defaults.
[2010-01-25 00:53:41,942] WARN  - Could not find configuration [arv.KidThree]; using defaults.
[2010-01-25 00:53:41,960] WARN  - Could not find configuration [arv.Favorite]; using defaults.
[2010-01-25 00:53:41,980] WARN  - Could not find configuration [arv.Levelthree]; using defaults.
[2010-01-25 00:53:41,998] WARN  - Could not find configuration [arv.Interleave]; using defaults.
[2010-01-25 00:53:42,018] WARN  - Could not find configuration [arv.SortChild]; using defaults.
[2010-01-25 00:53:42,049] WARN  - Could not find configuration [arv.Leveltwo]; using defaults.
[2010-01-25 00:53:42,065] WARN  - Could not find configuration [arv.Address]; using defaults.
[2010-01-25 00:53:42,085] WARN  - Could not find configuration [arv.Levelone]; using defaults.
[2010-01-25 00:53:42,103] WARN  - Could not find configuration [arv.Cache]; using defaults.
[2010-01-25 00:53:42,120] WARN  - Could not find configuration [arv.KidOne]; using defaults.
[2010-01-25 00:53:42,136] WARN  - Could not find configuration [arv.Remover]; using defaults.
[2010-01-25 00:53:42,150] WARN  - Could not find configuration [arv.AddressBook]; using defaults.
[2010-01-25 00:53:42,174] WARN  - Could not find configuration [arv.Statistics]; using defaults.
[2010-01-25 00:53:42,266] INFO  - Not binding factory to JNDI, no JNDI name configured
[2010-01-25 00:53:42,269] INFO  - starting update timestamps cache at region: arv.org.hibernate.cache.UpdateTimestampsCache
[2010-01-25 00:53:42,270] WARN  - Could not find configuration [arv.org.hibernate.cache.UpdateTimestampsCache]; using defaults.
[2010-01-25 00:53:42,272] INFO  - starting query cache at region: arv.org.hibernate.cache.StandardQueryCache
[2010-01-25 00:53:42,272] WARN  - Could not find configuration [arv.org.hibernate.cache.StandardQueryCache]; using defaults.
[2010-01-25 00:53:42,274] DEBUG - PersistenceLoader.load() : loaded 17 class(es)
[2010-01-25 00:53:42,357] DEBUG - XmlSerializer() : loaded 17 classes
[2010-01-25 00:53:42,389] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:42,406] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:42,414] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:42,631] DEBUG - XmlSerializer.save() : timing 258 at [extract]
[2010-01-25 00:53:42,683] DEBUG - XmlSerializer.save() : timing 52 at [lock]
[2010-01-25 00:53:42,695] DEBUG - XmlSerializer.save() : timing 12 at [changed]
[2010-01-25 00:53:42,720] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:42,843] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:53:42,844] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:53:42,867] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:42,868] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:42,870] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:42,875] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:42,878] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:42,878] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:42,878] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:42,879] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:42,882] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:42,886] DEBUG - XmlSerializer.save() : timing 191 at [storeAll]
[2010-01-25 00:53:42,910] DEBUG - XmlSerializer.save() : timing 24 at [findupdate]
[2010-01-25 00:53:42,920] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736704]
[2010-01-25 00:53:42,931] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:43,075] DEBUG - PooledThread.queue() : priority 1
[2010-01-25 00:53:43,076] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,076] DEBUG - UpdateCache.update() : update [class Address], id [1605632]
[2010-01-25 00:53:43,077] DEBUG - UpdateThread.update() : begin 1145583
[2010-01-25 00:53:43,078] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:43,099] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,099] DEBUG - UpdateCache.update() : update [class Statistics], id [1638400]
[2010-01-25 00:53:43,100] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:43,104] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,104] DEBUG - UpdateCache.update() : update [class Favorite], id [1671168]
[2010-01-25 00:53:43,107] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:43,109] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,109] DEBUG - UpdateCache.update() : update [class Favorite], id [1671169]
[2010-01-25 00:53:43,109] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:43,112] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,112] DEBUG - UpdateCache.update() : update [class Remover], id [1703936]
[2010-01-25 00:53:43,113] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:43,115] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,115] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736704]
[2010-01-25 00:53:43,115] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:43,135] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,135] DEBUG - UpdateCache.update() : update [class Address], id [1605632]
[2010-01-25 00:53:43,135] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:43,140] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,140] DEBUG - UpdateCache.update() : update [class Statistics], id [1638400]
[2010-01-25 00:53:43,140] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:43,143] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,143] DEBUG - UpdateCache.update() : update [class Favorite], id [1671168]
[2010-01-25 00:53:43,143] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:43,146] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,146] DEBUG - UpdateCache.update() : update [class Favorite], id [1671169]
[2010-01-25 00:53:43,146] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:43,155] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,155] DEBUG - UpdateCache.update() : update [class Remover], id [1703936]
[2010-01-25 00:53:43,156] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:43,157] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,157] DEBUG - XmlSerializer.save() : timing 247 at [cache]
[2010-01-25 00:53:43,474] DEBUG - UpdateThread.update() : update 1343489, type class Levelone
[2010-01-25 00:53:43,749] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:53:43,749] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:53:43,753] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:43,753] DEBUG - XmlSerializer.save() : timing 596 at [save]
[2010-01-25 00:53:43,753] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:43,754] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:43,755] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:43,766] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:43,769] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:43,816] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:43,822] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:43,824] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:43,851] DEBUG - XmlSerializer.save() : timing 35 at [extract]
[2010-01-25 00:53:43,851] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:43,851] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:43,852] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:43,859] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:43,859] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:43,860] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:43,861] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:43,861] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:43,862] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:43,862] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:43,863] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:43,863] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:43,864] DEBUG - XmlSerializer.save() : timing 13 at [storeAll]
[2010-01-25 00:53:43,866] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:53:43,867] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736705]
[2010-01-25 00:53:43,867] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:43,887] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,887] DEBUG - UpdateCache.update() : update [class Address], id [1605633]
[2010-01-25 00:53:43,888] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:43,891] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,891] DEBUG - UpdateCache.update() : update [class Statistics], id [1638401]
[2010-01-25 00:53:43,892] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:43,895] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,895] DEBUG - UpdateCache.update() : update [class Favorite], id [1671170]
[2010-01-25 00:53:43,895] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:43,897] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:43,897] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,898] DEBUG - UpdateCache.update() : update [class Favorite], id [1671171]
[2010-01-25 00:53:43,898] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:43,900] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,900] DEBUG - UpdateCache.update() : update [class Remover], id [1703937]
[2010-01-25 00:53:43,900] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:43,901] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:43,904] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,905] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736705]
[2010-01-25 00:53:43,905] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:43,916] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:53:43,918] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:53:43,918] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,918] DEBUG - UpdateCache.update() : update [class Address], id [1605633]
[2010-01-25 00:53:43,918] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:43,923] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,923] DEBUG - UpdateCache.update() : update [class Statistics], id [1638401]
[2010-01-25 00:53:43,923] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:43,925] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,925] DEBUG - UpdateCache.update() : update [class Favorite], id [1671170]
[2010-01-25 00:53:43,925] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:43,927] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,927] DEBUG - UpdateCache.update() : update [class Favorite], id [1671171]
[2010-01-25 00:53:43,927] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:43,929] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,929] DEBUG - UpdateCache.update() : update [class Remover], id [1703937]
[2010-01-25 00:53:43,929] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:43,931] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:43,931] DEBUG - XmlSerializer.save() : timing 65 at [cache]
[2010-01-25 00:53:43,957] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:43,957] DEBUG - XmlSerializer.save() : timing 26 at [save]
[2010-01-25 00:53:43,957] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:43,957] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:43,967] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:43,969] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:43,982] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:43,982] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:43,983] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:43,983] DEBUG - UpdateThread.update() : total 321, complete 1
[2010-01-25 00:53:43,984] DEBUG - UpdateThread.update() : update 1310722, type class Leveltwo
[2010-01-25 00:53:43,986] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:43,991] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:43,992] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:43,998] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:53:43,998] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:53:44,003] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:44,009] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,012] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,016] DEBUG - LockItem.unlock() : 3 current
[2010-01-25 00:53:44,016] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,017] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,017] DEBUG - UpdateThread.update() : total 321, complete 2
[2010-01-25 00:53:44,017] DEBUG - UpdateThread.update() : update 1277955, type class Levelthree
[2010-01-25 00:53:44,018] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:44,022] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,022] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:44,024] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:53:44,024] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:53:44,031] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,037] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,037] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,037] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,037] DEBUG - UpdateThread.update() : total 321, complete 3
[2010-01-25 00:53:44,038] DEBUG - UpdateThread.update() : update 1277956, type class Levelthree
[2010-01-25 00:53:44,039] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:44,041] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,041] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:44,042] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:53:44,042] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:53:44,055] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,055] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,055] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,055] DEBUG - UpdateThread.update() : total 321, complete 4
[2010-01-25 00:53:44,055] DEBUG - UpdateThread.update() : update 1310723, type class Leveltwo
[2010-01-25 00:53:44,056] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:44,057] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:44,063] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,064] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:44,064] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,067] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,069] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:53:44,069] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:53:44,072] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:44,072] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,072] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,072] DEBUG - UpdateThread.update() : total 321, complete 5
[2010-01-25 00:53:44,072] DEBUG - UpdateThread.update() : update 1277957, type class Levelthree
[2010-01-25 00:53:44,072] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:44,076] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,076] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:44,079] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:53:44,080] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:53:44,083] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,083] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,083] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,083] DEBUG - UpdateThread.update() : total 321, complete 6
[2010-01-25 00:53:44,084] DEBUG - UpdateThread.update() : update 1343489, type class Levelone
[2010-01-25 00:53:44,085] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,087] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,090] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,090] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,090] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,090] DEBUG - UpdateThread.update() : total 321, complete 7
[2010-01-25 00:53:44,090] DEBUG - UpdateThread.update() : update 1310722, type class Leveltwo
[2010-01-25 00:53:44,091] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,093] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,095] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,095] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,095] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,095] DEBUG - UpdateThread.update() : total 321, complete 8
[2010-01-25 00:53:44,096] DEBUG - UpdateThread.update() : update 1277955, type class Levelthree
[2010-01-25 00:53:44,098] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,100] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,101] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,102] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,102] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,102] DEBUG - UpdateThread.update() : total 321, complete 9
[2010-01-25 00:53:44,102] DEBUG - UpdateThread.update() : update 1277956, type class Levelthree
[2010-01-25 00:53:44,102] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,104] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,105] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,105] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,106] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,106] DEBUG - UpdateThread.update() : total 321, complete 10
[2010-01-25 00:53:44,106] DEBUG - UpdateThread.update() : update 1310723, type class Leveltwo
[2010-01-25 00:53:44,107] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,110] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,110] DEBUG - XmlSerializer.save() : timing 54 at [extract]
[2010-01-25 00:53:44,110] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:44,112] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,112] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,112] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,112] DEBUG - UpdateThread.update() : total 321, complete 11
[2010-01-25 00:53:44,113] DEBUG - UpdateThread.update() : update 1277957, type class Levelthree
[2010-01-25 00:53:44,113] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,115] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,122] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,122] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,122] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,122] DEBUG - UpdateThread.update() : total 321, complete 12
[2010-01-25 00:53:44,124] DEBUG - UpdateThread.update() : update 1343490, type class Levelone
[2010-01-25 00:53:44,126] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:44,130] DEBUG - XmlSerializer.save() : timing 20 at [lock]
[2010-01-25 00:53:44,131] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,145] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,147] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:44,153] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:53:44,153] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:53:44,156] DEBUG - LockItem.unlock() : 11 current
[2010-01-25 00:53:44,156] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,156] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,156] DEBUG - UpdateThread.update() : total 321, complete 13
[2010-01-25 00:53:44,157] DEBUG - UpdateThread.update() : update 1310724, type class Leveltwo
[2010-01-25 00:53:44,157] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:44,164] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,165] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:44,171] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:53:44,171] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:53:44,177] DEBUG - LockItem.unlock() : 10 current
[2010-01-25 00:53:44,177] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,177] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,177] DEBUG - UpdateThread.update() : total 321, complete 14
[2010-01-25 00:53:44,177] DEBUG - UpdateThread.update() : update 1277955, type class Levelthree
[2010-01-25 00:53:44,178] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,181] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,182] DEBUG - XmlCompare.next(): hit  <status>new</status> vs.  <address type="home">
[2010-01-25 00:53:44,184] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,184] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,184] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,184] DEBUG - UpdateThread.update() : total 321, complete 15
[2010-01-25 00:53:44,185] DEBUG - UpdateThread.update() : update 1277956, type class Levelthree
[2010-01-25 00:53:44,186] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,188] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,195] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,196] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,196] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,196] DEBUG - UpdateThread.update() : total 321, complete 16
[2010-01-25 00:53:44,196] DEBUG - UpdateThread.update() : update 1277957, type class Levelthree
[2010-01-25 00:53:44,197] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,199] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,202] DEBUG - XmlCompare.compare() : [[1736705:address-book]]
[2010-01-25 00:53:44,202] DEBUG - XmlSerializer.save() : timing 72 at [changed]
[2010-01-25 00:53:44,206] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,206] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,206] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,206] DEBUG - UpdateThread.update() : total 321, complete 17
[2010-01-25 00:53:44,207] DEBUG - UpdateThread.update() : update 1343490, type class Levelone
[2010-01-25 00:53:44,207] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,209] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,211] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,211] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,211] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,211] DEBUG - UpdateThread.update() : total 321, complete 18
[2010-01-25 00:53:44,211] DEBUG - UpdateThread.update() : update 1310724, type class Leveltwo
[2010-01-25 00:53:44,212] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,215] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,217] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,217] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,217] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,217] DEBUG - UpdateThread.update() : total 321, complete 19
[2010-01-25 00:53:44,218] DEBUG - UpdateThread.update() : update 1343491, type class Levelone
[2010-01-25 00:53:44,218] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,219] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:44,231] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,232] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:44,238] DEBUG - XmlSerializer().storeAll() : old [1605633]
[2010-01-25 00:53:44,238] DEBUG - XmlSerializer().storeAll() : new [1605633, null]
[2010-01-25 00:53:44,239] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 1605633, Address : 1605634]], old [[Address : 1605633, Address : 1605634]]
[2010-01-25 00:53:44,242] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:53:44,242] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:53:44,246] DEBUG - LockItem.unlock() : 11 current
[2010-01-25 00:53:44,246] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,246] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,246] DEBUG - UpdateThread.update() : total 321, complete 20
[2010-01-25 00:53:44,246] DEBUG - UpdateThread.update() : update 1310725, type class Leveltwo
[2010-01-25 00:53:44,247] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:44,254] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,254] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:44,259] DEBUG - UpdateCache.remove() : size before 12
[2010-01-25 00:53:44,259] DEBUG - UpdateCache.remove() : size after 12
[2010-01-25 00:53:44,269] DEBUG - XmlSerializer().storeAll() : old [1671170, 1671171]
[2010-01-25 00:53:44,269] DEBUG - XmlSerializer().storeAll() : new [1671170, 1671171]
[2010-01-25 00:53:44,270] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1736705]
[2010-01-25 00:53:44,271] DEBUG - XmlSerializer.save() : timing 69 at [storeAll]
[2010-01-25 00:53:44,272] DEBUG - LockItem.unlock() : 10 current
[2010-01-25 00:53:44,272] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,272] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,272] DEBUG - UpdateThread.update() : total 321, complete 21
[2010-01-25 00:53:44,273] DEBUG - UpdateThread.update() : update 1277955, type class Levelthree
[2010-01-25 00:53:44,273] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,274] DEBUG - XmlSerializer.save() : timing 3 at [findupdate]
[2010-01-25 00:53:44,274] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736705]
[2010-01-25 00:53:44,274] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,274] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,276] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,276] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,276] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,276] DEBUG - UpdateThread.update() : total 321, complete 22
[2010-01-25 00:53:44,278] DEBUG - UpdateThread.update() : update 1277956, type class Levelthree
[2010-01-25 00:53:44,278] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,279] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,281] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,281] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,281] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,281] DEBUG - UpdateThread.update() : total 321, complete 23
[2010-01-25 00:53:44,281] DEBUG - UpdateThread.update() : update 1277957, type class Levelthree
[2010-01-25 00:53:44,282] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,284] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,287] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,287] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,287] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,287] DEBUG - UpdateThread.update() : total 321, complete 24
[2010-01-25 00:53:44,288] DEBUG - UpdateThread.update() : update 1343491, type class Levelone
[2010-01-25 00:53:44,288] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,290] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,291] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,291] DEBUG - UpdateCache.update() : update [class Address], id [1605634]
[2010-01-25 00:53:44,291] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:44,292] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,293] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,293] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,293] DEBUG - UpdateThread.update() : total 321, complete 25
[2010-01-25 00:53:44,293] DEBUG - UpdateThread.update() : update 1310725, type class Leveltwo
[2010-01-25 00:53:44,293] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,293] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-25 00:53:44,295] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,299] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,301] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,301] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,301] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,301] DEBUG - UpdateThread.update() : total 321, complete 26
[2010-01-25 00:53:44,301] DEBUG - UpdateThread.update() : update 1540096, type class BoolTest
[2010-01-25 00:53:44,317] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:53:44,319] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:44,319] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:44,319] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,319] DEBUG - XmlSerializer.save() : timing 26 at [save]
[2010-01-25 00:53:44,319] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:44,319] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:44,321] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,323] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:53:44,325] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,326] DEBUG - UpdateCache.remove() : size before 13
[2010-01-25 00:53:44,326] DEBUG - UpdateCache.remove() : size after 13
[2010-01-25 00:53:44,327] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,352] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,352] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,352] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,352] DEBUG - UpdateThread.update() : total 321, complete 27
[2010-01-25 00:53:44,352] DEBUG - UpdateThread.update() : update 1540096, type class BoolTest
[2010-01-25 00:53:44,353] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,359] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,361] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,361] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,361] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,361] DEBUG - UpdateThread.update() : total 321, complete 28
[2010-01-25 00:53:44,361] DEBUG - UpdateThread.update() : update 1540096, type class BoolTest
[2010-01-25 00:53:44,361] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,363] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,367] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:44,367] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,367] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,367] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,368] DEBUG - UpdateThread.update() : total 321, complete 29
[2010-01-25 00:53:44,368] DEBUG - UpdateThread.update() : update 1212417, type class AddressBook
[2010-01-25 00:53:44,378] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,381] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,387] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,402] DEBUG - XmlSerializer.save() : timing 35 at [extract]
[2010-01-25 00:53:44,402] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:44,402] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:44,403] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,403] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:44,404] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:44,404] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:44,405] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:44,406] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:44,406] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:44,406] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:44,406] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:44,407] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:44,407] DEBUG - XmlSerializer.save() : timing 5 at [storeAll]
[2010-01-25 00:53:44,409] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:53:44,409] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736706]
[2010-01-25 00:53:44,409] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,427] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,427] DEBUG - UpdateCache.update() : update [class Address], id [1605635]
[2010-01-25 00:53:44,427] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:44,432] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,432] DEBUG - UpdateCache.update() : update [class Statistics], id [1638402]
[2010-01-25 00:53:44,432] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:44,436] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,436] DEBUG - UpdateCache.update() : update [class Favorite], id [1671172]
[2010-01-25 00:53:44,436] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,438] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,438] DEBUG - UpdateCache.update() : update [class Favorite], id [1671173]
[2010-01-25 00:53:44,438] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,440] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,440] DEBUG - UpdateCache.update() : update [class Remover], id [1703938]
[2010-01-25 00:53:44,440] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:44,443] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,443] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736706]
[2010-01-25 00:53:44,443] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,453] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,453] DEBUG - UpdateCache.update() : update [class Address], id [1605635]
[2010-01-25 00:53:44,453] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:44,457] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,457] DEBUG - UpdateCache.update() : update [class Statistics], id [1638402]
[2010-01-25 00:53:44,457] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:44,459] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,459] DEBUG - UpdateCache.update() : update [class Favorite], id [1671172]
[2010-01-25 00:53:44,459] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,463] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,463] DEBUG - UpdateCache.update() : update [class Favorite], id [1671173]
[2010-01-25 00:53:44,463] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,464] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,464] DEBUG - UpdateCache.update() : update [class Remover], id [1703938]
[2010-01-25 00:53:44,464] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:44,466] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,466] DEBUG - XmlSerializer.save() : timing 57 at [cache]
[2010-01-25 00:53:44,467] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,469] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,494] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,494] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,515] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,515] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,515] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,515] DEBUG - UpdateThread.update() : total 321, complete 30
[2010-01-25 00:53:44,515] DEBUG - UpdateThread.update() : update 1081345, type class Address
[2010-01-25 00:53:44,516] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:44,518] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:44,518] DEBUG - XmlSerializer.save() : timing 52 at [save]
[2010-01-25 00:53:44,518] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:44,518] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:44,519] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,520] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:44,525] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,525] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,528] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,530] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,547] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,547] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,548] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,548] DEBUG - UpdateThread.update() : total 321, complete 31
[2010-01-25 00:53:44,550] DEBUG - UpdateThread.update() : update 1114113, type class Statistics
[2010-01-25 00:53:44,550] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:44,551] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,551] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:44,552] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,552] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,567] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,569] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,569] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,569] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,569] DEBUG - UpdateThread.update() : total 321, complete 32
[2010-01-25 00:53:44,569] DEBUG - UpdateThread.update() : update 1146882, type class Favorite
[2010-01-25 00:53:44,569] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,571] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,572] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,575] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,575] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,578] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:44,582] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,584] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,593] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,593] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,593] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,593] DEBUG - UpdateThread.update() : total 321, complete 33
[2010-01-25 00:53:44,593] DEBUG - UpdateThread.update() : update 1146883, type class Favorite
[2010-01-25 00:53:44,594] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,595] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,595] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,597] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,597] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,600] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,600] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,600] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,600] DEBUG - UpdateThread.update() : total 321, complete 34
[2010-01-25 00:53:44,601] DEBUG - UpdateThread.update() : update 1179649, type class Remover
[2010-01-25 00:53:44,602] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:44,603] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,605] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:44,617] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,617] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,631] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,631] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,631] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,632] DEBUG - UpdateThread.update() : total 321, complete 35
[2010-01-25 00:53:44,632] DEBUG - UpdateThread.update() : update 1212417, type class AddressBook
[2010-01-25 00:53:44,634] DEBUG - XmlSerializer.save() : timing 53 at [extract]
[2010-01-25 00:53:44,634] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:44,636] DEBUG - XmlSerializer.save() : timing 5 at [lock]
[2010-01-25 00:53:44,636] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,636] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,638] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,642] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,642] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,643] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,643] DEBUG - UpdateThread.update() : total 321, complete 36
[2010-01-25 00:53:44,643] DEBUG - UpdateThread.update() : update 1081345, type class Address
[2010-01-25 00:53:44,645] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,647] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,649] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,649] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,649] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,649] DEBUG - UpdateThread.update() : total 321, complete 37
[2010-01-25 00:53:44,649] DEBUG - UpdateThread.update() : update 1114113, type class Statistics
[2010-01-25 00:53:44,650] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,651] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,653] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,653] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,653] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,654] DEBUG - UpdateThread.update() : total 321, complete 38
[2010-01-25 00:53:44,654] DEBUG - UpdateThread.update() : update 1146882, type class Favorite
[2010-01-25 00:53:44,655] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,656] DEBUG - XmlCompare.next(): hit  <name>robs address book</name> vs.  <name>set another name</name>
[2010-01-25 00:53:44,657] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,659] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,659] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,659] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,659] DEBUG - UpdateThread.update() : total 321, complete 39
[2010-01-25 00:53:44,660] DEBUG - UpdateThread.update() : update 1146883, type class Favorite
[2010-01-25 00:53:44,661] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,662] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,664] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,664] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,664] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,664] DEBUG - UpdateThread.update() : total 321, complete 40
[2010-01-25 00:53:44,664] DEBUG - UpdateThread.update() : update 1179649, type class Remover
[2010-01-25 00:53:44,664] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,667] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,669] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,669] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,669] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,669] DEBUG - UpdateThread.update() : total 321, complete 41
[2010-01-25 00:53:44,669] DEBUG - UpdateThread.update() : update 1212417, type class AddressBook
[2010-01-25 00:53:44,670] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,672] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,675] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,675] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,675] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,675] DEBUG - UpdateThread.update() : total 321, complete 42
[2010-01-25 00:53:44,675] DEBUG - UpdateThread.update() : update 1081346, type class Address
[2010-01-25 00:53:44,676] DEBUG - XmlCompare.compare() : [[1736706:address-book]]
[2010-01-25 00:53:44,676] DEBUG - XmlSerializer.save() : timing 40 at [changed]
[2010-01-25 00:53:44,677] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [set another name], old [robs address book]
[2010-01-25 00:53:44,681] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:44,682] DEBUG - XmlSerializer().storeAll() : old [1605635]
[2010-01-25 00:53:44,682] DEBUG - XmlSerializer().storeAll() : new [1605635]
[2010-01-25 00:53:44,683] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,685] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:44,687] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,687] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,690] DEBUG - XmlSerializer().storeAll() : old [1671172, 1671173]
[2010-01-25 00:53:44,690] DEBUG - XmlSerializer().storeAll() : new [1671172, 1671173]
[2010-01-25 00:53:44,691] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1736706]
[2010-01-25 00:53:44,691] DEBUG - XmlSerializer.save() : timing 15 at [storeAll]
[2010-01-25 00:53:44,692] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:44,692] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,692] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:44,692] DEBUG - UpdateThread.update() : total 321, complete 43
[2010-01-25 00:53:44,692] DEBUG - UpdateThread.update() : update 1212418, type class AddressBook
[2010-01-25 00:53:44,693] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:53:44,693] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736706]
[2010-01-25 00:53:44,693] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,694] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,700] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:44,700] DEBUG - XmlSerializer.save() : timing 7 at [cache]
[2010-01-25 00:53:44,732] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:44,732] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:44,732] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,733] DEBUG - XmlSerializer.save() : timing 32 at [save]
[2010-01-25 00:53:44,733] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:44,733] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:53:44,736] DEBUG - Queries.load() :  load from stream [queries.xml]
[2010-01-25 00:53:44,750] DEBUG - Queries.load() :  loaded 9
[2010-01-25 00:53:44,761] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,765] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:53:44,770] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,793] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,793] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,797] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:44,797] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,797] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,797] DEBUG - UpdateThread.update() : total 321, complete 44
[2010-01-25 00:53:44,797] DEBUG - UpdateThread.update() : update 1081347, type class Address
[2010-01-25 00:53:44,810] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:44,812] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,813] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:44,815] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,816] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,836] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,836] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,836] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,836] DEBUG - UpdateThread.update() : total 321, complete 45
[2010-01-25 00:53:44,838] DEBUG - UpdateThread.update() : update 1114114, type class Statistics
[2010-01-25 00:53:44,838] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:44,839] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,840] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:44,841] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,841] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,844] DEBUG - XmlSerializer.sqlLoad() : timing 47 at [query]
[2010-01-25 00:53:44,855] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,855] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,855] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,855] DEBUG - UpdateThread.update() : total 321, complete 46
[2010-01-25 00:53:44,856] DEBUG - UpdateThread.update() : update 1146884, type class Favorite
[2010-01-25 00:53:44,856] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,857] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,858] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,860] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,860] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,862] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,862] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,862] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,862] DEBUG - UpdateThread.update() : total 321, complete 47
[2010-01-25 00:53:44,863] DEBUG - UpdateThread.update() : update 1146885, type class Favorite
[2010-01-25 00:53:44,863] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,866] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,867] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:44,868] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,868] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,868] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:44,870] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,871] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,871] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,871] DEBUG - UpdateThread.update() : total 321, complete 48
[2010-01-25 00:53:44,871] DEBUG - UpdateThread.update() : update 1179650, type class Remover
[2010-01-25 00:53:44,871] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:44,873] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,873] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:44,874] DEBUG - UpdateCache.remove() : size before 19
[2010-01-25 00:53:44,874] DEBUG - UpdateCache.remove() : size after 19
[2010-01-25 00:53:44,877] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,877] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,877] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,877] DEBUG - UpdateThread.update() : total 321, complete 49
[2010-01-25 00:53:44,877] DEBUG - UpdateThread.update() : update 1212418, type class AddressBook
[2010-01-25 00:53:44,879] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,882] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,885] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,885] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,885] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,885] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,885] DEBUG - UpdateThread.update() : total 321, complete 50
[2010-01-25 00:53:44,893] DEBUG - UpdateThread.update() : update 1081347, type class Address
[2010-01-25 00:53:44,894] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,896] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,898] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,898] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,898] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,898] DEBUG - UpdateThread.update() : total 321, complete 51
[2010-01-25 00:53:44,899] DEBUG - UpdateThread.update() : update 1114114, type class Statistics
[2010-01-25 00:53:44,899] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,901] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,903] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,903] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,903] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:44,903] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,903] DEBUG - UpdateThread.update() : total 321, complete 52
[2010-01-25 00:53:44,903] DEBUG - UpdateThread.update() : update 1146884, type class Favorite
[2010-01-25 00:53:44,904] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,905] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,908] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,908] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,908] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,908] DEBUG - UpdateThread.update() : total 321, complete 53
[2010-01-25 00:53:44,908] DEBUG - UpdateThread.update() : update 1146885, type class Favorite
[2010-01-25 00:53:44,908] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,910] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,912] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,912] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,912] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,912] DEBUG - UpdateThread.update() : total 321, complete 54
[2010-01-25 00:53:44,912] DEBUG - UpdateThread.update() : update 1179650, type class Remover
[2010-01-25 00:53:44,913] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,914] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,919] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,919] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,919] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,919] DEBUG - UpdateThread.update() : total 321, complete 55
[2010-01-25 00:53:44,924] DEBUG - UpdateThread.update() : update 1212418, type class AddressBook
[2010-01-25 00:53:44,925] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:44,927] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:44,929] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:44,929] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:44,929] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:44,929] DEBUG - UpdateThread.update() : total 321, complete 56
[2010-01-25 00:53:44,929] DEBUG - UpdateThread.update() : update 1212419, type class AddressBook
[2010-01-25 00:53:44,932] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:44,955] DEBUG - XmlSerializer.save() : timing 87 at [extract]
[2010-01-25 00:53:44,955] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:44,956] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-25 00:53:44,957] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,958] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,960] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,961] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,961] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,962] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,963] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,966] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,966] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,967] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,968] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,969] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,970] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,984] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:44,986] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:44,986] DEBUG - XmlSerializer().storeAll() : new [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
[2010-01-25 00:53:44,986] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:44,988] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:44,989] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:44,989] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:44,989] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:44,989] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:44,990] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:44,993] DEBUG - XmlSerializer.save() : timing 37 at [storeAll]
[2010-01-25 00:53:44,995] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:53:44,995] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736707]
[2010-01-25 00:53:44,997] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,048] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,048] DEBUG - UpdateCache.update() : update [class Address], id [1605636]
[2010-01-25 00:53:45,048] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,051] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,051] DEBUG - UpdateCache.update() : update [class Address], id [1605637]
[2010-01-25 00:53:45,051] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,053] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,053] DEBUG - UpdateCache.update() : update [class Address], id [1605638]
[2010-01-25 00:53:45,053] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,055] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,055] DEBUG - UpdateCache.update() : update [class Address], id [1605639]
[2010-01-25 00:53:45,055] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,057] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,057] DEBUG - UpdateCache.update() : update [class Address], id [1605640]
[2010-01-25 00:53:45,057] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,057] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,059] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,062] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,062] DEBUG - UpdateCache.update() : update [class Address], id [1605641]
[2010-01-25 00:53:45,062] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,065] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,065] DEBUG - UpdateCache.update() : update [class Address], id [1605642]
[2010-01-25 00:53:45,065] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,080] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,080] DEBUG - UpdateCache.update() : update [class Address], id [1605643]
[2010-01-25 00:53:45,080] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,089] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,089] DEBUG - UpdateCache.update() : update [class Address], id [1605644]
[2010-01-25 00:53:45,090] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,091] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,091] DEBUG - UpdateCache.update() : update [class Address], id [1605645]
[2010-01-25 00:53:45,091] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,097] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,097] DEBUG - UpdateCache.update() : update [class Address], id [1605646]
[2010-01-25 00:53:45,097] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,120] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,120] DEBUG - UpdateCache.update() : update [class Address], id [1605647]
[2010-01-25 00:53:45,120] DEBUG - UpdateCache.remove() : size before 31
[2010-01-25 00:53:45,120] DEBUG - UpdateCache.remove() : size after 31
[2010-01-25 00:53:45,120] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,123] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,123] DEBUG - UpdateCache.update() : update [class Address], id [1605648]
[2010-01-25 00:53:45,123] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,130] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,130] DEBUG - UpdateCache.update() : update [class Address], id [1605649]
[2010-01-25 00:53:45,130] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,131] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,131] DEBUG - UpdateCache.update() : update [class Statistics], id [1638403]
[2010-01-25 00:53:45,131] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,133] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,133] DEBUG - UpdateCache.update() : update [class Favorite], id [1671174]
[2010-01-25 00:53:45,133] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,134] DEBUG - LockItem.unlock() : 19 current
[2010-01-25 00:53:45,134] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,134] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,134] DEBUG - UpdateThread.update() : total 321, complete 57
[2010-01-25 00:53:45,134] DEBUG - UpdateThread.update() : update 1081348, type class Address
[2010-01-25 00:53:45,136] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,138] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,138] DEBUG - UpdateCache.update() : update [class Favorite], id [1671175]
[2010-01-25 00:53:45,138] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,139] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,139] DEBUG - UpdateCache.update() : update [class Remover], id [1703939]
[2010-01-25 00:53:45,139] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,139] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,142] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,142] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736707]
[2010-01-25 00:53:45,142] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,143] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,152] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,152] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,156] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,156] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,156] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,156] DEBUG - UpdateThread.update() : total 321, complete 58
[2010-01-25 00:53:45,156] DEBUG - UpdateThread.update() : update 1081349, type class Address
[2010-01-25 00:53:45,157] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,158] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,159] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,160] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,160] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,164] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,164] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,164] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,164] DEBUG - UpdateThread.update() : total 321, complete 59
[2010-01-25 00:53:45,164] DEBUG - UpdateThread.update() : update 1081350, type class Address
[2010-01-25 00:53:45,169] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,170] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,171] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,172] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,172] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,176] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,176] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,176] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,176] DEBUG - UpdateThread.update() : total 321, complete 60
[2010-01-25 00:53:45,176] DEBUG - UpdateThread.update() : update 1081351, type class Address
[2010-01-25 00:53:45,177] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,178] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,178] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,178] DEBUG - UpdateCache.update() : update [class Address], id [1605636]
[2010-01-25 00:53:45,178] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,179] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,180] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,180] DEBUG - UpdateCache.update() : update [class Address], id [1605637]
[2010-01-25 00:53:45,180] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,180] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,180] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,183] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,183] DEBUG - UpdateCache.update() : update [class Address], id [1605638]
[2010-01-25 00:53:45,183] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,185] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,185] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,185] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,185] DEBUG - UpdateThread.update() : total 321, complete 61
[2010-01-25 00:53:45,185] DEBUG - UpdateThread.update() : update 1081352, type class Address
[2010-01-25 00:53:45,185] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,185] DEBUG - UpdateCache.update() : update [class Address], id [1605639]
[2010-01-25 00:53:45,185] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,196] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,196] DEBUG - UpdateCache.update() : update [class Address], id [1605640]
[2010-01-25 00:53:45,196] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,197] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,197] DEBUG - UpdateCache.update() : update [class Address], id [1605641]
[2010-01-25 00:53:45,198] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,203] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,204] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,204] DEBUG - UpdateCache.update() : update [class Address], id [1605642]
[2010-01-25 00:53:45,205] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,207] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,207] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,209] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,209] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,212] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,212] DEBUG - UpdateCache.update() : update [class Address], id [1605643]
[2010-01-25 00:53:45,212] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,214] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,214] DEBUG - UpdateCache.update() : update [class Address], id [1605644]
[2010-01-25 00:53:45,214] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,216] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,217] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,217] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,217] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,217] DEBUG - UpdateThread.update() : total 321, complete 62
[2010-01-25 00:53:45,217] DEBUG - UpdateCache.update() : update [class Address], id [1605645]
[2010-01-25 00:53:45,217] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,219] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,219] DEBUG - UpdateCache.update() : update [class Address], id [1605646]
[2010-01-25 00:53:45,219] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,223] DEBUG - UpdateThread.update() : update 1081353, type class Address
[2010-01-25 00:53:45,224] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,226] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,226] DEBUG - UpdateCache.update() : update [class Address], id [1605647]
[2010-01-25 00:53:45,226] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,226] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,227] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,228] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,228] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,230] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,231] DEBUG - UpdateCache.update() : update [class Address], id [1605648]
[2010-01-25 00:53:45,231] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,232] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,232] DEBUG - UpdateCache.update() : update [class Address], id [1605649]
[2010-01-25 00:53:45,233] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,235] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,235] DEBUG - UpdateCache.update() : update [class Statistics], id [1638403]
[2010-01-25 00:53:45,236] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,236] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,236] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,236] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,236] DEBUG - UpdateThread.update() : total 321, complete 63
[2010-01-25 00:53:45,236] DEBUG - UpdateThread.update() : update 1081354, type class Address
[2010-01-25 00:53:45,237] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,237] DEBUG - UpdateCache.update() : update [class Favorite], id [1671174]
[2010-01-25 00:53:45,237] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,237] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,239] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,240] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,241] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,241] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,242] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,242] DEBUG - UpdateCache.update() : update [class Favorite], id [1671175]
[2010-01-25 00:53:45,242] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,243] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,243] DEBUG - UpdateCache.update() : update [class Remover], id [1703939]
[2010-01-25 00:53:45,244] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,245] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,245] DEBUG - XmlSerializer.save() : timing 250 at [cache]
[2010-01-25 00:53:45,247] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,247] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,247] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,247] DEBUG - UpdateThread.update() : total 321, complete 64
[2010-01-25 00:53:45,247] DEBUG - UpdateThread.update() : update 1081355, type class Address
[2010-01-25 00:53:45,254] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,256] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,257] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,258] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,259] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,266] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,267] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,267] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,267] DEBUG - UpdateThread.update() : total 321, complete 65
[2010-01-25 00:53:45,267] DEBUG - UpdateThread.update() : update 1081356, type class Address
[2010-01-25 00:53:45,268] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,270] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,271] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,273] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,273] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,276] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,276] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,276] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,276] DEBUG - UpdateThread.update() : total 321, complete 66
[2010-01-25 00:53:45,277] DEBUG - UpdateThread.update() : update 1081357, type class Address
[2010-01-25 00:53:45,278] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,280] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,290] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,291] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,291] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,295] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,295] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,295] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,295] DEBUG - UpdateThread.update() : total 321, complete 67
[2010-01-25 00:53:45,295] DEBUG - UpdateThread.update() : update 1081358, type class Address
[2010-01-25 00:53:45,296] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,298] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,298] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,300] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,300] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,304] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,304] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,304] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,304] DEBUG - UpdateThread.update() : total 321, complete 68
[2010-01-25 00:53:45,304] DEBUG - UpdateThread.update() : update 1081359, type class Address
[2010-01-25 00:53:45,306] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,308] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,309] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,315] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,315] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,318] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,318] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,318] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,318] DEBUG - UpdateThread.update() : total 321, complete 69
[2010-01-25 00:53:45,319] DEBUG - UpdateThread.update() : update 1081360, type class Address
[2010-01-25 00:53:45,320] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,321] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,322] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,324] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,324] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,331] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,331] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,331] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,331] DEBUG - UpdateThread.update() : total 321, complete 70
[2010-01-25 00:53:45,331] DEBUG - UpdateThread.update() : update 1081361, type class Address
[2010-01-25 00:53:45,332] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,334] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,334] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,336] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,336] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,338] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,338] DEBUG - XmlSerializer.save() : timing 93 at [save]
[2010-01-25 00:53:45,338] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:45,338] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:45,339] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,339] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,339] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,339] DEBUG - UpdateThread.update() : total 321, complete 71
[2010-01-25 00:53:45,339] DEBUG - UpdateThread.update() : update 1114115, type class Statistics
[2010-01-25 00:53:45,340] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,341] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,341] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,342] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,342] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,344] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,344] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,344] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,344] DEBUG - UpdateThread.update() : total 321, complete 72
[2010-01-25 00:53:45,345] DEBUG - UpdateThread.update() : update 1146886, type class Favorite
[2010-01-25 00:53:45,345] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,346] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,346] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,348] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,349] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,352] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,352] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,352] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,352] DEBUG - UpdateThread.update() : total 321, complete 73
[2010-01-25 00:53:45,352] DEBUG - UpdateThread.update() : update 1146887, type class Favorite
[2010-01-25 00:53:45,353] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,359] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:45,359] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,360] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,361] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,361] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,361] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:45,363] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,364] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,364] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,364] DEBUG - UpdateThread.update() : total 321, complete 74
[2010-01-25 00:53:45,364] DEBUG - UpdateThread.update() : update 1179651, type class Remover
[2010-01-25 00:53:45,364] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,365] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,366] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,366] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,367] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,369] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,369] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,369] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,369] DEBUG - UpdateThread.update() : total 321, complete 75
[2010-01-25 00:53:45,369] DEBUG - UpdateThread.update() : update 1212419, type class AddressBook
[2010-01-25 00:53:45,370] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,371] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,373] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,373] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,373] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,373] DEBUG - UpdateThread.update() : total 321, complete 76
[2010-01-25 00:53:45,374] DEBUG - UpdateThread.update() : update 1081348, type class Address
[2010-01-25 00:53:45,374] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,375] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,378] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,378] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,378] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,378] DEBUG - UpdateThread.update() : total 321, complete 77
[2010-01-25 00:53:45,379] DEBUG - UpdateThread.update() : update 1081349, type class Address
[2010-01-25 00:53:45,379] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,380] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,384] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,384] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,384] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,384] DEBUG - UpdateThread.update() : total 321, complete 78
[2010-01-25 00:53:45,384] DEBUG - UpdateThread.update() : update 1081350, type class Address
[2010-01-25 00:53:45,385] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,386] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,388] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,388] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,388] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,388] DEBUG - UpdateThread.update() : total 321, complete 79
[2010-01-25 00:53:45,388] DEBUG - UpdateThread.update() : update 1081351, type class Address
[2010-01-25 00:53:45,389] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,390] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,392] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,393] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,393] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,393] DEBUG - UpdateThread.update() : total 321, complete 80
[2010-01-25 00:53:45,393] DEBUG - UpdateThread.update() : update 1081352, type class Address
[2010-01-25 00:53:45,394] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,395] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,398] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,398] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,398] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,398] DEBUG - UpdateThread.update() : total 321, complete 81
[2010-01-25 00:53:45,398] DEBUG - UpdateThread.update() : update 1081353, type class Address
[2010-01-25 00:53:45,399] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,400] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,402] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,402] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,402] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,403] DEBUG - UpdateThread.update() : total 321, complete 82
[2010-01-25 00:53:45,403] DEBUG - UpdateThread.update() : update 1081354, type class Address
[2010-01-25 00:53:45,405] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,406] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,407] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,408] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,408] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,408] DEBUG - UpdateThread.update() : total 321, complete 83
[2010-01-25 00:53:45,408] DEBUG - UpdateThread.update() : update 1081355, type class Address
[2010-01-25 00:53:45,408] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,409] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,414] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,414] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,414] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,414] DEBUG - UpdateThread.update() : total 321, complete 84
[2010-01-25 00:53:45,415] DEBUG - UpdateThread.update() : update 1081356, type class Address
[2010-01-25 00:53:45,416] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,417] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,419] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,419] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,419] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,419] DEBUG - UpdateThread.update() : total 321, complete 85
[2010-01-25 00:53:45,419] DEBUG - UpdateThread.update() : update 1081357, type class Address
[2010-01-25 00:53:45,421] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,422] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,424] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,424] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,424] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,424] DEBUG - UpdateThread.update() : total 321, complete 86
[2010-01-25 00:53:45,424] DEBUG - UpdateThread.update() : update 1081358, type class Address
[2010-01-25 00:53:45,425] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,428] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,431] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,431] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,431] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,431] DEBUG - UpdateThread.update() : total 321, complete 87
[2010-01-25 00:53:45,431] DEBUG - UpdateThread.update() : update 1081359, type class Address
[2010-01-25 00:53:45,431] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,432] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,433] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,434] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,434] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,434] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,434] DEBUG - UpdateThread.update() : total 321, complete 88
[2010-01-25 00:53:45,435] DEBUG - UpdateThread.update() : update 1081360, type class Address
[2010-01-25 00:53:45,435] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,436] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,438] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,438] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,438] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,438] DEBUG - UpdateThread.update() : total 321, complete 89
[2010-01-25 00:53:45,439] DEBUG - UpdateThread.update() : update 1081361, type class Address
[2010-01-25 00:53:45,439] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,440] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,443] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,443] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,443] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,443] DEBUG - UpdateThread.update() : total 321, complete 90
[2010-01-25 00:53:45,443] DEBUG - UpdateThread.update() : update 1114115, type class Statistics
[2010-01-25 00:53:45,444] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,445] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,447] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,447] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,447] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,447] DEBUG - UpdateThread.update() : total 321, complete 91
[2010-01-25 00:53:45,447] DEBUG - UpdateThread.update() : update 1146886, type class Favorite
[2010-01-25 00:53:45,447] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,449] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,450] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,450] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,450] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,450] DEBUG - UpdateThread.update() : total 321, complete 92
[2010-01-25 00:53:45,451] DEBUG - UpdateThread.update() : update 1146887, type class Favorite
[2010-01-25 00:53:45,451] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,452] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,453] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:45,454] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,454] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,454] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,454] DEBUG - UpdateThread.update() : total 321, complete 93
[2010-01-25 00:53:45,454] DEBUG - UpdateThread.update() : update 1179651, type class Remover
[2010-01-25 00:53:45,456] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,457] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,459] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,459] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,459] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,459] DEBUG - UpdateThread.update() : total 321, complete 94
[2010-01-25 00:53:45,459] DEBUG - UpdateThread.update() : update 1212419, type class AddressBook
[2010-01-25 00:53:45,460] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:45,460] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,461] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,463] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:45,465] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,465] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,465] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,465] DEBUG - UpdateThread.update() : total 321, complete 95
[2010-01-25 00:53:45,465] DEBUG - UpdateThread.update() : update 1081348, type class Address
[2010-01-25 00:53:45,466] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,467] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,469] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,469] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,469] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,469] DEBUG - UpdateThread.update() : total 321, complete 96
[2010-01-25 00:53:45,470] DEBUG - UpdateThread.update() : update 1212419, type class AddressBook
[2010-01-25 00:53:45,471] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,475] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,477] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,478] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,478] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,478] DEBUG - UpdateThread.update() : total 321, complete 97
[2010-01-25 00:53:45,478] DEBUG - UpdateThread.update() : update 1081348, type class Address
[2010-01-25 00:53:45,479] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,480] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,482] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,482] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,482] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,482] DEBUG - UpdateThread.update() : total 321, complete 98
[2010-01-25 00:53:45,483] DEBUG - UpdateThread.update() : update 1212419, type class AddressBook
[2010-01-25 00:53:45,484] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,485] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,487] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,487] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,487] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,487] DEBUG - UpdateThread.update() : total 321, complete 99
[2010-01-25 00:53:45,487] DEBUG - UpdateThread.update() : update 1081348, type class Address
[2010-01-25 00:53:45,488] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,489] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,491] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,491] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,491] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,491] DEBUG - UpdateThread.update() : total 321, complete 100
[2010-01-25 00:53:45,492] DEBUG - UpdateThread.update() : update 1212420, type class AddressBook
[2010-01-25 00:53:45,494] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,510] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,512] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,522] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,522] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,527] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:45,527] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,528] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,528] DEBUG - UpdateThread.update() : total 321, complete 101
[2010-01-25 00:53:45,528] DEBUG - UpdateThread.update() : update 1081362, type class Address
[2010-01-25 00:53:45,528] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,530] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,531] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,532] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,532] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,537] DEBUG - XmlSerializer.save() : timing 84 at [extract]
[2010-01-25 00:53:45,537] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:45,537] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,537] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,537] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,537] DEBUG - UpdateThread.update() : total 321, complete 102
[2010-01-25 00:53:45,538] DEBUG - UpdateThread.update() : update 1114116, type class Statistics
[2010-01-25 00:53:45,538] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,542] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,543] DEBUG - XmlSerializer.save() : timing 6 at [lock]
[2010-01-25 00:53:45,543] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,543] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,543] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,543] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,546] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,546] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,546] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,546] DEBUG - UpdateThread.update() : total 321, complete 103
[2010-01-25 00:53:45,546] DEBUG - UpdateThread.update() : update 1146888, type class Favorite
[2010-01-25 00:53:45,546] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,547] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,548] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,548] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,548] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,551] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,551] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,551] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,551] DEBUG - UpdateThread.update() : total 321, complete 104
[2010-01-25 00:53:45,551] DEBUG - UpdateThread.update() : update 1146889, type class Favorite
[2010-01-25 00:53:45,552] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,552] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,553] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,553] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,553] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,556] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,556] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,556] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,556] DEBUG - UpdateThread.update() : total 321, complete 105
[2010-01-25 00:53:45,556] DEBUG - UpdateThread.update() : update 1179652, type class Remover
[2010-01-25 00:53:45,556] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,557] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,558] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,558] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,558] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,560] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,561] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,561] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,563] DEBUG - UpdateThread.update() : total 321, complete 106
[2010-01-25 00:53:45,564] DEBUG - UpdateThread.update() : update 1212420, type class AddressBook
[2010-01-25 00:53:45,564] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,565] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,567] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,567] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,567] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,567] DEBUG - UpdateThread.update() : total 321, complete 107
[2010-01-25 00:53:45,568] DEBUG - UpdateThread.update() : update 1081362, type class Address
[2010-01-25 00:53:45,568] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,569] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,570] DEBUG - XmlCompare.next(): hit  <name>robs address book</name> vs.  <name>robs address book1</name>
[2010-01-25 00:53:45,571] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,571] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,571] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,571] DEBUG - UpdateThread.update() : total 321, complete 108
[2010-01-25 00:53:45,572] DEBUG - UpdateThread.update() : update 1114116, type class Statistics
[2010-01-25 00:53:45,572] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,572] DEBUG - XmlCompare.next(): hit   <street>1382 5th Ave</street> vs.   <street>1</street>
[2010-01-25 00:53:45,572] DEBUG - XmlCompare.next(): hit   <street>Apt. 2</street> vs.   <city>San Francisco</city>
[2010-01-25 00:53:45,573] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,573] DEBUG - XmlCompare.next(): hit   <street>Bldg. 14</street> vs.   <state>CA</state>
[2010-01-25 00:53:45,573] DEBUG - XmlCompare.next(): hit   <street>Station. 12</street> vs.   <zip-code>94122</zip-code>
[2010-01-25 00:53:45,574] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <region>USA</region>
[2010-01-25 00:53:45,574] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <region>North America</region>
[2010-01-25 00:53:45,574] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.  </address>
[2010-01-25 00:53:45,575] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,575] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,575] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,575] DEBUG - UpdateThread.update() : total 321, complete 109
[2010-01-25 00:53:45,575] DEBUG - UpdateThread.update() : update 1146888, type class Favorite
[2010-01-25 00:53:45,575] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,575] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.  <address id="1605636" type="home">
[2010-01-25 00:53:45,576] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,576] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <street>1</street>
[2010-01-25 00:53:45,577] DEBUG - XmlCompare.next(): hit  </address> vs.   <city>San Francisco</city>
[2010-01-25 00:53:45,579] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,579] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,579] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,579] DEBUG - UpdateThread.update() : total 321, complete 110
[2010-01-25 00:53:45,579] DEBUG - UpdateThread.update() : update 1146889, type class Favorite
[2010-01-25 00:53:45,579] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,580] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,583] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,583] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,583] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,583] DEBUG - UpdateThread.update() : total 321, complete 111
[2010-01-25 00:53:45,583] DEBUG - UpdateThread.update() : update 1179652, type class Remover
[2010-01-25 00:53:45,583] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,588] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,590] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,590] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,590] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,590] DEBUG - UpdateThread.update() : total 321, complete 112
[2010-01-25 00:53:45,590] DEBUG - UpdateThread.update() : update 1212420, type class AddressBook
[2010-01-25 00:53:45,596] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,598] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,599] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,600] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,600] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,600] DEBUG - UpdateThread.update() : total 321, complete 113
[2010-01-25 00:53:45,600] DEBUG - UpdateThread.update() : update 1114116, type class Statistics
[2010-01-25 00:53:45,600] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,602] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,606] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,606] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,606] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,606] DEBUG - UpdateThread.update() : total 321, complete 114
[2010-01-25 00:53:45,606] DEBUG - UpdateThread.update() : update 1212421, type class AddressBook
[2010-01-25 00:53:45,608] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,620] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,621] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,629] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,629] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,633] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:53:45,633] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,633] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,633] DEBUG - UpdateThread.update() : total 321, complete 115
[2010-01-25 00:53:45,633] DEBUG - UpdateThread.update() : update 1081363, type class Address
[2010-01-25 00:53:45,641] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,643] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,643] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,645] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,645] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,650] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,650] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,650] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,650] DEBUG - UpdateThread.update() : total 321, complete 116
[2010-01-25 00:53:45,651] DEBUG - UpdateThread.update() : update 1114117, type class Statistics
[2010-01-25 00:53:45,651] DEBUG - XmlCompare.compare() : [[1736707:address-book, 1605636:address]]
[2010-01-25 00:53:45,651] DEBUG - XmlSerializer.save() : timing 108 at [changed]
[2010-01-25 00:53:45,651] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,651] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book1], old [robs address book]
[2010-01-25 00:53:45,652] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,652] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,653] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,653] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,655] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,655] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,655] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,656] DEBUG - UpdateThread.update() : total 321, complete 117
[2010-01-25 00:53:45,656] DEBUG - UpdateThread.update() : update 1146890, type class Favorite
[2010-01-25 00:53:45,656] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1]], old [[Station. 12, Bldg. 14, Apt. 2, 1382 5th Ave]]
[2010-01-25 00:53:45,657] DEBUG - XmlSerializer().storeAll() :  save [Address], id [1605636]
[2010-01-25 00:53:45,658] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,659] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,659] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,660] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,660] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,662] DEBUG - XmlSerializer().storeAll() : old [1605636, 1605637, 1605638, 1605639, 1605640, 1605641, 1605642, 1605643, 1605644, 1605645, 1605646, 1605647, 1605648, 1605649]
[2010-01-25 00:53:45,662] DEBUG - XmlSerializer().storeAll() : new [1605636, 1605637, 1605638, 1605639, 1605640, 1605641, 1605642, 1605643, 1605644, 1605645, 1605646, 1605647, 1605648, 1605649]
[2010-01-25 00:53:45,663] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,663] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,663] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,663] DEBUG - UpdateThread.update() : total 321, complete 118
[2010-01-25 00:53:45,663] DEBUG - UpdateThread.update() : update 1146891, type class Favorite
[2010-01-25 00:53:45,663] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,664] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,664] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,667] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,667] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,668] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 1605636, Address : 1605637, Address : 1605638, Address : 1605639, Address : 1605640, Address : 1605641, Address : 1605642, Address : 1605643, Address : 1605644, Address : 1605645, Address : 1605646, Address : 1605647, Address : 1605648, Address : 1605649]], old [[Address : 1605636, Address : 1605637, Address : 1605638, Address : 1605639, Address : 1605640, Address : 1605641, Address : 1605642, Address : 1605643, Address : 1605644, Address : 1605645, Address : 1605646, Address : 1605647, Address : 1605648, Address : 1605649]]
[2010-01-25 00:53:45,669] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,669] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,669] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,670] DEBUG - UpdateThread.update() : total 321, complete 119
[2010-01-25 00:53:45,670] DEBUG - UpdateThread.update() : update 1179653, type class Remover
[2010-01-25 00:53:45,670] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,671] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,671] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,672] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,672] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,672] DEBUG - XmlSerializer().storeAll() : old [1671174, 1671175]
[2010-01-25 00:53:45,672] DEBUG - XmlSerializer().storeAll() : new [1671174, 1671175]
[2010-01-25 00:53:45,673] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1736707]
[2010-01-25 00:53:45,673] DEBUG - XmlSerializer.save() : timing 22 at [storeAll]
[2010-01-25 00:53:45,674] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,674] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,674] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,674] DEBUG - UpdateThread.update() : total 321, complete 120
[2010-01-25 00:53:45,675] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:53:45,675] DEBUG - UpdateThread.update() : update 1212421, type class AddressBook
[2010-01-25 00:53:45,675] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736707]
[2010-01-25 00:53:45,675] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,675] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,676] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,678] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,678] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,679] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,679] DEBUG - UpdateThread.update() : total 321, complete 121
[2010-01-25 00:53:45,679] DEBUG - UpdateThread.update() : update 1081363, type class Address
[2010-01-25 00:53:45,679] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,680] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,682] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,682] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,682] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,682] DEBUG - UpdateThread.update() : total 321, complete 122
[2010-01-25 00:53:45,682] DEBUG - UpdateThread.update() : update 1114117, type class Statistics
[2010-01-25 00:53:45,683] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,684] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,687] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,687] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,687] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,687] DEBUG - UpdateThread.update() : total 321, complete 123
[2010-01-25 00:53:45,687] DEBUG - UpdateThread.update() : update 1146890, type class Favorite
[2010-01-25 00:53:45,688] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,689] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,692] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,692] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,692] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,692] DEBUG - UpdateThread.update() : total 321, complete 124
[2010-01-25 00:53:45,692] DEBUG - UpdateThread.update() : update 1146891, type class Favorite
[2010-01-25 00:53:45,693] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,694] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,694] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,694] DEBUG - UpdateCache.update() : update [class Address], id [1605636]
[2010-01-25 00:53:45,694] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,695] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,696] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,696] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,696] DEBUG - UpdateThread.update() : total 321, complete 125
[2010-01-25 00:53:45,696] DEBUG - UpdateThread.update() : update 1179653, type class Remover
[2010-01-25 00:53:45,696] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,696] DEBUG - XmlSerializer.save() : timing 21 at [cache]
[2010-01-25 00:53:45,696] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,700] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,702] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,702] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,702] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,702] DEBUG - UpdateThread.update() : total 321, complete 126
[2010-01-25 00:53:45,702] DEBUG - UpdateThread.update() : update 1146890, type class Favorite
[2010-01-25 00:53:45,702] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,703] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,705] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,705] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,705] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,705] DEBUG - UpdateThread.update() : total 321, complete 127
[2010-01-25 00:53:45,705] DEBUG - UpdateThread.update() : update 1212421, type class AddressBook
[2010-01-25 00:53:45,706] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,707] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,709] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,709] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,709] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,709] DEBUG - UpdateThread.update() : total 321, complete 128
[2010-01-25 00:53:45,709] DEBUG - UpdateThread.update() : update 1212422, type class AddressBook
[2010-01-25 00:53:45,711] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,721] DEBUG - LockItem.unlock() : 19 current
[2010-01-25 00:53:45,721] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:45,721] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,721] DEBUG - XmlSerializer.save() : timing 25 at [save]
[2010-01-25 00:53:45,721] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:45,721] DEBUG - testUpdateTiming() : timing 290 at [save1]
[2010-01-25 00:53:45,721] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,730] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,732] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,738] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,738] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,740] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:45,741] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:45,741] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,741] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,741] DEBUG - UpdateThread.update() : total 321, complete 129
[2010-01-25 00:53:45,741] DEBUG - UpdateThread.update() : update 1081364, type class Address
[2010-01-25 00:53:45,742] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,744] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,744] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:45,744] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,746] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,746] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,746] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:45,752] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,752] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,752] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,752] DEBUG - UpdateThread.update() : total 321, complete 130
[2010-01-25 00:53:45,752] DEBUG - UpdateThread.update() : update 1114118, type class Statistics
[2010-01-25 00:53:45,753] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,754] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,754] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,755] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,755] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,757] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,757] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,757] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,757] DEBUG - UpdateThread.update() : total 321, complete 131
[2010-01-25 00:53:45,757] DEBUG - UpdateThread.update() : update 1146892, type class Favorite
[2010-01-25 00:53:45,758] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,759] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,759] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,761] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,761] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,763] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,763] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,763] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,763] DEBUG - UpdateThread.update() : total 321, complete 132
[2010-01-25 00:53:45,764] DEBUG - UpdateThread.update() : update 1146893, type class Favorite
[2010-01-25 00:53:45,764] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,765] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,765] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,766] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,766] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,769] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,769] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,769] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,769] DEBUG - UpdateThread.update() : total 321, complete 133
[2010-01-25 00:53:45,769] DEBUG - UpdateThread.update() : update 1179654, type class Remover
[2010-01-25 00:53:45,769] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,770] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,770] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,771] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,771] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,774] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,774] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,774] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,776] DEBUG - UpdateThread.update() : total 321, complete 134
[2010-01-25 00:53:45,776] DEBUG - UpdateThread.update() : update 1212422, type class AddressBook
[2010-01-25 00:53:45,777] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,778] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,780] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,780] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,780] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,780] DEBUG - UpdateThread.update() : total 321, complete 135
[2010-01-25 00:53:45,780] DEBUG - UpdateThread.update() : update 1081364, type class Address
[2010-01-25 00:53:45,782] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,783] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,784] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,785] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,785] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,785] DEBUG - UpdateThread.update() : total 321, complete 136
[2010-01-25 00:53:45,785] DEBUG - UpdateThread.update() : update 1114118, type class Statistics
[2010-01-25 00:53:45,785] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,786] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,788] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,788] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,788] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,788] DEBUG - UpdateThread.update() : total 321, complete 137
[2010-01-25 00:53:45,788] DEBUG - UpdateThread.update() : update 1146892, type class Favorite
[2010-01-25 00:53:45,789] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,790] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,791] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,791] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,795] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,795] DEBUG - UpdateThread.update() : total 321, complete 138
[2010-01-25 00:53:45,795] DEBUG - UpdateThread.update() : update 1146893, type class Favorite
[2010-01-25 00:53:45,796] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,797] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,799] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,800] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,800] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,800] DEBUG - UpdateThread.update() : total 321, complete 139
[2010-01-25 00:53:45,800] DEBUG - UpdateThread.update() : update 1179654, type class Remover
[2010-01-25 00:53:45,800] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,801] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,802] DEBUG - XmlSerializer.save() : timing 62 at [extract]
[2010-01-25 00:53:45,802] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:45,803] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,803] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,803] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,803] DEBUG - UpdateThread.update() : total 321, complete 140
[2010-01-25 00:53:45,803] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:53:45,803] DEBUG - UpdateThread.update() : update 1212422, type class AddressBook
[2010-01-25 00:53:45,803] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,803] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,805] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,807] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,807] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,807] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,807] DEBUG - UpdateThread.update() : total 321, complete 141
[2010-01-25 00:53:45,807] DEBUG - UpdateThread.update() : update 1114118, type class Statistics
[2010-01-25 00:53:45,807] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,808] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,810] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,810] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,810] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,810] DEBUG - UpdateThread.update() : total 321, complete 142
[2010-01-25 00:53:45,810] DEBUG - UpdateThread.update() : update 1343488, type class Levelone
[2010-01-25 00:53:45,812] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:45,822] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,823] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:45,825] DEBUG - XmlCompare.next(): hit  <name>robs address book1</name> vs.  <name>robs address book11</name>
[2010-01-25 00:53:45,826] DEBUG - XmlCompare.next(): hit   <street>1</street> vs.   <street>2</street>
[2010-01-25 00:53:45,826] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <street>1</street>
[2010-01-25 00:53:45,827] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <city>San Francisco</city>
[2010-01-25 00:53:45,827] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.   <state>CA</state>
[2010-01-25 00:53:45,828] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.   <zip-code>94122</zip-code>
[2010-01-25 00:53:45,828] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <region>USA</region>
[2010-01-25 00:53:45,828] DEBUG - XmlCompare.next(): hit  </address> vs.   <region>North America</region>
[2010-01-25 00:53:45,830] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,830] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,835] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:53:45,835] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,835] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,835] DEBUG - UpdateThread.update() : total 321, complete 143
[2010-01-25 00:53:45,835] DEBUG - UpdateThread.update() : update 1310720, type class Leveltwo
[2010-01-25 00:53:45,836] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:45,839] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,839] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:45,846] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,846] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,848] DEBUG - LockItem.unlock() : 22 current
[2010-01-25 00:53:45,848] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,848] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,848] DEBUG - UpdateThread.update() : total 321, complete 144
[2010-01-25 00:53:45,848] DEBUG - UpdateThread.update() : update 1277952, type class Levelthree
[2010-01-25 00:53:45,849] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:45,849] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,850] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:45,850] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,850] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,853] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,854] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,854] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,854] DEBUG - UpdateThread.update() : total 321, complete 145
[2010-01-25 00:53:45,854] DEBUG - UpdateThread.update() : update 1277953, type class Levelthree
[2010-01-25 00:53:45,854] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:45,855] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,855] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:45,856] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,856] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,858] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,858] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,858] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,858] DEBUG - UpdateThread.update() : total 321, complete 146
[2010-01-25 00:53:45,859] DEBUG - UpdateThread.update() : update 1310721, type class Leveltwo
[2010-01-25 00:53:45,859] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:45,861] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,862] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:45,863] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,863] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,866] DEBUG - LockItem.unlock() : 21 current
[2010-01-25 00:53:45,866] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,866] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,866] DEBUG - UpdateThread.update() : total 321, complete 147
[2010-01-25 00:53:45,866] DEBUG - UpdateThread.update() : update 1277954, type class Levelthree
[2010-01-25 00:53:45,866] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:45,867] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,867] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:45,868] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,868] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,868] DEBUG - XmlCompare.compare() : [[1736707:address-book, 1605636:address]]
[2010-01-25 00:53:45,869] DEBUG - XmlSerializer.save() : timing 65 at [changed]
[2010-01-25 00:53:45,869] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book11], old [robs address book1]
[2010-01-25 00:53:45,871] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,871] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,871] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,871] DEBUG - UpdateThread.update() : total 321, complete 148
[2010-01-25 00:53:45,872] DEBUG - UpdateThread.update() : update 1343488, type class Levelone
[2010-01-25 00:53:45,872] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1, 2]], old [[1]]
[2010-01-25 00:53:45,873] DEBUG - XmlSerializer().storeAll() :  save [Address], id [1605636]
[2010-01-25 00:53:45,874] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,875] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,876] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,876] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,876] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,876] DEBUG - UpdateThread.update() : total 321, complete 149
[2010-01-25 00:53:45,877] DEBUG - UpdateThread.update() : update 1310720, type class Leveltwo
[2010-01-25 00:53:45,877] DEBUG - XmlSerializer().storeAll() : old [1605636, 1605637, 1605638, 1605639, 1605640, 1605641, 1605642, 1605643, 1605644, 1605645, 1605646, 1605647, 1605648, 1605649]
[2010-01-25 00:53:45,877] DEBUG - XmlSerializer().storeAll() : new [1605636, 1605637, 1605638, 1605639, 1605640, 1605641, 1605642, 1605643, 1605644, 1605645, 1605646, 1605647, 1605648, 1605649]
[2010-01-25 00:53:45,877] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,881] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,883] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,883] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,883] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,883] DEBUG - UpdateThread.update() : total 321, complete 150
[2010-01-25 00:53:45,883] DEBUG - UpdateThread.update() : update 1277952, type class Levelthree
[2010-01-25 00:53:45,883] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,884] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,886] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,886] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,886] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,886] DEBUG - UpdateThread.update() : total 321, complete 151
[2010-01-25 00:53:45,886] DEBUG - UpdateThread.update() : update 1277953, type class Levelthree
[2010-01-25 00:53:45,886] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,886] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 1605636, Address : 1605637, Address : 1605638, Address : 1605639, Address : 1605640, Address : 1605641, Address : 1605642, Address : 1605643, Address : 1605644, Address : 1605645, Address : 1605646, Address : 1605647, Address : 1605648, Address : 1605649]], old [[Address : 1605636, Address : 1605637, Address : 1605638, Address : 1605639, Address : 1605640, Address : 1605641, Address : 1605642, Address : 1605643, Address : 1605644, Address : 1605645, Address : 1605646, Address : 1605647, Address : 1605648, Address : 1605649]]
[2010-01-25 00:53:45,887] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,889] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,889] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,889] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,889] DEBUG - UpdateThread.update() : total 321, complete 152
[2010-01-25 00:53:45,889] DEBUG - UpdateThread.update() : update 1310721, type class Leveltwo
[2010-01-25 00:53:45,889] DEBUG - XmlSerializer().storeAll() : old [1671174, 1671175]
[2010-01-25 00:53:45,889] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,889] DEBUG - XmlSerializer().storeAll() : new [1671174, 1671175]
[2010-01-25 00:53:45,890] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,891] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1736707]
[2010-01-25 00:53:45,891] DEBUG - XmlSerializer.save() : timing 23 at [storeAll]
[2010-01-25 00:53:45,892] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,892] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,892] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,892] DEBUG - UpdateThread.update() : total 321, complete 153
[2010-01-25 00:53:45,892] DEBUG - UpdateThread.update() : update 1277954, type class Levelthree
[2010-01-25 00:53:45,893] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,893] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:53:45,893] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736707]
[2010-01-25 00:53:45,893] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,894] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,896] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,896] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,896] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,896] DEBUG - UpdateThread.update() : total 321, complete 154
[2010-01-25 00:53:45,897] DEBUG - UpdateThread.update() : update 1277952, type class Levelthree
[2010-01-25 00:53:45,897] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,898] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,900] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,900] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,900] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,900] DEBUG - UpdateThread.update() : total 321, complete 155
[2010-01-25 00:53:45,900] DEBUG - UpdateThread.update() : update 1343488, type class Levelone
[2010-01-25 00:53:45,901] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,909] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,910] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,910] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,910] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,910] DEBUG - UpdateThread.update() : total 321, complete 156
[2010-01-25 00:53:45,911] DEBUG - UpdateThread.update() : update 1310720, type class Leveltwo
[2010-01-25 00:53:45,911] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,912] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,914] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:45,914] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,914] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:45,914] DEBUG - UpdateThread.update() : total 321, complete 157
[2010-01-25 00:53:45,914] DEBUG - UpdateThread.update() : update 1212423, type class AddressBook
[2010-01-25 00:53:45,915] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,921] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,921] DEBUG - UpdateCache.update() : update [class Address], id [1605636]
[2010-01-25 00:53:45,921] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,922] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:45,922] DEBUG - XmlSerializer.save() : timing 29 at [cache]
[2010-01-25 00:53:45,927] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,928] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,931] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:53:45,931] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:45,931] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:45,931] DEBUG - XmlSerializer.save() : timing 9 at [save]
[2010-01-25 00:53:45,931] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:45,931] DEBUG - testUpdateTiming() : timing 210 at [save2]
[2010-01-25 00:53:45,931] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:45,936] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,937] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,943] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:45,943] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,943] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,943] DEBUG - UpdateThread.update() : total 321, complete 158
[2010-01-25 00:53:45,943] DEBUG - UpdateThread.update() : update 1081365, type class Address
[2010-01-25 00:53:45,945] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,946] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,947] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:45,949] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,949] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,952] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,952] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,952] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,952] DEBUG - UpdateThread.update() : total 321, complete 159
[2010-01-25 00:53:45,953] DEBUG - UpdateThread.update() : update 1114119, type class Statistics
[2010-01-25 00:53:45,953] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,954] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,954] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:45,954] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,954] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,956] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:45,957] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,957] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,957] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,957] DEBUG - UpdateThread.update() : total 321, complete 160
[2010-01-25 00:53:45,957] DEBUG - UpdateThread.update() : update 1146894, type class Favorite
[2010-01-25 00:53:45,957] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,958] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,959] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,960] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,960] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:45,960] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,962] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:45,965] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,965] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,965] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,965] DEBUG - UpdateThread.update() : total 321, complete 161
[2010-01-25 00:53:45,965] DEBUG - UpdateThread.update() : update 1146895, type class Favorite
[2010-01-25 00:53:45,965] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,967] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,967] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:45,968] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,968] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,972] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,972] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,972] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,972] DEBUG - UpdateThread.update() : total 321, complete 162
[2010-01-25 00:53:45,972] DEBUG - UpdateThread.update() : update 1179655, type class Remover
[2010-01-25 00:53:45,973] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,975] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,975] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:45,976] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:45,976] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:45,989] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,989] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,989] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,989] DEBUG - UpdateThread.update() : total 321, complete 163
[2010-01-25 00:53:45,989] DEBUG - UpdateThread.update() : update 1212423, type class AddressBook
[2010-01-25 00:53:45,990] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,991] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,993] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,993] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,993] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,993] DEBUG - UpdateThread.update() : total 321, complete 164
[2010-01-25 00:53:45,993] DEBUG - UpdateThread.update() : update 1081365, type class Address
[2010-01-25 00:53:45,994] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,995] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:45,997] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:45,997] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:45,997] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:45,997] DEBUG - UpdateThread.update() : total 321, complete 165
[2010-01-25 00:53:45,997] DEBUG - UpdateThread.update() : update 1114119, type class Statistics
[2010-01-25 00:53:45,997] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:45,998] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,003] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,003] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,003] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,003] DEBUG - UpdateThread.update() : total 321, complete 166
[2010-01-25 00:53:46,003] DEBUG - UpdateThread.update() : update 1146894, type class Favorite
[2010-01-25 00:53:46,003] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,004] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,006] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,006] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,006] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,006] DEBUG - UpdateThread.update() : total 321, complete 167
[2010-01-25 00:53:46,006] DEBUG - UpdateThread.update() : update 1146895, type class Favorite
[2010-01-25 00:53:46,006] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,010] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,012] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,012] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,012] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,012] DEBUG - UpdateThread.update() : total 321, complete 168
[2010-01-25 00:53:46,012] DEBUG - UpdateThread.update() : update 1179655, type class Remover
[2010-01-25 00:53:46,012] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,013] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,015] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,015] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,015] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,015] DEBUG - UpdateThread.update() : total 321, complete 169
[2010-01-25 00:53:46,015] DEBUG - UpdateThread.update() : update 1212424, type class AddressBook
[2010-01-25 00:53:46,017] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,026] DEBUG - XmlSerializer.save() : timing 70 at [extract]
[2010-01-25 00:53:46,026] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:46,027] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:53:46,027] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,029] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,030] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,035] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:46,035] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:46,045] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:53:46,045] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,045] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,045] DEBUG - UpdateThread.update() : total 321, complete 170
[2010-01-25 00:53:46,046] DEBUG - UpdateThread.update() : update 1081366, type class Address
[2010-01-25 00:53:46,046] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,048] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,052] DEBUG - XmlCompare.next(): hit  <name>robs address book11</name> vs.  <name>robs address book111</name>
[2010-01-25 00:53:46,054] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,055] DEBUG - XmlCompare.next(): hit   <street>2</street> vs.   <street>3</street>
[2010-01-25 00:53:46,055] DEBUG - XmlCompare.next(): hit   <street>1</street> vs.   <street>2</street>
[2010-01-25 00:53:46,055] DEBUG - XmlCompare.next(): hit   <city>San Francisco</city> vs.   <street>1</street>
[2010-01-25 00:53:46,056] DEBUG - XmlCompare.next(): hit   <state>CA</state> vs.   <city>San Francisco</city>
[2010-01-25 00:53:46,056] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:46,056] DEBUG - XmlCompare.next(): hit   <zip-code>94122</zip-code> vs.   <state>CA</state>
[2010-01-25 00:53:46,056] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:46,056] DEBUG - XmlCompare.next(): hit   <region>USA</region> vs.   <zip-code>94122</zip-code>
[2010-01-25 00:53:46,056] DEBUG - XmlCompare.next(): hit   <region>North America</region> vs.   <region>USA</region>
[2010-01-25 00:53:46,056] DEBUG - XmlCompare.next(): hit  </address> vs.   <region>North America</region>
[2010-01-25 00:53:46,059] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,059] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,059] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,059] DEBUG - UpdateThread.update() : total 321, complete 171
[2010-01-25 00:53:46,059] DEBUG - UpdateThread.update() : update 1114119, type class Statistics
[2010-01-25 00:53:46,059] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,060] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,062] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,062] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,062] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,062] DEBUG - UpdateThread.update() : total 321, complete 172
[2010-01-25 00:53:46,062] DEBUG - UpdateThread.update() : update 1146896, type class Favorite
[2010-01-25 00:53:46,063] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,063] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,064] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,065] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:46,065] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:46,068] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,068] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,068] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,068] DEBUG - UpdateThread.update() : total 321, complete 173
[2010-01-25 00:53:46,068] DEBUG - UpdateThread.update() : update 1146897, type class Favorite
[2010-01-25 00:53:46,068] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,069] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,069] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,070] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:46,070] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:46,072] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,072] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,073] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,073] DEBUG - UpdateThread.update() : total 321, complete 174
[2010-01-25 00:53:46,073] DEBUG - UpdateThread.update() : update 1179656, type class Remover
[2010-01-25 00:53:46,074] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,074] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,075] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,075] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:46,075] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:46,081] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,081] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,081] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,081] DEBUG - UpdateThread.update() : total 321, complete 175
[2010-01-25 00:53:46,081] DEBUG - UpdateThread.update() : update 1212424, type class AddressBook
[2010-01-25 00:53:46,082] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,083] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,085] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,085] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,085] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,085] DEBUG - UpdateThread.update() : total 321, complete 176
[2010-01-25 00:53:46,085] DEBUG - UpdateThread.update() : update 1081366, type class Address
[2010-01-25 00:53:46,088] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,088] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,091] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,091] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,091] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,091] DEBUG - UpdateThread.update() : total 321, complete 177
[2010-01-25 00:53:46,091] DEBUG - UpdateThread.update() : update 1146896, type class Favorite
[2010-01-25 00:53:46,092] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,093] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,094] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,094] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,094] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,094] DEBUG - UpdateThread.update() : total 321, complete 178
[2010-01-25 00:53:46,095] DEBUG - UpdateThread.update() : update 1146897, type class Favorite
[2010-01-25 00:53:46,095] DEBUG - XmlCompare.compare() : [[1736707:address-book, 1605636:address]]
[2010-01-25 00:53:46,095] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,095] DEBUG - XmlSerializer.save() : timing 68 at [changed]
[2010-01-25 00:53:46,095] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field name. New Val [robs address book111], old [robs address book11]
[2010-01-25 00:53:46,097] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,098] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,098] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,098] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,098] DEBUG - UpdateThread.update() : total 321, complete 179
[2010-01-25 00:53:46,099] DEBUG - UpdateThread.update() : update 1179656, type class Remover
[2010-01-25 00:53:46,099] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,099] DEBUG - XmlSerializer().storeAll() : update timestamp on class Address for field street. New Val [[1, 2, 3]], old [[1, 2]]
[2010-01-25 00:53:46,099] DEBUG - XmlSerializer().storeAll() :  save [Address], id [1605636]
[2010-01-25 00:53:46,100] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,103] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,103] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,103] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,103] DEBUG - UpdateThread.update() : total 321, complete 180
[2010-01-25 00:53:46,103] DEBUG - UpdateThread.update() : update 1212425, type class AddressBook
[2010-01-25 00:53:46,105] DEBUG - XmlSerializer().storeAll() : old [1605636, 1605637, 1605638, 1605639, 1605640, 1605641, 1605642, 1605643, 1605644, 1605645, 1605646, 1605647, 1605648, 1605649]
[2010-01-25 00:53:46,105] DEBUG - XmlSerializer().storeAll() : new [1605636, 1605637, 1605638, 1605639, 1605640, 1605641, 1605642, 1605643, 1605644, 1605645, 1605646, 1605647, 1605648, 1605649]
[2010-01-25 00:53:46,105] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,111] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field address. New Val [[Address : 1605636, Address : 1605637, Address : 1605638, Address : 1605639, Address : 1605640, Address : 1605641, Address : 1605642, Address : 1605643, Address : 1605644, Address : 1605645, Address : 1605646, Address : 1605647, Address : 1605648, Address : 1605649]], old [[Address : 1605636, Address : 1605637, Address : 1605638, Address : 1605639, Address : 1605640, Address : 1605641, Address : 1605642, Address : 1605643, Address : 1605644, Address : 1605645, Address : 1605646, Address : 1605647, Address : 1605648, Address : 1605649]]
[2010-01-25 00:53:46,113] DEBUG - XmlSerializer().storeAll() : old [1671174, 1671175]
[2010-01-25 00:53:46,113] DEBUG - XmlSerializer().storeAll() : new [1671174, 1671175]
[2010-01-25 00:53:46,114] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1736707]
[2010-01-25 00:53:46,114] DEBUG - XmlSerializer.save() : timing 19 at [storeAll]
[2010-01-25 00:53:46,116] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:53:46,116] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736707]
[2010-01-25 00:53:46,116] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,117] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,118] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,127] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:46,127] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:46,131] DEBUG - LockItem.unlock() : 25 current
[2010-01-25 00:53:46,131] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,131] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,131] DEBUG - UpdateThread.update() : total 321, complete 181
[2010-01-25 00:53:46,131] DEBUG - UpdateThread.update() : update 1081367, type class Address
[2010-01-25 00:53:46,132] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,134] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,135] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,135] DEBUG - UpdateCache.update() : update [class Address], id [1605636]
[2010-01-25 00:53:46,135] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,135] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,136] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:46,137] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:46,137] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,137] DEBUG - XmlSerializer.save() : timing 21 at [cache]
[2010-01-25 00:53:46,139] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,139] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,139] DEBUG - LockItem.unlock() : 19 remain
[2010-01-25 00:53:46,139] DEBUG - UpdateThread.update() : total 321, complete 182
[2010-01-25 00:53:46,140] DEBUG - UpdateThread.update() : update 1114120, type class Statistics
[2010-01-25 00:53:46,141] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,142] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,142] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,143] DEBUG - LockItem.unlock() : 20 current
[2010-01-25 00:53:46,143] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:46,143] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,143] DEBUG - XmlSerializer.save() : timing 6 at [save]
[2010-01-25 00:53:46,143] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:46,143] DEBUG - testUpdateTiming() : timing 212 at [save3]
[2010-01-25 00:53:46,143] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:46,143] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:46,146] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,148] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,148] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,148] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,148] DEBUG - UpdateThread.update() : total 321, complete 183
[2010-01-25 00:53:46,148] DEBUG - UpdateThread.update() : update 1146898, type class Favorite
[2010-01-25 00:53:46,149] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,151] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,151] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,152] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:46,152] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:46,158] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,158] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,158] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,158] DEBUG - UpdateThread.update() : total 321, complete 184
[2010-01-25 00:53:46,158] DEBUG - UpdateThread.update() : update 1146899, type class Favorite
[2010-01-25 00:53:46,158] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,158] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,160] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,160] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,160] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,161] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:46,161] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:46,163] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,163] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,163] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,163] DEBUG - UpdateThread.update() : total 321, complete 185
[2010-01-25 00:53:46,163] DEBUG - UpdateThread.update() : update 1179657, type class Remover
[2010-01-25 00:53:46,167] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,168] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,168] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,169] DEBUG - UpdateCache.remove() : size before 38
[2010-01-25 00:53:46,169] DEBUG - UpdateCache.remove() : size after 38
[2010-01-25 00:53:46,171] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,171] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,172] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,172] DEBUG - UpdateThread.update() : total 321, complete 186
[2010-01-25 00:53:46,172] DEBUG - UpdateThread.update() : update 1212425, type class AddressBook
[2010-01-25 00:53:46,173] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,174] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,176] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,176] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,176] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,176] DEBUG - UpdateThread.update() : total 321, complete 187
[2010-01-25 00:53:46,176] DEBUG - UpdateThread.update() : update 1081367, type class Address
[2010-01-25 00:53:46,177] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,178] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,180] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,180] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,181] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,181] DEBUG - UpdateThread.update() : total 321, complete 188
[2010-01-25 00:53:46,181] DEBUG - UpdateThread.update() : update 1114120, type class Statistics
[2010-01-25 00:53:46,181] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,182] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,184] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,184] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,184] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,184] DEBUG - UpdateThread.update() : total 321, complete 189
[2010-01-25 00:53:46,184] DEBUG - UpdateThread.update() : update 1146898, type class Favorite
[2010-01-25 00:53:46,184] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,185] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,187] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,187] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,187] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,187] DEBUG - UpdateThread.update() : total 321, complete 190
[2010-01-25 00:53:46,188] DEBUG - UpdateThread.update() : update 1146899, type class Favorite
[2010-01-25 00:53:46,189] DEBUG - XmlSerializer.save() : timing 44 at [extract]
[2010-01-25 00:53:46,189] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:46,189] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:46,190] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,190] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:46,190] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:46,190] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:46,191] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:46,191] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,192] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:46,192] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:46,192] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:46,192] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:46,192] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:46,193] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,193] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:46,193] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,193] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,193] DEBUG - UpdateThread.update() : total 321, complete 191
[2010-01-25 00:53:46,193] DEBUG - UpdateThread.update() : update 1179657, type class Remover
[2010-01-25 00:53:46,193] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:53:46,193] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,194] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:46,194] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736708]
[2010-01-25 00:53:46,194] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,194] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,197] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,197] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,197] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,197] DEBUG - UpdateThread.update() : total 321, complete 192
[2010-01-25 00:53:46,197] DEBUG - UpdateThread.update() : update 1212426, type class AddressBook
[2010-01-25 00:53:46,198] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,198] DEBUG - UpdateCache.update() : update [class Address], id [1605650]
[2010-01-25 00:53:46,198] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,199] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,199] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,199] DEBUG - UpdateCache.update() : update [class Statistics], id [1638404]
[2010-01-25 00:53:46,199] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,200] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,200] DEBUG - UpdateCache.update() : update [class Favorite], id [1671176]
[2010-01-25 00:53:46,201] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,201] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,201] DEBUG - UpdateCache.update() : update [class Favorite], id [1671177]
[2010-01-25 00:53:46,202] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,202] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,202] DEBUG - UpdateCache.update() : update [class Remover], id [1703940]
[2010-01-25 00:53:46,202] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,203] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,203] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736708]
[2010-01-25 00:53:46,203] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,207] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,207] DEBUG - UpdateCache.update() : update [class Address], id [1605650]
[2010-01-25 00:53:46,207] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,209] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,209] DEBUG - UpdateCache.update() : update [class Statistics], id [1638404]
[2010-01-25 00:53:46,209] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,210] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,210] DEBUG - UpdateCache.update() : update [class Favorite], id [1671176]
[2010-01-25 00:53:46,210] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,211] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,211] DEBUG - UpdateCache.update() : update [class Favorite], id [1671177]
[2010-01-25 00:53:46,211] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,212] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,212] DEBUG - UpdateCache.update() : update [class Remover], id [1703940]
[2010-01-25 00:53:46,212] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,213] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,213] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-25 00:53:46,213] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,215] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,225] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:53:46,225] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:53:46,229] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:46,229] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,229] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,229] DEBUG - UpdateThread.update() : total 321, complete 193
[2010-01-25 00:53:46,230] DEBUG - UpdateThread.update() : update 1081368, type class Address
[2010-01-25 00:53:46,231] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,232] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,233] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,234] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:53:46,234] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:53:46,235] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,235] DEBUG - XmlSerializer.save() : timing 22 at [save]
[2010-01-25 00:53:46,235] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:46,236] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,240] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,240] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,240] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,240] DEBUG - UpdateThread.update() : total 321, complete 194
[2010-01-25 00:53:46,241] DEBUG - UpdateThread.update() : update 1114121, type class Statistics
[2010-01-25 00:53:46,241] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,242] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,242] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,243] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:53:46,243] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:53:46,244] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,246] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,246] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,246] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,246] DEBUG - UpdateThread.update() : total 321, complete 195
[2010-01-25 00:53:46,246] DEBUG - UpdateThread.update() : update 1146900, type class Favorite
[2010-01-25 00:53:46,247] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,247] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,250] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,251] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,252] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:53:46,252] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:53:46,254] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,254] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,254] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,254] DEBUG - UpdateThread.update() : total 321, complete 196
[2010-01-25 00:53:46,254] DEBUG - UpdateThread.update() : update 1146901, type class Favorite
[2010-01-25 00:53:46,254] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,255] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,256] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,258] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:53:46,258] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:53:46,260] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,260] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,260] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,261] DEBUG - UpdateThread.update() : total 321, complete 197
[2010-01-25 00:53:46,261] DEBUG - UpdateThread.update() : update 1179658, type class Remover
[2010-01-25 00:53:46,261] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,262] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,263] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,264] DEBUG - UpdateCache.remove() : size before 44
[2010-01-25 00:53:46,264] DEBUG - UpdateCache.remove() : size after 44
[2010-01-25 00:53:46,273] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,274] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,274] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,274] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,274] DEBUG - UpdateThread.update() : total 321, complete 198
[2010-01-25 00:53:46,274] DEBUG - UpdateThread.update() : update 1507328, type class MixedKids
[2010-01-25 00:53:46,278] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,282] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,283] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,297] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:46,325] DEBUG - XmlSerializer.save() : timing 48 at [extract]
[2010-01-25 00:53:46,325] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:46,326] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:53:46,326] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,336] DEBUG - XmlCompare.next(): hit  <statistics accessed="100" size="100" id="1638404"> vs.  <statistics accessed="200" size="100" id="1638404">
[2010-01-25 00:53:46,342] DEBUG - XmlCompare.compare() : [[1638404:statistics, 1736708:address-book]]
[2010-01-25 00:53:46,342] DEBUG - XmlSerializer.save() : timing 16 at [changed]
[2010-01-25 00:53:46,343] DEBUG - XmlSerializer().storeAll() : old [1605650]
[2010-01-25 00:53:46,344] DEBUG - XmlSerializer().storeAll() : new [1605650]
[2010-01-25 00:53:46,345] DEBUG - XmlSerializer().storeAll() : update timestamp on class Statistics for field accessed. New Val [200], old [100]
[2010-01-25 00:53:46,347] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [1638404]
[2010-01-25 00:53:46,353] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field statistics. New Val [Statistics : 1638404], old [Statistics : 1638404]
[2010-01-25 00:53:46,356] DEBUG - XmlSerializer().storeAll() : old [1671176, 1671177]
[2010-01-25 00:53:46,356] DEBUG - XmlSerializer().storeAll() : new [1671176, 1671177]
[2010-01-25 00:53:46,357] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1736708]
[2010-01-25 00:53:46,357] DEBUG - XmlSerializer.save() : timing 15 at [storeAll]
[2010-01-25 00:53:46,358] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:46,358] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736708]
[2010-01-25 00:53:46,358] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,364] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,365] DEBUG - UpdateCache.update() : update [class Statistics], id [1638404]
[2010-01-25 00:53:46,365] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,365] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,365] DEBUG - XmlSerializer.save() : timing 7 at [cache]
[2010-01-25 00:53:46,376] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:46,376] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:46,376] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,377] DEBUG - XmlSerializer.save() : timing 12 at [save]
[2010-01-25 00:53:46,377] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:46,377] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:53:46,377] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:53:46,381] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-25 00:53:46,385] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,389] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,397] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,409] DEBUG - XmlSerializer.save() : timing 24 at [extract]
[2010-01-25 00:53:46,409] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:46,409] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:46,410] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:46,411] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:46,411] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:46,411] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:46,411] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:46,412] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:46,413] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:46,413] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:46,413] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:46,413] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:46,413] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:53:46,414] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:46,414] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736709]
[2010-01-25 00:53:46,415] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,420] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,421] DEBUG - UpdateCache.update() : update [class Address], id [1605651]
[2010-01-25 00:53:46,421] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,422] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,422] DEBUG - UpdateCache.update() : update [class Statistics], id [1638405]
[2010-01-25 00:53:46,422] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,423] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,423] DEBUG - UpdateCache.update() : update [class Favorite], id [1671178]
[2010-01-25 00:53:46,423] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,424] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,424] DEBUG - UpdateCache.update() : update [class Favorite], id [1671179]
[2010-01-25 00:53:46,424] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,425] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,425] DEBUG - UpdateCache.update() : update [class Remover], id [1703941]
[2010-01-25 00:53:46,425] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,426] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,426] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736709]
[2010-01-25 00:53:46,426] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,431] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,431] DEBUG - UpdateCache.update() : update [class Address], id [1605651]
[2010-01-25 00:53:46,431] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,433] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,433] DEBUG - UpdateCache.update() : update [class Statistics], id [1638405]
[2010-01-25 00:53:46,433] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,434] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,434] DEBUG - UpdateCache.update() : update [class Favorite], id [1671178]
[2010-01-25 00:53:46,434] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,435] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,435] DEBUG - UpdateCache.update() : update [class Favorite], id [1671179]
[2010-01-25 00:53:46,435] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,436] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,436] DEBUG - UpdateCache.update() : update [class Remover], id [1703941]
[2010-01-25 00:53:46,442] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,443] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,443] DEBUG - XmlSerializer.save() : timing 29 at [cache]
[2010-01-25 00:53:46,450] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,451] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:46,465] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:46,465] DEBUG - XmlSerializer.save() : timing 22 at [save]
[2010-01-25 00:53:46,465] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:46,465] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,482] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,482] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,483] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,485] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,497] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:46,497] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,497] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,497] DEBUG - UpdateThread.update() : total 321, complete 199
[2010-01-25 00:53:46,497] DEBUG - UpdateThread.update() : update 1474560, type class Interleave
[2010-01-25 00:53:46,499] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:53:46,501] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,502] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:53:46,503] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,503] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,508] DEBUG - XmlSerializer.sqlLoad() : query [query.fav.by.id]
[2010-01-25 00:53:46,508] DEBUG - XmlSerializer.sqlLoad() : sql [from Favorite where id = ?]
[2010-01-25 00:53:46,514] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,514] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,514] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,514] DEBUG - UpdateThread.update() : total 321, complete 200
[2010-01-25 00:53:46,514] DEBUG - UpdateThread.update() : update 1376256, type class KidOne
[2010-01-25 00:53:46,515] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,516] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,516] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,517] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,517] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,521] DEBUG - XmlSerializer.sqlLoad() : timing 9 at [query]
[2010-01-25 00:53:46,522] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,523] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,529] DEBUG - XmlSerializer.save() : timing 6 at [extract]
[2010-01-25 00:53:46,530] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:46,530] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:53:46,530] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,536] DEBUG - XmlCompare.next(): hit  <name>gary</name> vs.  <name>ice cream!</name>
[2010-01-25 00:53:46,536] DEBUG - XmlCompare.compare() : [[1671178:favorite]]
[2010-01-25 00:53:46,536] DEBUG - XmlSerializer.save() : timing 6 at [changed]
[2010-01-25 00:53:46,537] DEBUG - XmlSerializer().storeAll() : update timestamp on class Favorite for field name. New Val [ice cream!], old [gary]
[2010-01-25 00:53:46,537] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,537] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,537] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,538] DEBUG - UpdateThread.update() : total 321, complete 201
[2010-01-25 00:53:46,538] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [1671178]
[2010-01-25 00:53:46,538] DEBUG - UpdateThread.update() : update 1376257, type class KidOne
[2010-01-25 00:53:46,538] DEBUG - XmlSerializer.save() : timing 2 at [storeAll]
[2010-01-25 00:53:46,538] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:53:46,539] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,540] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,540] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,541] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,541] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,543] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,543] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,543] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,543] DEBUG - UpdateThread.update() : total 321, complete 202
[2010-01-25 00:53:46,544] DEBUG - UpdateThread.update() : update 1376258, type class KidOne
[2010-01-25 00:53:46,544] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,545] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,545] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,546] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,546] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,548] DEBUG - UpdateCache.updateCache() : process [select parent from AddressBook parent join parent.favorite as favorite where favorite.id = 1671178]
[2010-01-25 00:53:46,548] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,549] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,549] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,549] DEBUG - UpdateThread.update() : total 321, complete 203
[2010-01-25 00:53:46,549] DEBUG - UpdateThread.update() : update 1409024, type class KidTwo
[2010-01-25 00:53:46,549] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:46,550] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,550] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:46,551] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,551] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,563] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,563] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,563] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,563] DEBUG - UpdateThread.update() : total 321, complete 204
[2010-01-25 00:53:46,563] DEBUG - UpdateThread.update() : update 1441792, type class KidThree
[2010-01-25 00:53:46,563] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:53:46,564] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,565] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:53:46,565] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,565] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,576] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,576] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,576] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,576] DEBUG - UpdateThread.update() : total 321, complete 205
[2010-01-25 00:53:46,577] DEBUG - UpdateThread.update() : update 1507328, type class MixedKids
[2010-01-25 00:53:46,577] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,578] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,580] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,580] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,580] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,580] DEBUG - UpdateThread.update() : total 321, complete 206
[2010-01-25 00:53:46,580] DEBUG - UpdateThread.update() : update 1376256, type class KidOne
[2010-01-25 00:53:46,581] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,582] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,583] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,583] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,583] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,583] DEBUG - UpdateThread.update() : total 321, complete 207
[2010-01-25 00:53:46,584] DEBUG - UpdateThread.update() : update 1376257, type class KidOne
[2010-01-25 00:53:46,584] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,585] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,586] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,586] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,586] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,586] DEBUG - UpdateThread.update() : total 321, complete 208
[2010-01-25 00:53:46,587] DEBUG - UpdateThread.update() : update 1376258, type class KidOne
[2010-01-25 00:53:46,587] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,588] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,589] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,589] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,589] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,589] DEBUG - UpdateThread.update() : total 321, complete 209
[2010-01-25 00:53:46,589] DEBUG - UpdateThread.update() : update 1409024, type class KidTwo
[2010-01-25 00:53:46,590] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,591] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,597] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,597] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,597] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,597] DEBUG - UpdateThread.update() : total 321, complete 210
[2010-01-25 00:53:46,597] DEBUG - UpdateThread.update() : update 1441792, type class KidThree
[2010-01-25 00:53:46,597] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,598] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,600] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,600] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,600] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,600] DEBUG - UpdateThread.update() : total 321, complete 211
[2010-01-25 00:53:46,600] DEBUG - UpdateThread.update() : update 1507329, type class MixedKids
[2010-01-25 00:53:46,601] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:46,604] DEBUG - UpdateCache.update() : update [class Favorite], id [1671178]
[2010-01-25 00:53:46,604] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,606] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,606] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736709]
[2010-01-25 00:53:46,606] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,613] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,613] DEBUG - XmlSerializer.save() : timing 75 at [cache]
[2010-01-25 00:53:46,616] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,616] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:46,616] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:46,616] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,616] DEBUG - XmlSerializer.save() : timing 3 at [save]
[2010-01-25 00:53:46,616] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:46,616] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:53:46,616] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:53:46,617] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:46,620] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-25 00:53:46,625] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,628] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,628] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,633] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:46,633] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,633] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,633] DEBUG - UpdateThread.update() : total 321, complete 212
[2010-01-25 00:53:46,633] DEBUG - UpdateThread.update() : update 1474561, type class Interleave
[2010-01-25 00:53:46,634] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:53:46,634] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,635] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,636] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:53:46,636] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,636] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,639] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,639] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,639] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,639] DEBUG - UpdateThread.update() : total 321, complete 213
[2010-01-25 00:53:46,639] DEBUG - UpdateThread.update() : update 1376259, type class KidOne
[2010-01-25 00:53:46,639] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,641] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,642] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,643] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,643] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,643] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,650] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,650] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,650] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,650] DEBUG - UpdateThread.update() : total 321, complete 214
[2010-01-25 00:53:46,650] DEBUG - UpdateThread.update() : update 1376260, type class KidOne
[2010-01-25 00:53:46,651] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,651] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,652] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,652] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,652] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,654] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,654] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,654] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,654] DEBUG - UpdateThread.update() : total 321, complete 215
[2010-01-25 00:53:46,655] DEBUG - UpdateThread.update() : update 1376261, type class KidOne
[2010-01-25 00:53:46,655] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,656] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,656] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:46,657] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,657] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,660] DEBUG - XmlSerializer.save() : timing 35 at [extract]
[2010-01-25 00:53:46,660] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:46,660] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:46,661] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:46,661] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,662] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,662] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,662] DEBUG - UpdateThread.update() : total 321, complete 216
[2010-01-25 00:53:46,662] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:46,662] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:46,662] DEBUG - UpdateThread.update() : update 1409025, type class KidTwo
[2010-01-25 00:53:46,662] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:46,662] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:46,663] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:46,663] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:46,663] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:46,663] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:46,663] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:46,663] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,663] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:46,664] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:46,664] DEBUG - XmlSerializer.save() : timing 4 at [storeAll]
[2010-01-25 00:53:46,664] DEBUG - UpdateCache.remove() : size before 50
[2010-01-25 00:53:46,664] DEBUG - UpdateCache.remove() : size after 50
[2010-01-25 00:53:46,664] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:53:46,665] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736710]
[2010-01-25 00:53:46,665] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,668] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,668] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,668] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,668] DEBUG - UpdateThread.update() : total 321, complete 217
[2010-01-25 00:53:46,668] DEBUG - UpdateThread.update() : update 1441793, type class KidThree
[2010-01-25 00:53:46,668] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:53:46,669] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,669] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,669] DEBUG - UpdateCache.update() : update [class Address], id [1605652]
[2010-01-25 00:53:46,670] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,670] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:53:46,670] DEBUG - UpdateCache.remove() : size before 51
[2010-01-25 00:53:46,670] DEBUG - UpdateCache.remove() : size after 51
[2010-01-25 00:53:46,671] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,671] DEBUG - UpdateCache.update() : update [class Statistics], id [1638406]
[2010-01-25 00:53:46,671] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,672] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,672] DEBUG - UpdateCache.update() : update [class Favorite], id [1671180]
[2010-01-25 00:53:46,672] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,673] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,673] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,673] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,673] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,673] DEBUG - UpdateThread.update() : total 321, complete 218
[2010-01-25 00:53:46,673] DEBUG - UpdateCache.update() : update [class Favorite], id [1671181]
[2010-01-25 00:53:46,673] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,673] DEBUG - UpdateThread.update() : update 1212427, type class AddressBook
[2010-01-25 00:53:46,674] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,674] DEBUG - UpdateCache.update() : update [class Remover], id [1703942]
[2010-01-25 00:53:46,674] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,675] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,675] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736710]
[2010-01-25 00:53:46,675] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,677] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,679] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,679] DEBUG - UpdateCache.update() : update [class Address], id [1605652]
[2010-01-25 00:53:46,679] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,681] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,681] DEBUG - UpdateCache.update() : update [class Statistics], id [1638406]
[2010-01-25 00:53:46,681] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,682] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,682] DEBUG - UpdateCache.update() : update [class Favorite], id [1671180]
[2010-01-25 00:53:46,682] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,683] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,683] DEBUG - UpdateCache.update() : update [class Favorite], id [1671181]
[2010-01-25 00:53:46,683] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,683] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,684] DEBUG - UpdateCache.update() : update [class Remover], id [1703942]
[2010-01-25 00:53:46,684] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,684] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,684] DEBUG - XmlSerializer.save() : timing 20 at [cache]
[2010-01-25 00:53:46,695] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,696] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,703] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,703] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,706] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:46,706] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,706] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,706] DEBUG - UpdateThread.update() : total 321, complete 219
[2010-01-25 00:53:46,706] DEBUG - UpdateThread.update() : update 1081369, type class Address
[2010-01-25 00:53:46,707] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:46,707] DEBUG - XmlSerializer.save() : timing 23 at [save]
[2010-01-25 00:53:46,707] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:46,707] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,707] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,709] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,710] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,711] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,711] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,711] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,713] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,721] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,721] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,721] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,721] DEBUG - UpdateThread.update() : total 321, complete 220
[2010-01-25 00:53:46,722] DEBUG - UpdateThread.update() : update 1114122, type class Statistics
[2010-01-25 00:53:46,722] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,723] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,723] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,724] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,724] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,726] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,726] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,726] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,726] DEBUG - UpdateThread.update() : total 321, complete 221
[2010-01-25 00:53:46,726] DEBUG - UpdateThread.update() : update 1146902, type class Favorite
[2010-01-25 00:53:46,727] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,728] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,728] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,728] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,729] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,731] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,731] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,731] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,731] DEBUG - UpdateThread.update() : total 321, complete 222
[2010-01-25 00:53:46,731] DEBUG - UpdateThread.update() : update 1146903, type class Favorite
[2010-01-25 00:53:46,731] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,732] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,732] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,733] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,733] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,735] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,736] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,736] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,736] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,736] DEBUG - UpdateThread.update() : total 321, complete 223
[2010-01-25 00:53:46,736] DEBUG - UpdateThread.update() : update 1179659, type class Remover
[2010-01-25 00:53:46,736] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,737] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,738] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,738] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,738] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,739] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,741] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:46,741] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,741] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,741] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,741] DEBUG - UpdateThread.update() : total 321, complete 224
[2010-01-25 00:53:46,741] DEBUG - UpdateThread.update() : update 1212427, type class AddressBook
[2010-01-25 00:53:46,742] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,743] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,745] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,745] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,745] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,745] DEBUG - UpdateThread.update() : total 321, complete 225
[2010-01-25 00:53:46,745] DEBUG - UpdateThread.update() : update 1081369, type class Address
[2010-01-25 00:53:46,746] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,747] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,749] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,749] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,749] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,749] DEBUG - UpdateThread.update() : total 321, complete 226
[2010-01-25 00:53:46,749] DEBUG - UpdateThread.update() : update 1114122, type class Statistics
[2010-01-25 00:53:46,750] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,750] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,752] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,752] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,752] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,752] DEBUG - UpdateThread.update() : total 321, complete 227
[2010-01-25 00:53:46,752] DEBUG - UpdateThread.update() : update 1146902, type class Favorite
[2010-01-25 00:53:46,756] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,757] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,758] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,758] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,758] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,758] DEBUG - UpdateThread.update() : total 321, complete 228
[2010-01-25 00:53:46,759] DEBUG - UpdateThread.update() : update 1146903, type class Favorite
[2010-01-25 00:53:46,759] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,759] DEBUG - XmlSerializer.save() : timing 24 at [extract]
[2010-01-25 00:53:46,760] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,760] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:46,760] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:53:46,760] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,761] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:46,761] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,761] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:46,761] DEBUG - UpdateThread.update() : total 321, complete 229
[2010-01-25 00:53:46,761] DEBUG - UpdateThread.update() : update 1179659, type class Remover
[2010-01-25 00:53:46,762] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,762] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,764] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:46,764] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,764] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:46,764] DEBUG - UpdateThread.update() : total 321, complete 230
[2010-01-25 00:53:46,764] DEBUG - UpdateThread.update() : update 1212428, type class AddressBook
[2010-01-25 00:53:46,766] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,769] DEBUG - XmlCompare.next(): hit  <statistics accessed="100" size="100" id="1638406"> vs.  <statistics accessed="1000" size="100" id="1638406">
[2010-01-25 00:53:46,771] DEBUG - XmlCompare.compare() : [[1736710:address-book, 1638406:statistics]]
[2010-01-25 00:53:46,772] DEBUG - XmlSerializer.save() : timing 12 at [changed]
[2010-01-25 00:53:46,774] DEBUG - XmlSerializer().storeAll() : old [1605652]
[2010-01-25 00:53:46,774] DEBUG - XmlSerializer().storeAll() : new [1605652]
[2010-01-25 00:53:46,775] DEBUG - XmlSerializer().storeAll() : update timestamp on class Statistics for field accessed. New Val [1000], old [100]
[2010-01-25 00:53:46,775] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [1638406]
[2010-01-25 00:53:46,776] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field statistics. New Val [Statistics : 1638406], old [Statistics : 1638406]
[2010-01-25 00:53:46,777] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,777] DEBUG - XmlSerializer().storeAll() : old [1671180, 1671181]
[2010-01-25 00:53:46,777] DEBUG - XmlSerializer().storeAll() : new [1671180, 1671181]
[2010-01-25 00:53:46,778] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1736710]
[2010-01-25 00:53:46,778] DEBUG - XmlSerializer.save() : timing 6 at [storeAll]
[2010-01-25 00:53:46,778] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,779] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:46,779] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736710]
[2010-01-25 00:53:46,780] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,783] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,783] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,783] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,783] DEBUG - UpdateCache.update() : update [class Statistics], id [1638406]
[2010-01-25 00:53:46,783] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,784] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,784] DEBUG - XmlSerializer.save() : timing 5 at [cache]
[2010-01-25 00:53:46,786] DEBUG - LockItem.unlock() : 12 current
[2010-01-25 00:53:46,786] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,786] DEBUG - LockItem.unlock() : 6 remain
[2010-01-25 00:53:46,786] DEBUG - UpdateThread.update() : total 321, complete 231
[2010-01-25 00:53:46,786] DEBUG - UpdateThread.update() : update 1081370, type class Address
[2010-01-25 00:53:46,787] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,788] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:46,788] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:46,788] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,788] DEBUG - XmlSerializer.save() : timing 4 at [save]
[2010-01-25 00:53:46,788] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:46,788] DEBUG - XmlSerializer.sqlLoad() : query [query.stats.by.id]
[2010-01-25 00:53:46,788] DEBUG - XmlSerializer.sqlLoad() : sql [from Statistics where id = ?]
[2010-01-25 00:53:46,789] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,790] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,791] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,791] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,798] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,798] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,798] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,798] DEBUG - UpdateThread.update() : total 321, complete 232
[2010-01-25 00:53:46,798] DEBUG - UpdateThread.update() : update 1114123, type class Statistics
[2010-01-25 00:53:46,799] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,799] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,800] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,801] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,801] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,803] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,803] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,803] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,803] DEBUG - UpdateThread.update() : total 321, complete 233
[2010-01-25 00:53:46,804] DEBUG - UpdateThread.update() : update 1146904, type class Favorite
[2010-01-25 00:53:46,804] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,805] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,805] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,806] DEBUG - XmlSerializer.sqlLoad() : timing 8 at [query]
[2010-01-25 00:53:46,806] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,806] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,808] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,808] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,808] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,808] DEBUG - UpdateThread.update() : total 321, complete 234
[2010-01-25 00:53:46,809] DEBUG - UpdateThread.update() : update 1146905, type class Favorite
[2010-01-25 00:53:46,809] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,809] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,810] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,811] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,812] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,812] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,814] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,814] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,814] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,814] DEBUG - UpdateThread.update() : total 321, complete 235
[2010-01-25 00:53:46,814] DEBUG - UpdateThread.update() : update 1179660, type class Remover
[2010-01-25 00:53:46,814] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:53:46,815] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,817] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,817] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,818] DEBUG - UpdateCache.remove() : size before 56
[2010-01-25 00:53:46,818] DEBUG - UpdateCache.remove() : size after 56
[2010-01-25 00:53:46,820] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,820] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,820] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,820] DEBUG - UpdateThread.update() : total 321, complete 236
[2010-01-25 00:53:46,821] DEBUG - UpdateThread.update() : update 1212428, type class AddressBook
[2010-01-25 00:53:46,822] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,823] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,824] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,824] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,825] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,825] DEBUG - UpdateThread.update() : total 321, complete 237
[2010-01-25 00:53:46,825] DEBUG - UpdateThread.update() : update 1081370, type class Address
[2010-01-25 00:53:46,825] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,827] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,829] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,829] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,829] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,829] DEBUG - UpdateThread.update() : total 321, complete 238
[2010-01-25 00:53:46,829] DEBUG - UpdateThread.update() : update 1114123, type class Statistics
[2010-01-25 00:53:46,829] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,830] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,833] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,833] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,833] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,834] DEBUG - UpdateThread.update() : total 321, complete 239
[2010-01-25 00:53:46,834] DEBUG - UpdateThread.update() : update 1146904, type class Favorite
[2010-01-25 00:53:46,834] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,835] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,837] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,837] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,837] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,837] DEBUG - UpdateThread.update() : total 321, complete 240
[2010-01-25 00:53:46,837] DEBUG - UpdateThread.update() : update 1146905, type class Favorite
[2010-01-25 00:53:46,840] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,840] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,841] DEBUG - XmlSerializer.save() : timing 32 at [extract]
[2010-01-25 00:53:46,841] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:46,842] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-25 00:53:46,842] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,842] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,842] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,842] DEBUG - UpdateThread.update() : total 321, complete 241
[2010-01-25 00:53:46,843] DEBUG - UpdateThread.update() : update 1179660, type class Remover
[2010-01-25 00:53:46,843] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,844] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,845] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:53:46,846] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,846] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,846] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,847] DEBUG - UpdateThread.update() : total 321, complete 242
[2010-01-25 00:53:46,847] DEBUG - UpdateThread.update() : update 1212429, type class AddressBook
[2010-01-25 00:53:46,849] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,849] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-01-25 00:53:46,849] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-01-25 00:53:46,850] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:53:46,851] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:46,851] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:46,851] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:53:46,860] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:53:46,860] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:46,860] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:46,861] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:53:46,861] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:46,861] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:46,861] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:53:46,864] DEBUG - XmlSerializer.save() : timing 22 at [storeAll]
[2010-01-25 00:53:46,865] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:46,865] DEBUG - UpdateCache.update() : update [class Levelone], id [1867776]
[2010-01-25 00:53:46,865] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:46,866] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,867] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,870] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,870] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835008]
[2010-01-25 00:53:46,870] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:46,873] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,873] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802240]
[2010-01-25 00:53:46,873] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:46,875] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,875] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802241]
[2010-01-25 00:53:46,875] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:46,876] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,876] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835009]
[2010-01-25 00:53:46,876] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:46,876] DEBUG - UpdateCache.remove() : size before 60
[2010-01-25 00:53:46,876] DEBUG - UpdateCache.remove() : size after 60
[2010-01-25 00:53:46,879] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,879] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802242]
[2010-01-25 00:53:46,879] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:46,880] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:46,880] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,880] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,880] DEBUG - UpdateThread.update() : total 321, complete 243
[2010-01-25 00:53:46,880] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,880] DEBUG - UpdateThread.update() : update 1081371, type class Address
[2010-01-25 00:53:46,880] DEBUG - UpdateCache.update() : update [class Levelone], id [1867776]
[2010-01-25 00:53:46,881] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:46,881] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,882] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,883] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,884] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,884] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835008]
[2010-01-25 00:53:46,884] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:46,884] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:46,884] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:46,886] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,886] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802240]
[2010-01-25 00:53:46,886] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:46,887] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,887] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,887] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,887] DEBUG - UpdateThread.update() : total 321, complete 244
[2010-01-25 00:53:46,887] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,887] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802241]
[2010-01-25 00:53:46,887] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:46,887] DEBUG - UpdateThread.update() : update 1114124, type class Statistics
[2010-01-25 00:53:46,888] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,888] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,888] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835009]
[2010-01-25 00:53:46,888] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:46,890] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,890] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802242]
[2010-01-25 00:53:46,890] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:46,890] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,890] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,891] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:46,891] DEBUG - XmlSerializer.save() : timing 26 at [cache]
[2010-01-25 00:53:46,891] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:46,891] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:46,895] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,895] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,895] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,895] DEBUG - UpdateThread.update() : total 321, complete 245
[2010-01-25 00:53:46,895] DEBUG - UpdateThread.update() : update 1146906, type class Favorite
[2010-01-25 00:53:46,896] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,897] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,897] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,899] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:46,899] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:46,904] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,904] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,904] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,904] DEBUG - UpdateThread.update() : total 321, complete 246
[2010-01-25 00:53:46,905] DEBUG - UpdateThread.update() : update 1146907, type class Favorite
[2010-01-25 00:53:46,905] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,906] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,906] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,910] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:46,910] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:46,914] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,914] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,914] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,914] DEBUG - UpdateThread.update() : total 321, complete 247
[2010-01-25 00:53:46,914] DEBUG - UpdateThread.update() : update 1179661, type class Remover
[2010-01-25 00:53:46,915] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,921] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,922] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:46,923] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:46,923] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:46,925] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,925] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,925] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,925] DEBUG - UpdateThread.update() : total 321, complete 248
[2010-01-25 00:53:46,926] DEBUG - UpdateThread.update() : update 1212429, type class AddressBook
[2010-01-25 00:53:46,926] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,927] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,929] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,929] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,929] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,930] DEBUG - UpdateThread.update() : total 321, complete 249
[2010-01-25 00:53:46,930] DEBUG - UpdateThread.update() : update 1081371, type class Address
[2010-01-25 00:53:46,930] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,931] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,934] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,934] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,934] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,934] DEBUG - UpdateThread.update() : total 321, complete 250
[2010-01-25 00:53:46,934] DEBUG - UpdateThread.update() : update 1114124, type class Statistics
[2010-01-25 00:53:46,934] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,935] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,937] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,937] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,937] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,937] DEBUG - UpdateThread.update() : total 321, complete 251
[2010-01-25 00:53:46,937] DEBUG - UpdateThread.update() : update 1146906, type class Favorite
[2010-01-25 00:53:46,937] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,938] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,941] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,941] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,941] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,941] DEBUG - UpdateThread.update() : total 321, complete 252
[2010-01-25 00:53:46,941] DEBUG - UpdateThread.update() : update 1146907, type class Favorite
[2010-01-25 00:53:46,941] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,942] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,944] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,944] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,944] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,944] DEBUG - UpdateThread.update() : total 321, complete 253
[2010-01-25 00:53:46,944] DEBUG - UpdateThread.update() : update 1179661, type class Remover
[2010-01-25 00:53:46,944] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:46,945] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,947] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,947] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,947] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,947] DEBUG - UpdateThread.update() : total 321, complete 254
[2010-01-25 00:53:46,947] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:46,947] DEBUG - XmlSerializer.save() : timing 56 at [save]
[2010-01-25 00:53:46,947] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:46,947] DEBUG - UpdateThread.update() : update 1212430, type class AddressBook
[2010-01-25 00:53:46,948] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,952] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,954] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:53:46,965] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,966] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:46,973] DEBUG - XmlSerializer.sqlLoad() : query [query.lthree.by.id]
[2010-01-25 00:53:46,974] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:46,974] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:46,974] DEBUG - XmlSerializer.sqlLoad() : sql [from Levelthree where id = ?]
[2010-01-25 00:53:46,977] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:46,977] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,977] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,977] DEBUG - UpdateThread.update() : total 321, complete 255
[2010-01-25 00:53:46,977] DEBUG - UpdateThread.update() : update 1081372, type class Address
[2010-01-25 00:53:46,978] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,980] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,980] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:46,982] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:46,982] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:46,984] DEBUG - XmlSerializer.sqlLoad() : timing 6 at [query]
[2010-01-25 00:53:46,985] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,985] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,985] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,985] DEBUG - UpdateThread.update() : total 321, complete 256
[2010-01-25 00:53:46,985] DEBUG - UpdateThread.update() : update 1114125, type class Statistics
[2010-01-25 00:53:46,985] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:46,985] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,986] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,987] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:46,987] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:46,987] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:46,991] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:46,991] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,991] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:46,991] DEBUG - UpdateThread.update() : total 321, complete 257
[2010-01-25 00:53:46,994] DEBUG - UpdateThread.update() : update 1146908, type class Favorite
[2010-01-25 00:53:46,995] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,996] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:46,996] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:46,997] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:46,997] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:46,998] DEBUG - XmlSerializer.save() : timing 13 at [extract]
[2010-01-25 00:53:46,999] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:46,999] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:53:46,999] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:46,999] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:46,999] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:46,999] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:46,999] DEBUG - UpdateThread.update() : total 321, complete 258
[2010-01-25 00:53:46,999] DEBUG - UpdateThread.update() : update 1146909, type class Favorite
[2010-01-25 00:53:47,000] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,001] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,001] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,003] DEBUG - XmlCompare.next(): hit  <name>child</name> vs.  <name>childNEW</name>
[2010-01-25 00:53:47,003] DEBUG - XmlCompare.compare() : [[1802240:levelthree]]
[2010-01-25 00:53:47,003] DEBUG - XmlSerializer.save() : timing 4 at [changed]
[2010-01-25 00:53:47,003] DEBUG - XmlSerializer().storeAll() : update timestamp on class Levelthree for field name. New Val [childNEW], old [child]
[2010-01-25 00:53:47,004] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1802240]
[2010-01-25 00:53:47,004] DEBUG - XmlSerializer.save() : timing 1 at [storeAll]
[2010-01-25 00:53:47,005] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:47,005] DEBUG - UpdateCache.updateCache() : process [select parent from Leveltwo parent join parent.levelthree as levelthree where levelthree.id = 1802240]
[2010-01-25 00:53:47,006] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:47,006] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:47,008] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:47,008] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,008] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,008] DEBUG - UpdateThread.update() : total 321, complete 259
[2010-01-25 00:53:47,010] DEBUG - UpdateThread.update() : update 1179662, type class Remover
[2010-01-25 00:53:47,010] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,011] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,011] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,012] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:47,012] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:47,015] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:47,015] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,015] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,015] DEBUG - UpdateThread.update() : total 321, complete 260
[2010-01-25 00:53:47,015] DEBUG - UpdateThread.update() : update 1212430, type class AddressBook
[2010-01-25 00:53:47,016] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,018] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,019] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:47,020] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,020] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,020] DEBUG - UpdateThread.update() : total 321, complete 261
[2010-01-25 00:53:47,020] DEBUG - UpdateThread.update() : update 1081372, type class Address
[2010-01-25 00:53:47,020] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,022] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,024] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:47,024] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,024] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,024] DEBUG - UpdateThread.update() : total 321, complete 262
[2010-01-25 00:53:47,025] DEBUG - UpdateThread.update() : update 1114125, type class Statistics
[2010-01-25 00:53:47,025] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,026] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,028] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:47,028] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,028] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,028] DEBUG - UpdateThread.update() : total 321, complete 263
[2010-01-25 00:53:47,028] DEBUG - UpdateThread.update() : update 1146908, type class Favorite
[2010-01-25 00:53:47,028] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,029] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,031] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:47,031] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,031] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,031] DEBUG - UpdateThread.update() : total 321, complete 264
[2010-01-25 00:53:47,031] DEBUG - UpdateThread.update() : update 1146909, type class Favorite
[2010-01-25 00:53:47,031] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,032] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,034] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:47,034] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,034] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,034] DEBUG - UpdateThread.update() : total 321, complete 265
[2010-01-25 00:53:47,034] DEBUG - UpdateThread.update() : update 1179662, type class Remover
[2010-01-25 00:53:47,035] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,036] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,037] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:47,037] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,037] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,037] DEBUG - UpdateThread.update() : total 321, complete 266
[2010-01-25 00:53:47,038] DEBUG - UpdateThread.update() : update 1212431, type class AddressBook
[2010-01-25 00:53:47,039] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,043] DEBUG - UpdateCache.updateCache() : process [select parent from Levelone parent join parent.leveltwo as leveltwo where leveltwo.id = 1835008]
[2010-01-25 00:53:47,051] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,053] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,064] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:47,064] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:47,067] DEBUG - LockItem.unlock() : 7 current
[2010-01-25 00:53:47,067] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,067] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,067] DEBUG - UpdateThread.update() : total 321, complete 267
[2010-01-25 00:53:47,068] DEBUG - UpdateThread.update() : update 1081373, type class Address
[2010-01-25 00:53:47,068] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,070] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,071] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,072] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:47,072] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:47,073] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802240]
[2010-01-25 00:53:47,073] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:47,074] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:47,074] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,074] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,074] DEBUG - UpdateCache.update() : update [class Levelone], id [1867776]
[2010-01-25 00:53:47,074] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:47,075] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,075] DEBUG - UpdateThread.update() : total 321, complete 268
[2010-01-25 00:53:47,076] DEBUG - UpdateThread.update() : update 1114126, type class Statistics
[2010-01-25 00:53:47,076] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,077] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,077] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,078] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:47,078] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:47,082] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,082] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835008]
[2010-01-25 00:53:47,082] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:47,084] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,084] DEBUG - XmlSerializer.save() : timing 79 at [cache]
[2010-01-25 00:53:47,084] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:47,085] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,085] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,085] DEBUG - UpdateThread.update() : total 321, complete 269
[2010-01-25 00:53:47,085] DEBUG - UpdateThread.update() : update 1146910, type class Favorite
[2010-01-25 00:53:47,085] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,086] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,086] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,087] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:47,087] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:47,087] DEBUG - LockItem.unlock() : 2 current
[2010-01-25 00:53:47,088] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:47,088] DEBUG - LockItem.unlock() : 1 remain
[2010-01-25 00:53:47,088] DEBUG - XmlSerializer.save() : timing 4 at [save]
[2010-01-25 00:53:47,088] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:47,088] DEBUG - XmlSerializer.sqlLoad() : query [query.lone.by.id]
[2010-01-25 00:53:47,088] DEBUG - XmlSerializer.sqlLoad() : sql [from Levelone where id = ?]
[2010-01-25 00:53:47,089] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,089] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,089] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,089] DEBUG - UpdateThread.update() : total 321, complete 270
[2010-01-25 00:53:47,089] DEBUG - UpdateThread.update() : update 1146911, type class Favorite
[2010-01-25 00:53:47,090] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,091] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,091] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,092] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:47,092] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:47,094] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,094] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,094] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,094] DEBUG - UpdateThread.update() : total 321, complete 271
[2010-01-25 00:53:47,094] DEBUG - UpdateThread.update() : update 1179663, type class Remover
[2010-01-25 00:53:47,094] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,095] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,096] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,097] DEBUG - UpdateCache.remove() : size before 62
[2010-01-25 00:53:47,097] DEBUG - UpdateCache.remove() : size after 62
[2010-01-25 00:53:47,099] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,099] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,099] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,099] DEBUG - UpdateThread.update() : total 321, complete 272
[2010-01-25 00:53:47,099] DEBUG - UpdateThread.update() : update 1212431, type class AddressBook
[2010-01-25 00:53:47,100] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,101] DEBUG - XmlSerializer.sqlLoad() : timing 9 at [query]
[2010-01-25 00:53:47,101] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,104] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,104] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,104] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,104] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,104] DEBUG - UpdateThread.update() : total 321, complete 273
[2010-01-25 00:53:47,104] DEBUG - UpdateThread.update() : update 1081373, type class Address
[2010-01-25 00:53:47,106] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,107] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,111] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,112] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,112] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,112] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,112] DEBUG - UpdateThread.update() : total 321, complete 274
[2010-01-25 00:53:47,113] DEBUG - UpdateThread.update() : update 1114126, type class Statistics
[2010-01-25 00:53:47,114] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,118] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,129] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,133] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,133] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,133] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,133] DEBUG - UpdateThread.update() : total 321, complete 275
[2010-01-25 00:53:47,133] DEBUG - UpdateThread.update() : update 1146910, type class Favorite
[2010-01-25 00:53:47,134] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,134] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,136] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,136] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,136] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,136] DEBUG - UpdateThread.update() : total 321, complete 276
[2010-01-25 00:53:47,136] DEBUG - UpdateThread.update() : update 1146911, type class Favorite
[2010-01-25 00:53:47,137] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,140] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,142] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,142] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,142] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,142] DEBUG - UpdateThread.update() : total 321, complete 277
[2010-01-25 00:53:47,142] DEBUG - UpdateThread.update() : update 1179663, type class Remover
[2010-01-25 00:53:47,142] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,143] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,144] DEBUG - XmlSerializer.save() : timing 41 at [extract]
[2010-01-25 00:53:47,144] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:47,144] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:47,145] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:47,145] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,145] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,145] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,145] DEBUG - UpdateThread.update() : total 321, complete 278
[2010-01-25 00:53:47,146] DEBUG - UpdateThread.update() : update 1212431, type class AddressBook
[2010-01-25 00:53:47,147] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,147] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:47,147] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:47,147] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,148] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,148] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,148] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,148] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,148] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:47,149] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:47,149] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:47,149] DEBUG - XmlSerializer.save() : timing 5 at [storeAll]
[2010-01-25 00:53:47,150] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,150] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,150] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,150] DEBUG - UpdateThread.update() : total 321, complete 279
[2010-01-25 00:53:47,150] DEBUG - UpdateThread.update() : update 1146911, type class Favorite
[2010-01-25 00:53:47,150] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:47,150] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,150] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736711]
[2010-01-25 00:53:47,151] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,151] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,153] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,153] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,153] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,153] DEBUG - UpdateThread.update() : total 321, complete 280
[2010-01-25 00:53:47,153] DEBUG - UpdateThread.update() : update 1146910, type class Favorite
[2010-01-25 00:53:47,153] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,154] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,155] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,155] DEBUG - UpdateCache.update() : update [class Address], id [1605653]
[2010-01-25 00:53:47,155] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,156] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,156] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,156] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,156] DEBUG - UpdateThread.update() : total 321, complete 281
[2010-01-25 00:53:47,156] DEBUG - UpdateThread.update() : update 1507330, type class MixedKids
[2010-01-25 00:53:47,156] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,156] DEBUG - UpdateCache.update() : update [class Statistics], id [1638407]
[2010-01-25 00:53:47,157] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,157] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,157] DEBUG - UpdateCache.update() : update [class Favorite], id [1671182]
[2010-01-25 00:53:47,158] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,158] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:47,158] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,159] DEBUG - UpdateCache.update() : update [class Favorite], id [1671183]
[2010-01-25 00:53:47,159] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,159] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,159] DEBUG - UpdateCache.update() : update [class Remover], id [1703943]
[2010-01-25 00:53:47,160] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,160] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,161] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736711]
[2010-01-25 00:53:47,161] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,164] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,165] DEBUG - UpdateCache.update() : update [class Address], id [1605653]
[2010-01-25 00:53:47,165] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,166] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,166] DEBUG - UpdateCache.update() : update [class Statistics], id [1638407]
[2010-01-25 00:53:47,166] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,167] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,167] DEBUG - UpdateCache.update() : update [class Favorite], id [1671182]
[2010-01-25 00:53:47,167] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,168] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,168] DEBUG - UpdateCache.update() : update [class Favorite], id [1671183]
[2010-01-25 00:53:47,168] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,169] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,169] DEBUG - UpdateCache.update() : update [class Remover], id [1703943]
[2010-01-25 00:53:47,169] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,170] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,170] DEBUG - XmlSerializer.save() : timing 20 at [cache]
[2010-01-25 00:53:47,171] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,173] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:47,183] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:53:47,183] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:53:47,190] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:47,190] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,190] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,190] DEBUG - UpdateThread.update() : total 321, complete 282
[2010-01-25 00:53:47,190] DEBUG - UpdateThread.update() : update 1474562, type class Interleave
[2010-01-25 00:53:47,190] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:53:47,192] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,193] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:53:47,193] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:53:47,193] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:53:47,195] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,195] DEBUG - XmlSerializer.save() : timing 25 at [save]
[2010-01-25 00:53:47,195] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:47,195] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,196] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,196] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,196] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,196] DEBUG - UpdateThread.update() : total 321, complete 283
[2010-01-25 00:53:47,196] DEBUG - UpdateThread.update() : update 1376262, type class KidOne
[2010-01-25 00:53:47,198] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,198] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,199] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,199] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,200] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:53:47,200] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:53:47,201] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,203] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,203] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,203] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,203] DEBUG - UpdateThread.update() : total 321, complete 284
[2010-01-25 00:53:47,203] DEBUG - UpdateThread.update() : update 1376263, type class KidOne
[2010-01-25 00:53:47,203] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,204] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,204] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,209] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:53:47,209] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:53:47,212] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,212] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,212] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,212] DEBUG - UpdateThread.update() : total 321, complete 285
[2010-01-25 00:53:47,212] DEBUG - UpdateThread.update() : update 1376264, type class KidOne
[2010-01-25 00:53:47,212] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,213] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,214] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,214] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:53:47,214] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:53:47,216] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,217] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,217] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,217] DEBUG - UpdateThread.update() : total 321, complete 286
[2010-01-25 00:53:47,217] DEBUG - UpdateThread.update() : update 1409026, type class KidTwo
[2010-01-25 00:53:47,217] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:47,218] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,219] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:47,220] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:53:47,220] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:53:47,225] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,225] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,225] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,225] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,225] DEBUG - UpdateThread.update() : total 321, complete 287
[2010-01-25 00:53:47,225] DEBUG - UpdateThread.update() : update 1441794, type class KidThree
[2010-01-25 00:53:47,226] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:53:47,226] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,227] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,228] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:53:47,228] DEBUG - UpdateCache.remove() : size before 68
[2010-01-25 00:53:47,228] DEBUG - UpdateCache.remove() : size after 68
[2010-01-25 00:53:47,229] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,230] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,234] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,234] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,234] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,234] DEBUG - UpdateThread.update() : total 321, complete 288
[2010-01-25 00:53:47,234] DEBUG - UpdateThread.update() : update 1507330, type class MixedKids
[2010-01-25 00:53:47,234] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,236] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,238] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,238] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,238] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,238] DEBUG - UpdateThread.update() : total 321, complete 289
[2010-01-25 00:53:47,238] DEBUG - UpdateThread.update() : update 1376262, type class KidOne
[2010-01-25 00:53:47,238] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,239] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,240] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,241] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,241] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,241] DEBUG - UpdateThread.update() : total 321, complete 290
[2010-01-25 00:53:47,241] DEBUG - UpdateThread.update() : update 1376263, type class KidOne
[2010-01-25 00:53:47,241] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,242] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,243] DEBUG - XmlSerializer.save() : timing 17 at [extract]
[2010-01-25 00:53:47,243] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:47,243] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:47,243] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,243] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,243] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,243] DEBUG - UpdateThread.update() : total 321, complete 291
[2010-01-25 00:53:47,244] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:47,244] DEBUG - UpdateThread.update() : update 1376264, type class KidOne
[2010-01-25 00:53:47,244] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,244] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,244] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:47,245] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [1638407]
[2010-01-25 00:53:47,245] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,245] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,245] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,245] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,245] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:47,246] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:47,246] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:47,246] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:53:47,247] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,247] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,247] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:47,247] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,247] DEBUG - UpdateThread.update() : total 321, complete 292
[2010-01-25 00:53:47,247] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736712]
[2010-01-25 00:53:47,247] DEBUG - UpdateThread.update() : update 1409026, type class KidTwo
[2010-01-25 00:53:47,247] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,247] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,251] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,253] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,253] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,253] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,253] DEBUG - UpdateThread.update() : total 321, complete 293
[2010-01-25 00:53:47,253] DEBUG - UpdateThread.update() : update 1441794, type class KidThree
[2010-01-25 00:53:47,254] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,254] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,254] DEBUG - UpdateCache.update() : update [class Address], id [1605654]
[2010-01-25 00:53:47,254] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,255] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,255] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,256] DEBUG - UpdateCache.update() : update [class Statistics], id [1638407]
[2010-01-25 00:53:47,256] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,256] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,256] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,256] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,256] DEBUG - UpdateThread.update() : total 321, complete 294
[2010-01-25 00:53:47,256] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,257] DEBUG - UpdateThread.update() : update 1507330, type class MixedKids
[2010-01-25 00:53:47,257] DEBUG - UpdateCache.update() : update [class Favorite], id [1671184]
[2010-01-25 00:53:47,257] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,257] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,258] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,259] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,259] DEBUG - UpdateCache.update() : update [class Favorite], id [1671185]
[2010-01-25 00:53:47,259] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,260] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,261] DEBUG - UpdateCache.update() : update [class Remover], id [1703944]
[2010-01-25 00:53:47,261] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,261] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,261] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,261] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,261] DEBUG - UpdateThread.update() : total 321, complete 295
[2010-01-25 00:53:47,261] DEBUG - UpdateThread.update() : update 1376262, type class KidOne
[2010-01-25 00:53:47,262] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,262] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,262] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736712]
[2010-01-25 00:53:47,262] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,263] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,264] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,264] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,264] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,264] DEBUG - UpdateThread.update() : total 321, complete 296
[2010-01-25 00:53:47,264] DEBUG - UpdateThread.update() : update 1409026, type class KidTwo
[2010-01-25 00:53:47,265] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,266] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,267] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,267] DEBUG - UpdateCache.update() : update [class Address], id [1605654]
[2010-01-25 00:53:47,267] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,267] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,267] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,267] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,267] DEBUG - UpdateThread.update() : total 321, complete 297
[2010-01-25 00:53:47,268] DEBUG - UpdateThread.update() : update 1212432, type class AddressBook
[2010-01-25 00:53:47,268] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,268] DEBUG - UpdateCache.update() : update [class Favorite], id [1671184]
[2010-01-25 00:53:47,268] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,269] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,269] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,269] DEBUG - UpdateCache.update() : update [class Favorite], id [1671185]
[2010-01-25 00:53:47,269] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,270] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,270] DEBUG - UpdateCache.update() : update [class Remover], id [1703944]
[2010-01-25 00:53:47,270] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,271] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,271] DEBUG - XmlSerializer.save() : timing 24 at [cache]
[2010-01-25 00:53:47,280] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,281] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,285] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:53:47,285] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:53:47,286] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:53:47,286] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:47,286] DEBUG - LockItem.unlock() : 4 remain
[2010-01-25 00:53:47,286] DEBUG - XmlSerializer.save() : timing 15 at [save]
[2010-01-25 00:53:47,286] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:47,289] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,291] DEBUG - LockItem.unlock() : 4 current
[2010-01-25 00:53:47,291] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,291] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,291] DEBUG - UpdateThread.update() : total 321, complete 298
[2010-01-25 00:53:47,291] DEBUG - UpdateThread.update() : update 1081374, type class Address
[2010-01-25 00:53:47,292] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,292] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,293] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,294] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,295] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,295] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,295] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,295] DEBUG - UpdateThread.update() : total 321, complete 299
[2010-01-25 00:53:47,295] DEBUG - UpdateThread.update() : update 1114127, type class Statistics
[2010-01-25 00:53:47,295] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,296] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,297] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,297] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:53:47,297] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:53:47,300] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,300] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,300] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,300] DEBUG - UpdateThread.update() : total 321, complete 300
[2010-01-25 00:53:47,300] DEBUG - UpdateThread.update() : update 1146912, type class Favorite
[2010-01-25 00:53:47,300] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,301] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,302] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,302] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:53:47,302] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:53:47,309] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,313] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,315] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,316] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,316] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,316] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,316] DEBUG - UpdateThread.update() : total 321, complete 301
[2010-01-25 00:53:47,316] DEBUG - UpdateThread.update() : update 1146913, type class Favorite
[2010-01-25 00:53:47,317] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,317] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,317] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,318] DEBUG - UpdateCache.remove() : size before 73
[2010-01-25 00:53:47,318] DEBUG - UpdateCache.remove() : size after 73
[2010-01-25 00:53:47,324] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,324] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,324] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,324] DEBUG - UpdateThread.update() : total 321, complete 302
[2010-01-25 00:53:47,325] DEBUG - UpdateThread.update() : update 1179664, type class Remover
[2010-01-25 00:53:47,326] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,327] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,328] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,328] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,328] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,328] DEBUG - UpdateThread.update() : total 321, complete 303
[2010-01-25 00:53:47,328] DEBUG - UpdateThread.update() : update 1212432, type class AddressBook
[2010-01-25 00:53:47,329] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,330] DEBUG - XmlSerializer.save() : timing 21 at [extract]
[2010-01-25 00:53:47,330] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:47,330] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:47,330] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,331] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:47,331] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,331] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:47,331] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:47,332] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,332] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,332] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,332] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:47,333] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:47,333] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:47,333] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:53:47,334] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:47,334] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736713]
[2010-01-25 00:53:47,334] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,334] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,334] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,334] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,334] DEBUG - UpdateThread.update() : total 321, complete 304
[2010-01-25 00:53:47,334] DEBUG - UpdateThread.update() : update 1081374, type class Address
[2010-01-25 00:53:47,335] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,337] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,338] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,338] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,338] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,338] DEBUG - UpdateThread.update() : total 321, complete 305
[2010-01-25 00:53:47,338] DEBUG - UpdateThread.update() : update 1114127, type class Statistics
[2010-01-25 00:53:47,339] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,339] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,339] DEBUG - UpdateCache.update() : update [class Address], id [1605655]
[2010-01-25 00:53:47,339] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,339] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,341] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,341] DEBUG - UpdateCache.update() : update [class Statistics], id [1638408]
[2010-01-25 00:53:47,341] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,341] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,341] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,341] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,341] DEBUG - UpdateThread.update() : total 321, complete 306
[2010-01-25 00:53:47,342] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,342] DEBUG - UpdateCache.update() : update [class Favorite], id [1671186]
[2010-01-25 00:53:47,342] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,342] DEBUG - UpdateThread.update() : update 1146912, type class Favorite
[2010-01-25 00:53:47,343] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,343] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,343] DEBUG - UpdateCache.update() : update [class Favorite], id [1671187]
[2010-01-25 00:53:47,343] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,343] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,345] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,345] DEBUG - UpdateCache.update() : update [class Remover], id [1703945]
[2010-01-25 00:53:47,345] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,346] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,346] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,346] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,346] DEBUG - UpdateThread.update() : total 321, complete 307
[2010-01-25 00:53:47,346] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,346] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736713]
[2010-01-25 00:53:47,346] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,346] DEBUG - UpdateThread.update() : update 1146913, type class Favorite
[2010-01-25 00:53:47,347] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,348] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,350] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,350] DEBUG - UpdateCache.update() : update [class Address], id [1605655]
[2010-01-25 00:53:47,350] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,350] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,350] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,350] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,350] DEBUG - UpdateThread.update() : total 321, complete 308
[2010-01-25 00:53:47,350] DEBUG - UpdateThread.update() : update 1179664, type class Remover
[2010-01-25 00:53:47,351] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,351] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,351] DEBUG - UpdateCache.update() : update [class Statistics], id [1638408]
[2010-01-25 00:53:47,351] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,352] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,352] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,352] DEBUG - UpdateCache.update() : update [class Favorite], id [1671186]
[2010-01-25 00:53:47,352] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,353] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,353] DEBUG - UpdateCache.update() : update [class Favorite], id [1671187]
[2010-01-25 00:53:47,353] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,353] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,353] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,353] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,353] DEBUG - UpdateThread.update() : total 321, complete 309
[2010-01-25 00:53:47,353] DEBUG - UpdateThread.update() : update 1212433, type class AddressBook
[2010-01-25 00:53:47,354] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,354] DEBUG - UpdateCache.update() : update [class Remover], id [1703945]
[2010-01-25 00:53:47,354] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,355] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,355] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,355] DEBUG - XmlSerializer.save() : timing 21 at [cache]
[2010-01-25 00:53:47,370] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,370] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:47,370] DEBUG - XmlSerializer.save() : timing 15 at [save]
[2010-01-25 00:53:47,370] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:47,370] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,370] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,374] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,375] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,376] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:53:47,376] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:53:47,382] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:47,382] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,383] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,383] DEBUG - UpdateThread.update() : total 321, complete 310
[2010-01-25 00:53:47,383] DEBUG - UpdateThread.update() : update 1081375, type class Address
[2010-01-25 00:53:47,384] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,385] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,385] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,387] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:53:47,387] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:53:47,390] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,390] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,390] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,390] DEBUG - UpdateThread.update() : total 321, complete 311
[2010-01-25 00:53:47,390] DEBUG - UpdateThread.update() : update 1114128, type class Statistics
[2010-01-25 00:53:47,390] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,391] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,391] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,392] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:53:47,392] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:53:47,403] DEBUG - XmlSerializer.copy() : AddressBook, id 1736713
[2010-01-25 00:53:47,403] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,403] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,403] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,403] DEBUG - UpdateThread.update() : total 321, complete 312
[2010-01-25 00:53:47,403] DEBUG - UpdateThread.update() : update 1146914, type class Favorite
[2010-01-25 00:53:47,404] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,404] DEBUG - XmlSerializer.copy() : timing 1 at [setup]
[2010-01-25 00:53:47,404] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,404] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,405] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,405] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:53:47,405] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:53:47,407] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,408] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,408] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,408] DEBUG - UpdateThread.update() : total 321, complete 313
[2010-01-25 00:53:47,408] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,408] DEBUG - UpdateThread.update() : update 1146915, type class Favorite
[2010-01-25 00:53:47,408] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,409] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,409] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,409] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,410] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:53:47,410] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:53:47,413] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,413] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,413] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,413] DEBUG - UpdateThread.update() : total 321, complete 314
[2010-01-25 00:53:47,413] DEBUG - UpdateThread.update() : update 1179665, type class Remover
[2010-01-25 00:53:47,414] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,414] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,415] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,415] DEBUG - UpdateCache.remove() : size before 79
[2010-01-25 00:53:47,415] DEBUG - UpdateCache.remove() : size after 79
[2010-01-25 00:53:47,418] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,418] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,418] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,418] DEBUG - UpdateThread.update() : total 321, complete 315
[2010-01-25 00:53:47,419] DEBUG - UpdateThread.update() : update 1212433, type class AddressBook
[2010-01-25 00:53:47,419] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,420] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,423] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,423] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,423] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,423] DEBUG - UpdateThread.update() : total 321, complete 316
[2010-01-25 00:53:47,423] DEBUG - UpdateThread.update() : update 1081375, type class Address
[2010-01-25 00:53:47,424] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,425] DEBUG - XmlSerializer.copy() : timing 21 at [extract]
[2010-01-25 00:53:47,426] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,429] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,429] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,429] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,429] DEBUG - UpdateThread.update() : total 321, complete 317
[2010-01-25 00:53:47,429] DEBUG - UpdateThread.update() : update 1114128, type class Statistics
[2010-01-25 00:53:47,430] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,430] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,432] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,432] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,432] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,432] DEBUG - UpdateThread.update() : total 321, complete 318
[2010-01-25 00:53:47,432] DEBUG - UpdateThread.update() : update 1146914, type class Favorite
[2010-01-25 00:53:47,436] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,438] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,439] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,439] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,439] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,439] DEBUG - UpdateThread.update() : total 321, complete 319
[2010-01-25 00:53:47,440] DEBUG - UpdateThread.update() : update 1146915, type class Favorite
[2010-01-25 00:53:47,440] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,441] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,443] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,443] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,443] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,443] DEBUG - UpdateThread.update() : total 321, complete 320
[2010-01-25 00:53:47,443] DEBUG - UpdateThread.update() : update 1179665, type class Remover
[2010-01-25 00:53:47,443] DEBUG - XmlSerializer._serialize() : add [cache]
[2010-01-25 00:53:47,444] DEBUG - LockItem.lock() : lock on pool-1-thread-1
[2010-01-25 00:53:47,446] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:47,446] DEBUG - LockItem.unlock() : unlocked on pool-1-thread-1
[2010-01-25 00:53:47,446] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:47,446] DEBUG - UpdateThread.update() : total 321, complete 321
[2010-01-25 00:53:47,446] DEBUG - UpdateThread.update() : finish
[2010-01-25 00:53:47,456] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:47,457] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,457] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:47,457] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:47,457] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,458] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,458] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,458] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:47,458] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:47,458] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:47,458] DEBUG - XmlSerializer.copy() : timing 33 at [save]
[2010-01-25 00:53:47,463] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736714]
[2010-01-25 00:53:47,463] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,467] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,467] DEBUG - UpdateCache.update() : update [class Address], id [1605656]
[2010-01-25 00:53:47,467] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,469] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,469] DEBUG - UpdateCache.update() : update [class Statistics], id [1638409]
[2010-01-25 00:53:47,469] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,469] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,469] DEBUG - UpdateCache.update() : update [class Favorite], id [1671188]
[2010-01-25 00:53:47,470] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,470] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,470] DEBUG - UpdateCache.update() : update [class Favorite], id [1671189]
[2010-01-25 00:53:47,470] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,471] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,471] DEBUG - UpdateCache.update() : update [class Remover], id [1703946]
[2010-01-25 00:53:47,471] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,472] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,472] DEBUG - XmlSerializer.copy() : timing 14 at [update]
[2010-01-25 00:53:47,485] DEBUG - XmlSerializer.copy() : timing 13 at [finish]
[2010-01-25 00:53:47,485] DEBUG - XmlSerializer.copy() : timing ================
[2010-01-25 00:53:47,485] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,488] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,489] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,507] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,537] DEBUG - XmlSerializer.save() : timing 30 at [extract]
[2010-01-25 00:53:47,537] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:47,537] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:47,544] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1900544]
[2010-01-25 00:53:47,544] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1900545]
[2010-01-25 00:53:47,545] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1900546]
[2010-01-25 00:53:47,545] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,545] DEBUG - XmlSerializer().storeAll() : new [1900544, 1900545, 1900546]
[2010-01-25 00:53:47,546] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [1933312]
[2010-01-25 00:53:47,546] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,546] DEBUG - XmlSerializer().storeAll() : new [1933312]
[2010-01-25 00:53:47,547] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [1966080]
[2010-01-25 00:53:47,547] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,547] DEBUG - XmlSerializer().storeAll() : new [1966080]
[2010-01-25 00:53:47,547] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-25 00:53:47,554] DEBUG - XmlSerializer.save() : timing 17 at [storeAll]
[2010-01-25 00:53:47,555] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:47,556] DEBUG - UpdateCache.update() : update [class MixedKids], id [2031616]
[2010-01-25 00:53:47,556] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:47,559] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,559] DEBUG - UpdateCache.update() : update [class Interleave], id [1998848]
[2010-01-25 00:53:47,559] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:53:47,560] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,560] DEBUG - UpdateCache.update() : update [class KidOne], id [1900544]
[2010-01-25 00:53:47,560] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,561] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,561] DEBUG - UpdateCache.update() : update [class KidOne], id [1900545]
[2010-01-25 00:53:47,561] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,562] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,562] DEBUG - UpdateCache.update() : update [class KidOne], id [1900546]
[2010-01-25 00:53:47,562] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,562] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,562] DEBUG - UpdateCache.update() : update [class KidTwo], id [1933312]
[2010-01-25 00:53:47,562] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:47,563] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,563] DEBUG - UpdateCache.update() : update [class KidThree], id [1966080]
[2010-01-25 00:53:47,563] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:53:47,564] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,564] DEBUG - UpdateCache.update() : update [class MixedKids], id [2031616]
[2010-01-25 00:53:47,564] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:47,567] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,567] DEBUG - UpdateCache.update() : update [class KidOne], id [1900544]
[2010-01-25 00:53:47,567] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,568] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,568] DEBUG - UpdateCache.update() : update [class KidOne], id [1900545]
[2010-01-25 00:53:47,568] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,569] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,569] DEBUG - UpdateCache.update() : update [class KidOne], id [1900546]
[2010-01-25 00:53:47,569] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,570] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,570] DEBUG - UpdateCache.update() : update [class KidTwo], id [1933312]
[2010-01-25 00:53:47,570] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:47,571] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,571] DEBUG - UpdateCache.update() : update [class KidThree], id [1966080]
[2010-01-25 00:53:47,571] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:53:47,573] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,573] DEBUG - XmlSerializer.save() : timing 18 at [cache]
[2010-01-25 00:53:47,639] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:47,639] DEBUG - XmlSerializer.save() : timing 66 at [save]
[2010-01-25 00:53:47,639] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:47,639] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,652] DEBUG - XmlSerializer.copy() : MixedKids, id 2031616
[2010-01-25 00:53:47,652] DEBUG - XmlSerializer.copy() : timing 0 at [setup]
[2010-01-25 00:53:47,653] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,670] DEBUG - XmlSerializer.copy() : timing 17 at [extract]
[2010-01-25 00:53:47,699] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1900547]
[2010-01-25 00:53:47,699] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1900548]
[2010-01-25 00:53:47,699] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1900549]
[2010-01-25 00:53:47,699] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,699] DEBUG - XmlSerializer().storeAll() : new [1900547, 1900548, 1900549]
[2010-01-25 00:53:47,699] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [1933313]
[2010-01-25 00:53:47,699] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,699] DEBUG - XmlSerializer().storeAll() : new [1933313]
[2010-01-25 00:53:47,700] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [1966081]
[2010-01-25 00:53:47,700] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,700] DEBUG - XmlSerializer().storeAll() : new [1966081]
[2010-01-25 00:53:47,700] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-25 00:53:47,702] DEBUG - XmlSerializer.copy() : timing 33 at [save]
[2010-01-25 00:53:47,703] DEBUG - UpdateCache.update() : update [class MixedKids], id [2031617]
[2010-01-25 00:53:47,703] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:47,706] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,706] DEBUG - UpdateCache.update() : update [class Interleave], id [1998849]
[2010-01-25 00:53:47,707] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:53:47,708] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,708] DEBUG - UpdateCache.update() : update [class KidOne], id [1900547]
[2010-01-25 00:53:47,708] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,709] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,709] DEBUG - UpdateCache.update() : update [class KidOne], id [1900548]
[2010-01-25 00:53:47,709] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,709] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,710] DEBUG - UpdateCache.update() : update [class KidOne], id [1900549]
[2010-01-25 00:53:47,710] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:47,710] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,711] DEBUG - UpdateCache.update() : update [class KidTwo], id [1933313]
[2010-01-25 00:53:47,711] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:47,711] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,711] DEBUG - UpdateCache.update() : update [class KidThree], id [1966081]
[2010-01-25 00:53:47,712] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:53:47,712] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,712] DEBUG - XmlSerializer.copy() : timing 10 at [update]
[2010-01-25 00:53:47,722] DEBUG - XmlSerializer.copy() : timing 10 at [finish]
[2010-01-25 00:53:47,722] DEBUG - XmlSerializer.copy() : timing ================
[2010-01-25 00:53:47,723] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,741] DEBUG - XmlSerializer.sqlLoad() : query [query.multi.by.id]
[2010-01-25 00:53:47,741] DEBUG - XmlSerializer.sqlLoad() : sql [from MixedKids where id = ?]
[2010-01-25 00:53:47,753] DEBUG - XmlSerializer.sqlLoad() : timing 9 at [query]
[2010-01-25 00:53:47,846] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,849] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,851] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,862] DEBUG - XmlSerializer.save() : timing 16 at [extract]
[2010-01-25 00:53:47,862] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:47,863] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-25 00:53:47,863] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:47,864] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,864] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:47,864] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:47,864] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,865] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,865] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,865] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:47,865] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:47,865] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:47,866] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:53:47,866] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:53:47,866] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736715]
[2010-01-25 00:53:47,867] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,870] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,870] DEBUG - UpdateCache.update() : update [class Address], id [1605657]
[2010-01-25 00:53:47,870] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,871] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,871] DEBUG - UpdateCache.update() : update [class Statistics], id [1638410]
[2010-01-25 00:53:47,871] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,873] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,873] DEBUG - UpdateCache.update() : update [class Favorite], id [1671190]
[2010-01-25 00:53:47,873] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,874] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,874] DEBUG - UpdateCache.update() : update [class Favorite], id [1671191]
[2010-01-25 00:53:47,874] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,875] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,875] DEBUG - UpdateCache.update() : update [class Remover], id [1703947]
[2010-01-25 00:53:47,875] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,875] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,876] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736715]
[2010-01-25 00:53:47,876] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:47,879] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,879] DEBUG - UpdateCache.update() : update [class Address], id [1605657]
[2010-01-25 00:53:47,879] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:47,880] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,880] DEBUG - UpdateCache.update() : update [class Statistics], id [1638410]
[2010-01-25 00:53:47,880] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:47,881] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,881] DEBUG - UpdateCache.update() : update [class Favorite], id [1671190]
[2010-01-25 00:53:47,881] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,882] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,882] DEBUG - UpdateCache.update() : update [class Favorite], id [1671191]
[2010-01-25 00:53:47,882] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:47,882] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,882] DEBUG - UpdateCache.update() : update [class Remover], id [1703947]
[2010-01-25 00:53:47,883] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:47,883] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:47,883] DEBUG - XmlSerializer.save() : timing 17 at [cache]
[2010-01-25 00:53:47,905] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:47,905] DEBUG - XmlSerializer.save() : timing 22 at [save]
[2010-01-25 00:53:47,905] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:47,906] DEBUG - XmlSerializer.sqlLoad() : query [query.all.entries]
[2010-01-25 00:53:47,907] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook]
[2010-01-25 00:53:47,949] DEBUG - XmlSerializer.sqlLoad() : timing 41 at [query]
[2010-01-25 00:53:47,978] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:47,981] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,982] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:47,991] DEBUG - XmlSerializer.save() : timing 13 at [extract]
[2010-01-25 00:53:47,991] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:47,992] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-25 00:53:47,992] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:47,993] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,993] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:47,993] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:47,993] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,994] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:47,994] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:47,994] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:47,994] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:47,994] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:47,995] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:53:47,996] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:47,996] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736716]
[2010-01-25 00:53:47,996] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:48,007] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,007] DEBUG - UpdateCache.update() : update [class Address], id [1605658]
[2010-01-25 00:53:48,007] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:48,009] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,009] DEBUG - UpdateCache.update() : update [class Statistics], id [1638411]
[2010-01-25 00:53:48,009] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:48,010] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,010] DEBUG - UpdateCache.update() : update [class Favorite], id [1671192]
[2010-01-25 00:53:48,010] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,011] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,011] DEBUG - UpdateCache.update() : update [class Favorite], id [1671193]
[2010-01-25 00:53:48,011] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,011] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,011] DEBUG - UpdateCache.update() : update [class Remover], id [1703948]
[2010-01-25 00:53:48,011] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:48,012] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,012] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736716]
[2010-01-25 00:53:48,012] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:48,015] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,015] DEBUG - UpdateCache.update() : update [class Address], id [1605658]
[2010-01-25 00:53:48,015] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:48,017] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,017] DEBUG - UpdateCache.update() : update [class Statistics], id [1638411]
[2010-01-25 00:53:48,017] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:48,017] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,017] DEBUG - UpdateCache.update() : update [class Favorite], id [1671192]
[2010-01-25 00:53:48,017] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,019] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,019] DEBUG - UpdateCache.update() : update [class Favorite], id [1671193]
[2010-01-25 00:53:48,019] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,019] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,019] DEBUG - UpdateCache.update() : update [class Remover], id [1703948]
[2010-01-25 00:53:48,019] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:48,020] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,020] DEBUG - XmlSerializer.save() : timing 24 at [cache]
[2010-01-25 00:53:48,032] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:48,032] DEBUG - XmlSerializer.save() : timing 12 at [save]
[2010-01-25 00:53:48,032] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:48,032] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:48,036] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,039] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,054] DEBUG - XmlSerializer.sqlLoad() : query [query.native.by.id]
[2010-01-25 00:53:48,054] DEBUG - XmlSerializer.sqlLoad() : sql [select {address_book.*} from address_book where id = ?]
[2010-01-25 00:53:48,102] DEBUG - XmlSerializer.sqlLoad() : timing 39 at [query]
[2010-01-25 00:53:48,104] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:48,106] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,108] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,120] DEBUG - XmlSerializer.save() : timing 17 at [extract]
[2010-01-25 00:53:48,120] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:48,120] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:48,121] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:48,121] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:48,121] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:48,121] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:48,122] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:48,122] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:48,122] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:48,122] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:48,122] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:48,123] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:48,123] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:53:48,124] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:48,124] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736717]
[2010-01-25 00:53:48,124] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:48,127] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,127] DEBUG - UpdateCache.update() : update [class Address], id [1605659]
[2010-01-25 00:53:48,127] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:48,129] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,129] DEBUG - UpdateCache.update() : update [class Statistics], id [1638412]
[2010-01-25 00:53:48,129] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:48,129] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,129] DEBUG - UpdateCache.update() : update [class Favorite], id [1671194]
[2010-01-25 00:53:48,129] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,130] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,130] DEBUG - UpdateCache.update() : update [class Favorite], id [1671195]
[2010-01-25 00:53:48,130] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,131] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,131] DEBUG - UpdateCache.update() : update [class Remover], id [1703949]
[2010-01-25 00:53:48,131] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:48,132] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,132] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736717]
[2010-01-25 00:53:48,132] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:48,135] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,135] DEBUG - UpdateCache.update() : update [class Address], id [1605659]
[2010-01-25 00:53:48,135] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:48,136] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,136] DEBUG - UpdateCache.update() : update [class Statistics], id [1638412]
[2010-01-25 00:53:48,136] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:48,137] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,137] DEBUG - UpdateCache.update() : update [class Favorite], id [1671194]
[2010-01-25 00:53:48,137] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,138] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,138] DEBUG - UpdateCache.update() : update [class Favorite], id [1671195]
[2010-01-25 00:53:48,138] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,139] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,139] DEBUG - UpdateCache.update() : update [class Remover], id [1703949]
[2010-01-25 00:53:48,139] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:48,140] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,140] DEBUG - XmlSerializer.save() : timing 16 at [cache]
[2010-01-25 00:53:48,152] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:48,152] DEBUG - XmlSerializer.save() : timing 12 at [save]
[2010-01-25 00:53:48,152] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:48,153] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:48,158] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,159] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,172] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:53:48,173] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:53:48,176] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-25 00:53:48,178] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:48,181] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,183] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,194] DEBUG - XmlSerializer.save() : timing 16 at [extract]
[2010-01-25 00:53:48,195] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:53:48,195] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:48,195] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:48,196] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:48,196] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:48,196] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:48,197] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:48,197] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:48,197] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:48,197] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:48,197] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:48,197] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:48,198] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:53:48,198] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:53:48,198] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736718]
[2010-01-25 00:53:48,198] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:48,202] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,202] DEBUG - UpdateCache.update() : update [class Address], id [1605660]
[2010-01-25 00:53:48,202] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:48,203] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,203] DEBUG - UpdateCache.update() : update [class Statistics], id [1638413]
[2010-01-25 00:53:48,203] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:48,204] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,204] DEBUG - UpdateCache.update() : update [class Favorite], id [1671196]
[2010-01-25 00:53:48,204] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,205] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,205] DEBUG - UpdateCache.update() : update [class Favorite], id [1671197]
[2010-01-25 00:53:48,205] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,206] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,206] DEBUG - UpdateCache.update() : update [class Remover], id [1703950]
[2010-01-25 00:53:48,206] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:48,206] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,206] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736718]
[2010-01-25 00:53:48,207] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:48,213] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,213] DEBUG - UpdateCache.update() : update [class Address], id [1605660]
[2010-01-25 00:53:48,213] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:48,214] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,214] DEBUG - UpdateCache.update() : update [class Statistics], id [1638413]
[2010-01-25 00:53:48,214] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:48,215] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,215] DEBUG - UpdateCache.update() : update [class Favorite], id [1671196]
[2010-01-25 00:53:48,215] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,216] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,216] DEBUG - UpdateCache.update() : update [class Favorite], id [1671197]
[2010-01-25 00:53:48,216] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,216] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,217] DEBUG - UpdateCache.update() : update [class Remover], id [1703950]
[2010-01-25 00:53:48,217] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:48,217] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,217] DEBUG - XmlSerializer.save() : timing 19 at [cache]
[2010-01-25 00:53:48,228] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:48,228] DEBUG - XmlSerializer.save() : timing 11 at [save]
[2010-01-25 00:53:48,228] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:48,228] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:48,232] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,233] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,247] DEBUG - XmlSerializer.sqlLoad() : query [query.multiple]
[2010-01-25 00:53:48,247] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ? or id in (:ids)]
[2010-01-25 00:53:48,277] DEBUG - XmlSerializer.sqlLoad() : timing 12 at [query]
[2010-01-25 00:53:48,279] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:48,282] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,283] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,298] DEBUG - XmlSerializer.save() : timing 19 at [extract]
[2010-01-25 00:53:48,298] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:48,298] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:48,299] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:48,300] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:48,300] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:48,300] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:48,300] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:48,301] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:48,301] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:48,301] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:48,301] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:48,302] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:48,303] DEBUG - XmlSerializer.save() : timing 5 at [storeAll]
[2010-01-25 00:53:48,303] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:53:48,303] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736719]
[2010-01-25 00:53:48,303] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:48,307] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,307] DEBUG - UpdateCache.update() : update [class Address], id [1605661]
[2010-01-25 00:53:48,307] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:48,308] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,308] DEBUG - UpdateCache.update() : update [class Statistics], id [1638414]
[2010-01-25 00:53:48,308] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:48,309] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,309] DEBUG - UpdateCache.update() : update [class Favorite], id [1671198]
[2010-01-25 00:53:48,309] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,310] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,310] DEBUG - UpdateCache.update() : update [class Favorite], id [1671199]
[2010-01-25 00:53:48,310] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,310] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,311] DEBUG - UpdateCache.update() : update [class Remover], id [1703951]
[2010-01-25 00:53:48,311] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:48,311] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,311] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736719]
[2010-01-25 00:53:48,311] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:48,315] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,315] DEBUG - UpdateCache.update() : update [class Address], id [1605661]
[2010-01-25 00:53:48,315] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:48,317] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,317] DEBUG - UpdateCache.update() : update [class Statistics], id [1638414]
[2010-01-25 00:53:48,317] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:48,317] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,317] DEBUG - UpdateCache.update() : update [class Favorite], id [1671198]
[2010-01-25 00:53:48,317] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,318] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,318] DEBUG - UpdateCache.update() : update [class Favorite], id [1671199]
[2010-01-25 00:53:48,318] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:48,319] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,319] DEBUG - UpdateCache.update() : update [class Remover], id [1703951]
[2010-01-25 00:53:48,319] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:48,320] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:48,320] DEBUG - XmlSerializer.save() : timing 17 at [cache]
[2010-01-25 00:53:48,332] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:48,332] DEBUG - XmlSerializer.save() : timing 12 at [save]
[2010-01-25 00:53:48,332] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:48,332] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:48,340] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:48,342] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,355] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:49,360] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:49,363] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,365] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,379] DEBUG - XmlSerializer.save() : timing 19 at [extract]
[2010-01-25 00:53:49,379] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:49,379] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:49,380] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:49,388] DEBUG - XmlCompare.next(): hit  <favorite user-id="25" id="1671198"> vs.  <favorite user-id="30" id="1671199">
[2010-01-25 00:53:49,391] DEBUG - XmlCompare.next(): hit   <name>gary</name> vs.   <name>jerryg</name>
[2010-01-25 00:53:49,392] DEBUG - XmlCompare.next(): hit  <favorite user-id="30" id="1671199"> vs.  <favorite user-id="25" id="1671198">
[2010-01-25 00:53:49,392] DEBUG - XmlCompare.next(): hit   <name>joe</name> vs.   <name>gary</name>
[2010-01-25 00:53:49,393] DEBUG - XmlCompare.compare() : [[1736719:address-book, 1671198:favorite, 1671199:favorite]]
[2010-01-25 00:53:49,393] DEBUG - XmlSerializer.save() : timing 14 at [changed]
[2010-01-25 00:53:49,395] DEBUG - XmlSerializer().storeAll() : old [1605661]
[2010-01-25 00:53:49,395] DEBUG - XmlSerializer().storeAll() : new [1605661]
[2010-01-25 00:53:49,396] DEBUG - XmlSerializer().storeAll() : update timestamp on class Favorite for field name. New Val [jerryg], old [joe]
[2010-01-25 00:53:49,396] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [1671199]
[2010-01-25 00:53:49,398] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [1671198]
[2010-01-25 00:53:49,398] DEBUG - XmlSerializer().storeAll() : old [1671198, 1671199]
[2010-01-25 00:53:49,398] DEBUG - XmlSerializer().storeAll() : new [1671199, 1671198]
[2010-01-25 00:53:49,398] DEBUG - XmlSerializer().storeAll() : update timestamp on class AddressBook for field favorite. New Val [[Favorite : 1671199, Favorite : 1671198]], old [[Favorite : 1671199, Favorite : 1671198]]
[2010-01-25 00:53:49,399] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [1736719]
[2010-01-25 00:53:49,399] DEBUG - XmlSerializer.save() : timing 6 at [storeAll]
[2010-01-25 00:53:49,400] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:49,400] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736719]
[2010-01-25 00:53:49,400] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:49,403] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,403] DEBUG - UpdateCache.update() : update [class Favorite], id [1671199]
[2010-01-25 00:53:49,403] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:49,404] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,404] DEBUG - UpdateCache.update() : update [class Favorite], id [1671198]
[2010-01-25 00:53:49,404] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:49,405] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,405] DEBUG - XmlSerializer.save() : timing 5 at [cache]
[2010-01-25 00:53:49,420] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:49,421] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:49,421] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:49,421] DEBUG - XmlSerializer.save() : timing 16 at [save]
[2010-01-25 00:53:49,421] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:49,421] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:53:49,421] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:53:49,425] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-25 00:53:49,426] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:49,428] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,429] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,443] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:49,456] DEBUG - XmlSerializer.save() : timing 13 at [extract]
[2010-01-25 00:53:49,456] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:49,456] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:49,457] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1900550]
[2010-01-25 00:53:49,457] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1900551]
[2010-01-25 00:53:49,457] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1900552]
[2010-01-25 00:53:49,457] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:49,457] DEBUG - XmlSerializer().storeAll() : new [1900550, 1900551, 1900552]
[2010-01-25 00:53:49,457] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [1933314]
[2010-01-25 00:53:49,457] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:49,457] DEBUG - XmlSerializer().storeAll() : new [1933314]
[2010-01-25 00:53:49,458] DEBUG - XmlSerializer().storeAll() :  save [KidThree], id [1966082]
[2010-01-25 00:53:49,458] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:49,458] DEBUG - XmlSerializer().storeAll() : new [1966082]
[2010-01-25 00:53:49,458] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [null]
[2010-01-25 00:53:49,459] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:53:49,459] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:53:49,460] DEBUG - UpdateCache.update() : update [class MixedKids], id [2031618]
[2010-01-25 00:53:49,460] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:49,463] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,463] DEBUG - UpdateCache.update() : update [class Interleave], id [1998850]
[2010-01-25 00:53:49,463] DEBUG - XmlSerializer._serialize() : add [interleave]
[2010-01-25 00:53:49,464] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,464] DEBUG - UpdateCache.update() : update [class KidOne], id [1900550]
[2010-01-25 00:53:49,464] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:49,465] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,465] DEBUG - UpdateCache.update() : update [class KidOne], id [1900551]
[2010-01-25 00:53:49,465] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:49,466] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,466] DEBUG - UpdateCache.update() : update [class KidOne], id [1900552]
[2010-01-25 00:53:49,466] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:49,466] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,466] DEBUG - UpdateCache.update() : update [class KidTwo], id [1933314]
[2010-01-25 00:53:49,466] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:49,467] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,467] DEBUG - UpdateCache.update() : update [class KidThree], id [1966082]
[2010-01-25 00:53:49,467] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:53:49,468] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,468] DEBUG - UpdateCache.update() : update [class MixedKids], id [2031618]
[2010-01-25 00:53:49,468] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:49,472] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,472] DEBUG - UpdateCache.update() : update [class KidOne], id [1900550]
[2010-01-25 00:53:49,472] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:49,473] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,473] DEBUG - UpdateCache.update() : update [class KidOne], id [1900551]
[2010-01-25 00:53:49,473] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:49,474] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,474] DEBUG - UpdateCache.update() : update [class KidOne], id [1900552]
[2010-01-25 00:53:49,475] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:49,475] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,475] DEBUG - UpdateCache.update() : update [class KidTwo], id [1933314]
[2010-01-25 00:53:49,475] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:49,476] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,476] DEBUG - UpdateCache.update() : update [class KidThree], id [1966082]
[2010-01-25 00:53:49,476] DEBUG - XmlSerializer._serialize() : add [kid-three]
[2010-01-25 00:53:49,477] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,477] DEBUG - XmlSerializer.save() : timing 18 at [cache]
[2010-01-25 00:53:49,491] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:49,491] DEBUG - XmlSerializer.save() : timing 14 at [save]
[2010-01-25 00:53:49,491] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:49,491] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:49,502] DEBUG - XmlSerializer.sqlLoad() : query [query.multi.by.id]
[2010-01-25 00:53:49,502] DEBUG - XmlSerializer.sqlLoad() : sql [from MixedKids where id = ?]
[2010-01-25 00:53:49,505] DEBUG - XmlSerializer.sqlLoad() : timing 1 at [query]
[2010-01-25 00:53:49,647] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:49,660] DEBUG - XmlSerializer.save() : timing 14 at [extract]
[2010-01-25 00:53:49,660] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:49,661] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:53:49,661] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:49,665] DEBUG - XmlCompare.next(): hit  <kid-one id="1900550"> vs.  <kid-two id="1933314">
[2010-01-25 00:53:49,665] DEBUG - XmlCompare.next(): hit   <title>kid1-1</title> vs.   <title>kid2-1</title>
[2010-01-25 00:53:49,665] DEBUG - XmlCompare.next(): hit  </kid-one> vs.  </kid-two>
[2010-01-25 00:53:49,666] DEBUG - XmlCompare.next(): hit  <kid-two id="1933314"> vs.  <kid-one id="1900550">
[2010-01-25 00:53:49,666] DEBUG - XmlCompare.next(): hit   <title>kid2-1</title> vs.   <title>kid1-1</title>
[2010-01-25 00:53:49,666] DEBUG - XmlCompare.next(): hit  </kid-two> vs.  </kid-one>
[2010-01-25 00:53:49,668] DEBUG - XmlCompare.compare() : [[1900550:kid-one, 1933314:kid-two, 2031618:mixed-kids]]
[2010-01-25 00:53:49,668] DEBUG - XmlSerializer.save() : timing 7 at [changed]
[2010-01-25 00:53:49,669] DEBUG - XmlSerializer().storeAll() :  save [KidOne], id [1900550]
[2010-01-25 00:53:49,672] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:49,672] DEBUG - XmlSerializer().storeAll() : new [1900550, 1900551, 1900552]
[2010-01-25 00:53:49,672] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidOne. New Val [[KidOne : 1900550, KidOne : 1900551, KidOne : 1900552]], old [[KidOne : 1900550, KidOne : 1900551, KidOne : 1900552]]
[2010-01-25 00:53:49,675] DEBUG - XmlSerializer().storeAll() :  save [KidTwo], id [1933314]
[2010-01-25 00:53:49,675] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:49,675] DEBUG - XmlSerializer().storeAll() : new [1933314]
[2010-01-25 00:53:49,676] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidTwo. New Val [[KidTwo : 1933314]], old [[KidTwo : 1933314]]
[2010-01-25 00:53:49,676] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:49,676] DEBUG - XmlSerializer().storeAll() : new [1966082]
[2010-01-25 00:53:49,677] DEBUG - XmlSerializer().storeAll() : update timestamp on class MixedKids for field kidThree. New Val [[KidThree : 1966082]], old [[KidThree : 1966082]]
[2010-01-25 00:53:49,677] DEBUG - XmlSerializer().storeAll() :  save [MixedKids], id [2031618]
[2010-01-25 00:53:49,678] DEBUG - XmlSerializer.orderchange() : go [title:3556498,kidOne:-2045852186,kidTwo:-2045814328,kidOne:-2045852185,kidOne:-2045852184,kidThree:-788937062,] vs [title:3556498,kidTwo:-2045814328,kidOne:-2045852186,kidOne:-2045852185,kidOne:-2045852184,kidThree:-788937062,]
[2010-01-25 00:53:49,679] DEBUG - XmlSerializer.save() : timing 11 at [storeAll]
[2010-01-25 00:53:49,681] DEBUG - XmlSerializer.save() : timing 2 at [findupdate]
[2010-01-25 00:53:49,681] DEBUG - UpdateCache.update() : update [class MixedKids], id [2031618]
[2010-01-25 00:53:49,681] DEBUG - XmlSerializer._serialize() : add [mixed-kids]
[2010-01-25 00:53:49,690] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,690] DEBUG - UpdateCache.update() : update [class KidOne], id [1900550]
[2010-01-25 00:53:49,690] DEBUG - XmlSerializer._serialize() : add [kid-one]
[2010-01-25 00:53:49,691] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,691] DEBUG - UpdateCache.update() : update [class KidTwo], id [1933314]
[2010-01-25 00:53:49,691] DEBUG - XmlSerializer._serialize() : add [kid-two]
[2010-01-25 00:53:49,691] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,691] DEBUG - XmlSerializer.save() : timing 10 at [cache]
[2010-01-25 00:53:49,719] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:49,719] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:49,719] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:49,719] DEBUG - XmlSerializer.save() : timing 28 at [save]
[2010-01-25 00:53:49,719] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:49,746] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:49,751] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,752] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,767] DEBUG - XmlSerializer.save() : timing 21 at [extract]
[2010-01-25 00:53:49,767] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:49,767] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:49,769] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:49,769] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:49,769] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:49,770] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:49,771] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:49,771] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:49,771] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:49,771] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:49,771] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:49,772] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:49,772] DEBUG - XmlSerializer.save() : timing 5 at [storeAll]
[2010-01-25 00:53:49,772] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:53:49,773] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736720]
[2010-01-25 00:53:49,773] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:49,776] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,776] DEBUG - UpdateCache.update() : update [class Address], id [1605662]
[2010-01-25 00:53:49,776] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:49,777] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,777] DEBUG - UpdateCache.update() : update [class Statistics], id [1638415]
[2010-01-25 00:53:49,777] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:49,778] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,778] DEBUG - UpdateCache.update() : update [class Favorite], id [1671200]
[2010-01-25 00:53:49,778] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:49,779] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,779] DEBUG - UpdateCache.update() : update [class Favorite], id [1671201]
[2010-01-25 00:53:49,779] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:49,779] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,779] DEBUG - UpdateCache.update() : update [class Remover], id [1703952]
[2010-01-25 00:53:49,779] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:49,780] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,780] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736720]
[2010-01-25 00:53:49,780] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:49,783] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,783] DEBUG - UpdateCache.update() : update [class Address], id [1605662]
[2010-01-25 00:53:49,784] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:49,785] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,785] DEBUG - UpdateCache.update() : update [class Statistics], id [1638415]
[2010-01-25 00:53:49,785] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:49,785] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,785] DEBUG - UpdateCache.update() : update [class Favorite], id [1671200]
[2010-01-25 00:53:49,785] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:49,786] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,786] DEBUG - UpdateCache.update() : update [class Favorite], id [1671201]
[2010-01-25 00:53:49,786] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:49,787] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,787] DEBUG - UpdateCache.update() : update [class Remover], id [1703952]
[2010-01-25 00:53:49,787] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:49,788] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,788] DEBUG - XmlSerializer.save() : timing 16 at [cache]
[2010-01-25 00:53:49,805] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:49,805] DEBUG - XmlSerializer.save() : timing 17 at [save]
[2010-01-25 00:53:49,805] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:49,806] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:49,809] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,810] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,828] DEBUG - XmlSerializer.remove() : Address, id 1605662
[2010-01-25 00:53:49,829] DEBUG - UpdateCache.updateCache() : process [select parent from AddressBook parent join parent.address as address where address.id = 1605662]
[2010-01-25 00:53:49,902] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736720]
[2010-01-25 00:53:49,902] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:49,906] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,906] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:53:49,906] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:53:49,913] DEBUG - XmlSerializer.sqlLoad() : timing 4 at [query]
[2010-01-25 00:53:49,914] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:49,917] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,919] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,931] DEBUG - XmlSerializer.remove() : Remover, id 1703952
[2010-01-25 00:53:49,931] DEBUG - UpdateCache.updateCache() : process [select parent from AddressBook parent join parent.remover as remover where remover.id = 1703952]
[2010-01-25 00:53:49,972] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736720]
[2010-01-25 00:53:49,972] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:49,976] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:49,977] DEBUG - XmlSerializer.sqlLoad() : query [query.by.id]
[2010-01-25 00:53:49,977] DEBUG - XmlSerializer.sqlLoad() : sql [from AddressBook where id = ?]
[2010-01-25 00:53:49,983] DEBUG - XmlSerializer.sqlLoad() : timing 2 at [query]
[2010-01-25 00:53:49,984] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:49,987] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,988] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:49,998] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,001] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:50,003] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:50,034] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,036] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:50,038] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:50,049] DEBUG - XmlSerializer.save() : timing 16 at [extract]
[2010-01-25 00:53:50,050] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:53:50,050] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:50,050] DEBUG - XmlSerializer().storeAll() :  save [Address], id [null]
[2010-01-25 00:53:50,051] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:50,051] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:50,051] DEBUG - XmlSerializer().storeAll() :  save [Statistics], id [null]
[2010-01-25 00:53:50,052] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:50,052] DEBUG - XmlSerializer().storeAll() :  save [Favorite], id [null]
[2010-01-25 00:53:50,052] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:50,052] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:50,052] DEBUG - XmlSerializer().storeAll() :  save [Remover], id [null]
[2010-01-25 00:53:50,052] DEBUG - XmlSerializer().storeAll() :  save [AddressBook], id [null]
[2010-01-25 00:53:50,053] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:53:50,053] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:53:50,053] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736721]
[2010-01-25 00:53:50,053] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:50,057] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,057] DEBUG - UpdateCache.update() : update [class Address], id [1605663]
[2010-01-25 00:53:50,057] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:50,058] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,058] DEBUG - UpdateCache.update() : update [class Statistics], id [1638416]
[2010-01-25 00:53:50,058] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:50,059] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,059] DEBUG - UpdateCache.update() : update [class Favorite], id [1671202]
[2010-01-25 00:53:50,059] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:50,060] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,060] DEBUG - UpdateCache.update() : update [class Favorite], id [1671203]
[2010-01-25 00:53:50,060] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:50,061] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,061] DEBUG - UpdateCache.update() : update [class Remover], id [1703953]
[2010-01-25 00:53:50,061] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:50,061] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,061] DEBUG - UpdateCache.update() : update [class AddressBook], id [1736721]
[2010-01-25 00:53:50,061] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:50,065] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,065] DEBUG - UpdateCache.update() : update [class Address], id [1605663]
[2010-01-25 00:53:50,065] DEBUG - XmlSerializer._serialize() : add [address]
[2010-01-25 00:53:50,066] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,066] DEBUG - UpdateCache.update() : update [class Statistics], id [1638416]
[2010-01-25 00:53:50,066] DEBUG - XmlSerializer._serialize() : add [statistics]
[2010-01-25 00:53:50,067] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,067] DEBUG - UpdateCache.update() : update [class Favorite], id [1671202]
[2010-01-25 00:53:50,067] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:50,067] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,067] DEBUG - UpdateCache.update() : update [class Favorite], id [1671203]
[2010-01-25 00:53:50,068] DEBUG - XmlSerializer._serialize() : add [favorite]
[2010-01-25 00:53:50,068] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,068] DEBUG - UpdateCache.update() : update [class Remover], id [1703953]
[2010-01-25 00:53:50,068] DEBUG - XmlSerializer._serialize() : add [remover]
[2010-01-25 00:53:50,069] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,069] DEBUG - XmlSerializer.save() : timing 16 at [cache]
[2010-01-25 00:53:50,103] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:50,103] DEBUG - XmlSerializer.save() : timing 34 at [save]
[2010-01-25 00:53:50,103] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:50,115] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,115] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,117] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,133] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:50,134] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:50,135] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:50,137] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:50,140] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:50,141] DEBUG - RelaxResolver.resolveEntity() : looking for [Favorite.rng]
[2010-01-25 00:53:50,152] DEBUG - XmlSerializer.save() : timing 37 at [extract]
[2010-01-25 00:53:50,152] DEBUG - LockItem.lock() : lock on Thread-5
[2010-01-25 00:53:50,152] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:50,153] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:50,154] DEBUG - XmlSerializer.save() : timing 38 at [extract]
[2010-01-25 00:53:50,170] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:53:50,170] DEBUG - XmlSerializer.save() : timing 18 at [changed]
[2010-01-25 00:53:50,170] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-25 00:53:50,171] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:50,171] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:53:50,171] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:50,171] DEBUG - LockItem.unlock() : unlocked on Thread-5
[2010-01-25 00:53:50,171] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:50,171] DEBUG - XmlSerializer.save() : timing 0 at [save]
[2010-01-25 00:53:50,171] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:50,174] DEBUG - XmlSerializer.save() : timing 59 at [extract]
[2010-01-25 00:53:50,175] DEBUG - LockItem.lock() : lock on Thread-7
[2010-01-25 00:53:50,176] DEBUG - XmlSerializer.save() : timing 2 at [lock]
[2010-01-25 00:53:50,176] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:50,185] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:53:50,185] DEBUG - XmlSerializer.save() : timing 9 at [changed]
[2010-01-25 00:53:50,185] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-25 00:53:50,186] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:50,186] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:53:50,187] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:50,187] DEBUG - LockItem.unlock() : unlocked on Thread-7
[2010-01-25 00:53:50,187] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:50,187] DEBUG - XmlSerializer.save() : timing 1 at [save]
[2010-01-25 00:53:50,187] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:50,254] DEBUG - LockItem.lock() : lock on Thread-9
[2010-01-25 00:53:50,255] DEBUG - XmlSerializer.save() : timing 101 at [lock]
[2010-01-25 00:53:50,255] DEBUG - XmlSerializer._serialize() : add [address-book]
[2010-01-25 00:53:50,274] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:53:50,274] DEBUG - XmlSerializer.save() : timing 19 at [changed]
[2010-01-25 00:53:50,274] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-25 00:53:50,275] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:50,275] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:53:50,275] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:50,275] DEBUG - LockItem.unlock() : unlocked on Thread-9
[2010-01-25 00:53:50,275] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:50,275] DEBUG - XmlSerializer.save() : timing 0 at [save]
[2010-01-25 00:53:50,275] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:50,315] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,318] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:53:50,325] DEBUG - XmlSerializer.save() : timing 10 at [extract]
[2010-01-25 00:53:50,325] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:50,326] DEBUG - XmlSerializer.save() : timing 1 at [changed]
[2010-01-25 00:53:50,326] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:53:50,327] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:53:50,327] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:50,327] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:50,327] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:53:50,337] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [null]
[2010-01-25 00:53:50,337] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:50,337] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:50,337] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:53:50,337] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:50,337] DEBUG - XmlSerializer().storeAll() : new [null, null]
[2010-01-25 00:53:50,337] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:53:50,338] DEBUG - XmlSerializer.save() : timing 12 at [storeAll]
[2010-01-25 00:53:50,338] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:53:50,338] DEBUG - UpdateCache.update() : update [class Levelone], id [1867777]
[2010-01-25 00:53:50,338] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:50,341] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,341] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835010]
[2010-01-25 00:53:50,341] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:50,342] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,342] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802243]
[2010-01-25 00:53:50,343] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,343] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,343] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802244]
[2010-01-25 00:53:50,343] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,344] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,344] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835011]
[2010-01-25 00:53:50,344] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:50,345] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,345] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802245]
[2010-01-25 00:53:50,345] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,346] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,346] DEBUG - UpdateCache.update() : update [class Levelone], id [1867777]
[2010-01-25 00:53:50,346] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:50,349] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,349] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835010]
[2010-01-25 00:53:50,349] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:50,351] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,351] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802243]
[2010-01-25 00:53:50,351] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,352] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,352] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802244]
[2010-01-25 00:53:50,352] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,353] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,353] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835011]
[2010-01-25 00:53:50,353] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:50,354] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,354] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802245]
[2010-01-25 00:53:50,354] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,354] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,355] DEBUG - XmlSerializer.save() : timing 17 at [cache]
[2010-01-25 00:53:50,365] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:50,365] DEBUG - XmlSerializer.save() : timing 10 at [save]
[2010-01-25 00:53:50,365] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:50,369] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,372] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,373] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,382] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:53:50,383] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:53:50,385] DEBUG - RelaxResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-01-25 00:53:50,396] DEBUG - XmlSerializer.save() : timing 25 at [extract]
[2010-01-25 00:53:50,396] DEBUG - LockItem.lock() : lock on Thread-11
[2010-01-25 00:53:50,396] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:50,396] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:50,398] DEBUG - XmlSerializer.save() : timing 26 at [extract]
[2010-01-25 00:53:50,399] DEBUG - XmlSerializer.save() : timing 1 at [lock]
[2010-01-25 00:53:50,399] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:50,400] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1802243]
[2010-01-25 00:53:50,402] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1802244]
[2010-01-25 00:53:50,403] DEBUG - XmlCompare.compare() : [[]]
[2010-01-25 00:53:50,403] DEBUG - XmlSerializer.save() : timing 7 at [changed]
[2010-01-25 00:53:50,403] DEBUG - XmlSerializer.save() : timing 0 at [storeAll]
[2010-01-25 00:53:50,403] DEBUG - XmlSerializer.save() : timing 34 at [extract]
[2010-01-25 00:53:50,403] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:50,403] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:50,404] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1802245]
[2010-01-25 00:53:50,404] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:50,404] DEBUG - XmlSerializer().storeAll() : new [1802243, 1802244, 1802245]
[2010-01-25 00:53:50,404] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:53:50,404] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:50,405] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:50,405] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:53:50,405] DEBUG - XmlSerializer.save() : timing 6 at [storeAll]
[2010-01-25 00:53:50,405] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1802243]
[2010-01-25 00:53:50,405] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:53:50,405] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1802244]
[2010-01-25 00:53:50,405] DEBUG - UpdateCache.update() : update [class Levelone], id [1867778]
[2010-01-25 00:53:50,405] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:50,405] DEBUG - XmlSerializer().storeAll() :  save [Levelthree], id [1802245]
[2010-01-25 00:53:50,406] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:50,406] DEBUG - XmlSerializer().storeAll() : new [1802243, 1802244, 1802245]
[2010-01-25 00:53:50,406] DEBUG - XmlSerializer().storeAll() :  save [Leveltwo], id [null]
[2010-01-25 00:53:50,406] DEBUG - XmlSerializer().storeAll() : old []
[2010-01-25 00:53:50,406] DEBUG - XmlSerializer().storeAll() : new [null]
[2010-01-25 00:53:50,406] DEBUG - XmlSerializer().storeAll() :  save [Levelone], id [null]
[2010-01-25 00:53:50,406] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:53:50,407] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:50,407] DEBUG - UpdateCache.update() : update [class Levelone], id [1867779]
[2010-01-25 00:53:50,407] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:50,407] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,407] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835012]
[2010-01-25 00:53:50,408] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:50,408] DEBUG - XmlSerializer.save() : timing 5 at [findupdate]
[2010-01-25 00:53:50,408] DEBUG - XmlSerializer.save() : timing 0 at [cache]
[2010-01-25 00:53:50,409] DEBUG - LockItem.unlock() : 6 current
[2010-01-25 00:53:50,409] DEBUG - LockItem.unlock() : unlocked on Thread-11
[2010-01-25 00:53:50,409] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:50,409] DEBUG - XmlSerializer.save() : timing 1 at [save]
[2010-01-25 00:53:50,409] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:50,409] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,410] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802243]
[2010-01-25 00:53:50,410] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,410] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,410] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802244]
[2010-01-25 00:53:50,411] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,411] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,411] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802245]
[2010-01-25 00:53:50,411] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,412] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,412] DEBUG - UpdateCache.update() : update [class Levelone], id [1867778]
[2010-01-25 00:53:50,412] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:50,425] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,425] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835013]
[2010-01-25 00:53:50,425] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:50,426] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,426] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835012]
[2010-01-25 00:53:50,426] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:50,427] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,427] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802243]
[2010-01-25 00:53:50,427] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,427] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,427] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802244]
[2010-01-25 00:53:50,427] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,427] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,427] DEBUG - XmlSerializer.save() : timing 22 at [cache]
[2010-01-25 00:53:50,428] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,428] DEBUG - UpdateCache.update() : update [class Levelthree], id [1802245]
[2010-01-25 00:53:50,428] DEBUG - XmlSerializer._serialize() : add [levelthree]
[2010-01-25 00:53:50,429] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,429] DEBUG - UpdateCache.update() : update [class Levelone], id [1867779]
[2010-01-25 00:53:50,429] DEBUG - XmlSerializer._serialize() : add [levelone]
[2010-01-25 00:53:50,431] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,431] DEBUG - UpdateCache.update() : update [class Leveltwo], id [1835013]
[2010-01-25 00:53:50,431] DEBUG - XmlSerializer._serialize() : add [leveltwo]
[2010-01-25 00:53:50,434] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,434] DEBUG - XmlSerializer.save() : timing 27 at [cache]
[2010-01-25 00:53:50,443] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:50,443] DEBUG - LockItem.unlock() : unlocked on Thread-13
[2010-01-25 00:53:50,443] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:50,443] DEBUG - XmlSerializer.save() : timing 16 at [save]
[2010-01-25 00:53:50,443] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:50,448] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:50,448] DEBUG - LockItem.unlock() : unlocked on Thread-15
[2010-01-25 00:53:50,448] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:50,448] DEBUG - XmlSerializer.save() : timing 14 at [save]
[2010-01-25 00:53:50,448] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:50,470] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,485] DEBUG - XmlSerializer.save() : timing 15 at [extract]
[2010-01-25 00:53:50,485] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:50,485] DEBUG - XmlSerializer.save() : timing 0 at [changed]
[2010-01-25 00:53:50,486] DEBUG - XmlSerializer().storeAll() :  save [BoolTest], id [null]
[2010-01-25 00:53:50,488] DEBUG - XmlSerializer.save() : timing 3 at [storeAll]
[2010-01-25 00:53:50,489] DEBUG - XmlSerializer.save() : timing 1 at [findupdate]
[2010-01-25 00:53:50,489] DEBUG - UpdateCache.update() : update [class BoolTest], id [2064384]
[2010-01-25 00:53:50,489] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:53:50,490] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,490] DEBUG - UpdateCache.update() : update [class BoolTest], id [2064384]
[2010-01-25 00:53:50,490] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:53:50,491] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,491] DEBUG - XmlSerializer.save() : timing 2 at [cache]
[2010-01-25 00:53:50,499] DEBUG - LockItem.unlock() : 0 current
[2010-01-25 00:53:50,499] DEBUG - XmlSerializer.save() : timing 8 at [save]
[2010-01-25 00:53:50,499] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:50,499] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,505] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:53:50,506] DEBUG - RelaxSchema.validate() : enter
[2010-01-25 00:53:50,512] DEBUG - XmlSerializer.save() : timing 6 at [extract]
[2010-01-25 00:53:50,512] DEBUG - LockItem.lock() : lock on main
[2010-01-25 00:53:50,512] DEBUG - XmlSerializer.save() : timing 0 at [lock]
[2010-01-25 00:53:50,512] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:53:50,514] DEBUG - XmlCompare.next(): hit <bool-test id="2064384"> vs. <bool-test available="false" id="2064384">
[2010-01-25 00:53:50,514] DEBUG - XmlCompare.compare() : [[2064384:bool-test]]
[2010-01-25 00:53:50,514] DEBUG - XmlSerializer.save() : timing 2 at [changed]
[2010-01-25 00:53:50,515] DEBUG - XmlSerializer().storeAll() : update timestamp on class BoolTest for field available. New Val [false], old [null]
[2010-01-25 00:53:50,516] DEBUG - XmlSerializer().storeAll() :  save [BoolTest], id [2064384]
[2010-01-25 00:53:50,516] DEBUG - XmlSerializer.save() : timing 2 at [storeAll]
[2010-01-25 00:53:50,516] DEBUG - XmlSerializer.save() : timing 0 at [findupdate]
[2010-01-25 00:53:50,516] DEBUG - UpdateCache.update() : update [class BoolTest], id [2064384]
[2010-01-25 00:53:50,516] DEBUG - XmlSerializer._serialize() : add [bool-test]
[2010-01-25 00:53:50,517] DEBUG - UpdateCache.update() : finish
[2010-01-25 00:53:50,517] DEBUG - XmlSerializer.save() : timing 1 at [cache]
[2010-01-25 00:53:50,528] DEBUG - LockItem.unlock() : 1 current
[2010-01-25 00:53:50,528] DEBUG - LockItem.unlock() : unlocked on main
[2010-01-25 00:53:50,528] DEBUG - LockItem.unlock() : 0 remain
[2010-01-25 00:53:50,528] DEBUG - XmlSerializer.save() : timing 11 at [save]
[2010-01-25 00:53:50,528] DEBUG - XmlSerializer.save() : timing ================
[2010-01-25 00:53:52,576] DEBUG - MultiSort.sort() : timing 233 at [prep]
[2010-01-25 00:53:52,640] DEBUG - MultiSort.sort() : timing 76 at [sort]
[2010-01-25 00:53:52,661] DEBUG - MultiSort.sort() : timing 4 at [prep]
[2010-01-25 00:53:52,664] DEBUG - MultiSort.sort() : timing 3 at [sort]
[2010-01-25 00:53:52,684] DEBUG - MultiSort.sort() : timing 1 at [prep]
[2010-01-25 00:53:52,686] DEBUG - MultiSort.sort() : timing 2 at [sort]
[2010-01-25 00:53:52,701] DEBUG - MultiSort.sort() : timing 3 at [prep]
[2010-01-25 00:53:52,703] DEBUG - MultiSort.sort() : timing 2 at [sort]
[2010-01-25 00:53:52,724] DEBUG - MultiSort.sort() : timing 2 at [prep]
[2010-01-25 00:53:52,727] DEBUG - MultiSort.sort() : timing 3 at [sort]
[2010-01-25 00:53:54,799] DEBUG - XmlCompare.next(): hit             <name>one</name> vs.             <name>two</name>
[2010-01-25 00:53:54,810] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:53:54,828] DEBUG - XmlCompare.next(): hit             <display-element id="6684672"> vs.             <display-element id="6684672" blaa="yo">
[2010-01-25 00:53:54,834] DEBUG - XmlCompare.next(): hit                     <value>Topper</value> vs.                     <value>Top</value>
[2010-01-25 00:53:54,840] DEBUG - XmlCompare.next(): hit             <display-element id="6684674" blaa="diff1"> vs.             <display-element id="6684674" blaa="diff2">
[2010-01-25 00:53:54,841] DEBUG - XmlCompare.next(): hit         </wrap> vs.         </fap>
[2010-01-25 00:53:54,842] DEBUG - XmlCompare.compare() : [[6684672:display-element, 123:wrap, 456:block, 6684674:display-element]]
[2010-01-25 00:53:54,849] DEBUG - XmlCompare.next(): hit         </wrap> vs.             <display-element blaa="diff">
[2010-01-25 00:53:54,849] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:53:54,874] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:53:54,881] DEBUG - XmlCompare.compare() : [[123:wrap]]
[2010-01-25 00:53:54,891] DEBUG - XmlCompare.next(): hit             <display-element id="6684674" blaa="diff"> vs. null
[2010-01-25 00:53:54,893] DEBUG - XmlCompare.next(): hit             </display-element> vs. null
[2010-01-25 00:53:54,895] DEBUG - XmlCompare.next(): hit         </wrap> vs. null
[2010-01-25 00:53:54,896] DEBUG - XmlCompare.compare() : [[123:wrap, 6684674:display-element]]
[2010-01-25 00:53:54,903] DEBUG - XmlCompare.next(): hit             <display-element id="6684673" blaa="old"> vs.             <display-element id="6684674" blaa="same">
[2010-01-25 00:53:54,906] DEBUG - XmlCompare.next(): hit         </wrap> vs.             <display-element blaa="new">
[2010-01-25 00:53:54,906] DEBUG - XmlCompare.compare() : [[123:wrap, 6684673:display-element]]
[2010-01-25 00:53:54,920] DEBUG - XmlCompare.next(): hit       <kid-two id="13828096"> vs.       <kid-one id="13795329">
[2010-01-25 00:53:54,920] DEBUG - XmlCompare.next(): hit        <title>kid2-1</title> vs.        <title>kid1-2</title>
[2010-01-25 00:53:54,921] DEBUG - XmlCompare.next(): hit       </kid-two> vs.       </kid-one>
[2010-01-25 00:53:54,922] DEBUG - XmlCompare.next(): hit       <kid-one id="13795329"> vs.       <kid-one id="13795330">
[2010-01-25 00:53:54,922] DEBUG - XmlCompare.next(): hit        <title>kid1-2</title> vs.        <title>kid1-3</title>
[2010-01-25 00:53:54,927] DEBUG - XmlCompare.next(): hit       <kid-one id="13795330"> vs.       <kid-two id="13828096">
[2010-01-25 00:53:54,927] DEBUG - XmlCompare.next(): hit        <title>kid1-3</title> vs.        <title>kid2-1</title>
[2010-01-25 00:53:54,928] DEBUG - XmlCompare.next(): hit       </kid-one> vs.       </kid-two>
[2010-01-25 00:53:54,929] DEBUG - XmlCompare.compare() : [[13795329:kid-one, 13828096:kid-two, 13926400:mixed-kids, 13795330:kid-one]]
[2010-01-25 00:53:54,932] INFO  - XmlCompare.compare() : null left or right
[2010-01-25 00:53:54,932] DEBUG - XmlCompare.compare() : left null
[2010-01-25 00:53:54,932] DEBUG - XmlCompare.compare() : right null
[2010-01-25 00:53:54,934] INFO  - XmlCompare.compare() : null left or right
[2010-01-25 00:53:54,934] DEBUG - XmlCompare.compare() : left </xml>
[2010-01-25 00:53:54,934] DEBUG - XmlCompare.compare() : right null
[2010-01-25 00:53:54,936] INFO  - XmlCompare.compare() : null left or right
[2010-01-25 00:53:54,936] DEBUG - XmlCompare.compare() : left null
[2010-01-25 00:53:54,936] DEBUG - XmlCompare.compare() : right </xml>
[2010-02-01 10:38:32,431] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Test { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = []

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['foo','bar','created','lastUpdated',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        foo(nullable : false,)
        bar(nullable : false,)
        created(nullable : false,)
        lastUpdated(nullable : false,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <foo nullable ="false"/>
            <bar nullable ="false"/>
            <created nullable ="false"/>
            <lastUpdated nullable ="false"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String foo
    String bar
    Date created
    Date lastUpdated


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Test".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:32,685] DEBUG - DomainObjectLoader.injectIdProperty() : adding property [id] to class [Test]
[2010-02-01 10:38:32,685] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Test]
[2010-02-01 10:38:32,686] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Test]
[2010-02-01 10:38:32,686] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:32,791] DEBUG - PersistenceLoader.addBaseClass() : load Test
[2010-02-01 10:38:33,021] INFO  - Hibernate 3.3.1.GA
[2010-02-01 10:38:33,028] INFO  - hibernate.properties not found
[2010-02-01 10:38:33,032] INFO  - Bytecode provider name : javassist
[2010-02-01 10:38:33,036] INFO  - using JDK 1.4 java.sql.Timestamp handling
[2010-02-01 10:38:33,103] INFO  - configuring from url: file:/Users/rgrey/Work/persistence/etc/hibernate.cfg.xml
[2010-02-01 10:38:33,200] INFO  - Configured SessionFactory: null
[2010-02-01 10:38:33,226] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-02-01 10:38:33,279] INFO  - Running hbm2ddl schema update
[2010-02-01 10:38:33,279] INFO  - fetching database metadata
[2010-02-01 10:38:33,282] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-02-01 10:38:33,282] INFO  - Hibernate connection pool size: 20
[2010-02-01 10:38:33,282] INFO  - autocommit mode: false
[2010-02-01 10:38:33,562] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-02-01 10:38:33,562] INFO  - connection properties: {user=, password=****}
[2010-02-01 10:38:35,492] INFO  - updating schema
[2010-02-01 10:38:36,594] INFO  - table found: .APP.TEST
[2010-02-01 10:38:36,594] INFO  - columns: [foo, created, bar, xmlcache, last_updated, id, version]
[2010-02-01 10:38:36,595] INFO  - foreign keys: []
[2010-02-01 10:38:36,595] INFO  - indexes: [sql100124042643800]
[2010-02-01 10:38:36,679] INFO  - table found: .APP.HIBERNATE_UNIQUE_KEY
[2010-02-01 10:38:36,681] INFO  - columns: [next_hi]
[2010-02-01 10:38:36,681] INFO  - foreign keys: []
[2010-02-01 10:38:36,681] INFO  - indexes: []
[2010-02-01 10:38:36,684] INFO  - schema update complete
[2010-02-01 10:38:36,685] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-02-01 10:38:36,685] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-02-01 10:38:36,685] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-02-01 10:38:36,690] INFO  - Using Hibernate built-in connection pool (not for production use!)
[2010-02-01 10:38:36,690] INFO  - Hibernate connection pool size: 20
[2010-02-01 10:38:36,690] INFO  - autocommit mode: false
[2010-02-01 10:38:36,690] INFO  - using driver: org.apache.derby.jdbc.EmbeddedDriver at URL: jdbc:derby:derby-db;create=true
[2010-02-01 10:38:36,690] INFO  - connection properties: {user=, password=****}
[2010-02-01 10:38:36,692] INFO  - RDBMS: Apache Derby, version: 10.2.1.6 - (452058)
[2010-02-01 10:38:36,693] INFO  - JDBC driver: Apache Derby Embedded JDBC Driver, version: 10.2.1.6 - (452058)
[2010-02-01 10:38:36,696] INFO  - Using dialect: org.hibernate.dialect.DerbyDialect
[2010-02-01 10:38:36,699] INFO  - Using default transaction strategy (direct JDBC transactions)
[2010-02-01 10:38:36,704] INFO  - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
[2010-02-01 10:38:36,704] INFO  - Automatic flush during beforeCompletion(): disabled
[2010-02-01 10:38:36,704] INFO  - Automatic session close at end of transaction: disabled
[2010-02-01 10:38:36,705] INFO  - Scrollable result sets: enabled
[2010-02-01 10:38:36,705] INFO  - JDBC3 getGeneratedKeys(): disabled
[2010-02-01 10:38:36,705] INFO  - Connection release mode: auto
[2010-02-01 10:38:36,706] INFO  - Maximum outer join fetch depth: 1
[2010-02-01 10:38:36,706] INFO  - Default batch fetch size: 1
[2010-02-01 10:38:36,706] INFO  - Generate SQL with comments: disabled
[2010-02-01 10:38:36,706] INFO  - Order SQL updates by primary key: disabled
[2010-02-01 10:38:36,706] INFO  - Order SQL inserts for batching: disabled
[2010-02-01 10:38:36,706] INFO  - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
[2010-02-01 10:38:36,708] INFO  - Using ASTQueryTranslatorFactory
[2010-02-01 10:38:36,708] INFO  - Query language substitutions: {}
[2010-02-01 10:38:36,709] INFO  - JPA-QL strict compliance: disabled
[2010-02-01 10:38:36,709] INFO  - Second-level cache: enabled
[2010-02-01 10:38:36,709] INFO  - Query cache: enabled
[2010-02-01 10:38:36,713] INFO  - Cache region factory : org.hibernate.cache.impl.bridge.RegionFactoryCacheProviderBridge
[2010-02-01 10:38:36,713] INFO  - Cache provider: org.hibernate.cache.EhCacheProvider
[2010-02-01 10:38:36,716] INFO  - Optimize cache for minimal puts: disabled
[2010-02-01 10:38:36,716] INFO  - Cache region prefix: arv
[2010-02-01 10:38:36,716] INFO  - Structured second-level cache entries: disabled
[2010-02-01 10:38:36,716] INFO  - Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
[2010-02-01 10:38:36,720] INFO  - Statistics: disabled
[2010-02-01 10:38:36,720] INFO  - Deleted entity synthetic identifier rollback: disabled
[2010-02-01 10:38:36,720] INFO  - Default entity-mode: pojo
[2010-02-01 10:38:36,721] INFO  - Named query checking : enabled
[2010-02-01 10:38:36,793] INFO  - building session factory
[2010-02-01 10:38:36,871] WARN  - Could not find configuration [arv.Test]; using defaults.
[2010-02-01 10:38:37,183] INFO  - cleaning up connection pool: jdbc:derby:derby-db;create=true
[2010-02-01 10:38:37,313] INFO  - Not binding factory to JNDI, no JNDI name configured
[2010-02-01 10:38:37,314] INFO  - starting update timestamps cache at region: arv.org.hibernate.cache.UpdateTimestampsCache
[2010-02-01 10:38:37,315] WARN  - Could not find configuration [arv.org.hibernate.cache.UpdateTimestampsCache]; using defaults.
[2010-02-01 10:38:37,318] INFO  - starting query cache at region: arv.org.hibernate.cache.StandardQueryCache
[2010-02-01 10:38:37,318] WARN  - Could not find configuration [arv.org.hibernate.cache.StandardQueryCache]; using defaults.
[2010-02-01 10:38:37,320] DEBUG - PersistenceLoader.load() : loaded 1 class(es)
[2010-02-01 10:38:37,460] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-02-01 10:38:37,460] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-02-01 10:38:37,477] INFO  - Save ID [2097152]
[2010-02-01 10:38:37,532] WARN  - SQL Warning: 10000, SQLState: 01J01
[2010-02-01 10:38:37,532] WARN  - Database 'derby-db' not created, connection made to existing database instead.
[2010-02-01 10:38:37,536] INFO  - Loaded Object [Test : 2097152]
[2010-02-01 10:38:37,536] INFO  - Loaded Value [blaa]
[2010-02-01 10:38:39,866] INFO  - SyncLock.run(): id 8, running 14, priorirty 500
[2010-02-01 10:38:39,866] INFO  - SyncLock.run(): id 12, running 14, priorirty 500
[2010-02-01 10:38:39,866] INFO  - SyncLock.run(): id 13, running 14, priorirty 100
[2010-02-01 10:38:39,866] INFO  - SyncLock.run(): id 5, running 14, priorirty 100
[2010-02-01 10:38:39,866] INFO  - SyncLock.run(): id 6, running 14, priorirty 500
[2010-02-01 10:38:39,866] INFO  - SyncLock.run(): id 1, running 14, priorirty 100
[2010-02-01 10:38:39,867] INFO  - SyncLock.run(): id 11, running 14, priorirty 100
[2010-02-01 10:38:39,867] INFO  - SyncLock.run(): id 7, running 14, priorirty 100
[2010-02-01 10:38:39,867] INFO  - SyncLock.run(): id 9, running 14, priorirty 100
[2010-02-01 10:38:39,867] INFO  - SyncLock.run(): id 2, running 14, priorirty 500
[2010-02-01 10:38:39,866] INFO  - SyncLock.run(): id 10, running 14, priorirty 500
[2010-02-01 10:38:39,866] INFO  - SyncLock.run(): id 0, running 14, priorirty 500
[2010-02-01 10:38:39,866] INFO  - SyncLock.run(): id 3, running 14, priorirty 100
[2010-02-01 10:38:39,866] INFO  - SyncLock.run(): id 4, running 14, priorirty 500
[2010-02-01 10:38:39,887] DEBUG - LockItem.lock() : lock on Thread-14
[2010-02-01 10:38:39,887] DEBUG - LockItem.lock() : lock on Thread-9
[2010-02-01 10:38:40,099] DEBUG - LockItem.unlock() : 4 current
[2010-02-01 10:38:40,099] DEBUG - LockItem.unlock() : 4 current
[2010-02-01 10:38:40,099] DEBUG - LockItem.unlock() : unlocked on Thread-14
[2010-02-01 10:38:40,099] DEBUG - LockItem.unlock() : unlocked on Thread-9
[2010-02-01 10:38:40,100] DEBUG - LockItem.unlock() : 2 remain
[2010-02-01 10:38:40,101] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:40,101] INFO  - SyncLock.run(): finish id 13, count 12
[2010-02-01 10:38:40,102] INFO  - SyncLock.run(): finish id 8, count 12
[2010-02-01 10:38:40,187] DEBUG - LockItem.lock() : lock on Thread-6
[2010-02-01 10:38:40,389] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:40,389] DEBUG - LockItem.unlock() : unlocked on Thread-6
[2010-02-01 10:38:40,389] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:40,389] INFO  - SyncLock.run(): finish id 5, count 11
[2010-02-01 10:38:40,390] DEBUG - LockItem.lock() : lock on Thread-12
[2010-02-01 10:38:40,591] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:40,591] DEBUG - LockItem.unlock() : unlocked on Thread-12
[2010-02-01 10:38:40,591] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:40,591] DEBUG - LockItem.lock() : lock on Thread-8
[2010-02-01 10:38:40,591] INFO  - SyncLock.run(): finish id 11, count 10
[2010-02-01 10:38:40,791] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:40,791] DEBUG - LockItem.unlock() : unlocked on Thread-8
[2010-02-01 10:38:40,791] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:40,792] INFO  - SyncLock.run(): finish id 7, count 9
[2010-02-01 10:38:40,888] DEBUG - LockItem.lock() : lock on Thread-3
[2010-02-01 10:38:41,089] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:41,089] DEBUG - LockItem.unlock() : unlocked on Thread-3
[2010-02-01 10:38:41,089] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:41,089] INFO  - SyncLock.run(): finish id 2, count 8
[2010-02-01 10:38:41,090] DEBUG - LockItem.lock() : lock on Thread-10
[2010-02-01 10:38:41,291] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:41,291] DEBUG - LockItem.unlock() : unlocked on Thread-10
[2010-02-01 10:38:41,291] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:41,291] INFO  - SyncLock.run(): finish id 9, count 7
[2010-02-01 10:38:41,292] DEBUG - LockItem.lock() : lock on Thread-4
[2010-02-01 10:38:41,493] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:41,493] DEBUG - LockItem.unlock() : unlocked on Thread-4
[2010-02-01 10:38:41,494] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:41,494] INFO  - SyncLock.run(): finish id 3, count 6
[2010-02-01 10:38:41,591] DEBUG - LockItem.lock() : lock on Thread-2
[2010-02-01 10:38:41,792] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:41,792] DEBUG - LockItem.unlock() : unlocked on Thread-2
[2010-02-01 10:38:41,792] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:41,793] INFO  - SyncLock.run(): finish id 1, count 5
[2010-02-01 10:38:41,889] DEBUG - LockItem.lock() : lock on Thread-11
[2010-02-01 10:38:42,090] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:42,090] DEBUG - LockItem.unlock() : unlocked on Thread-11
[2010-02-01 10:38:42,090] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:42,091] INFO  - SyncLock.run(): finish id 10, count 4
[2010-02-01 10:38:42,389] DEBUG - LockItem.lock() : lock on Thread-7
[2010-02-01 10:38:42,590] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:42,590] DEBUG - LockItem.unlock() : unlocked on Thread-7
[2010-02-01 10:38:42,590] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:42,590] INFO  - SyncLock.run(): finish id 6, count 3
[2010-02-01 10:38:42,889] DEBUG - LockItem.lock() : lock on Thread-1
[2010-02-01 10:38:43,090] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:43,090] DEBUG - LockItem.unlock() : unlocked on Thread-1
[2010-02-01 10:38:43,090] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:43,090] INFO  - SyncLock.run(): finish id 0, count 2
[2010-02-01 10:38:43,393] DEBUG - LockItem.lock() : lock on Thread-5
[2010-02-01 10:38:43,594] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:43,594] DEBUG - LockItem.unlock() : unlocked on Thread-5
[2010-02-01 10:38:43,594] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:43,594] INFO  - SyncLock.run(): finish id 4, count 1
[2010-02-01 10:38:43,894] DEBUG - LockItem.lock() : lock on Thread-13
[2010-02-01 10:38:44,098] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:44,098] DEBUG - LockItem.unlock() : unlocked on Thread-13
[2010-02-01 10:38:44,098] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:44,102] INFO  - SyncLock.run(): finish id 12, count 0
[2010-02-01 10:38:44,402] INFO  - SyncLock.run(): id 0, running 2, priorirty 1000
[2010-02-01 10:38:44,403] INFO  - SyncLock.run(): id 1, running 4, priorirty 1000
[2010-02-01 10:38:44,404] INFO  - SyncLock.run(): id 2, running 6, priorirty 1000
[2010-02-01 10:38:44,406] INFO  - SyncLock.run(): id 5, running 6, priorirty 1000
[2010-02-01 10:38:44,407] INFO  - SyncLock.run(): id 3, running 6, priorirty 1000
[2010-02-01 10:38:44,407] INFO  - SyncLock.run(): id 4, running 6, priorirty 1000
[2010-02-01 10:38:44,408] DEBUG - LockItem.lock() : lock on Thread-20
[2010-02-01 10:38:44,409] DEBUG - LockItem.lock() : lock on Thread-21
[2010-02-01 10:38:44,609] DEBUG - LockItem.unlock() : 4 current
[2010-02-01 10:38:44,609] DEBUG - LockItem.unlock() : unlocked on Thread-20
[2010-02-01 10:38:44,609] DEBUG - LockItem.unlock() : 2 remain
[2010-02-01 10:38:44,609] INFO  - SyncLock.run(): finish id 4, count 5
[2010-02-01 10:38:44,611] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:44,611] DEBUG - LockItem.unlock() : unlocked on Thread-21
[2010-02-01 10:38:44,612] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:44,612] INFO  - SyncLock.run(): finish id 5, count 4
[2010-02-01 10:38:45,408] DEBUG - LockItem.lock() : lock on Thread-16
[2010-02-01 10:38:45,429] DEBUG - LockItem.unlock() : 2 current
[2010-02-01 10:38:45,429] DEBUG - LockItem.unlock() : unlocked on Thread-18
[2010-02-01 10:38:45,429] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:45,429] INFO  - SyncLock.run(): finish id 2, count 3
[2010-02-01 10:38:45,430] DEBUG - LockItem.unlock() : 0 current
[2010-02-01 10:38:45,430] DEBUG - LockItem.unlock() : unlocked on Thread-17
[2010-02-01 10:38:45,430] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:45,430] INFO  - SyncLock.run(): finish id 1, count 2
[2010-02-01 10:38:45,430] DEBUG - LockItem.unlock() : 0 current
[2010-02-01 10:38:45,430] DEBUG - LockItem.unlock() : unlocked on Thread-19
[2010-02-01 10:38:45,430] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:45,430] INFO  - SyncLock.run(): finish id 3, count 1
[2010-02-01 10:38:45,610] DEBUG - LockItem.unlock() : 0 current
[2010-02-01 10:38:45,610] DEBUG - LockItem.unlock() : unlocked on Thread-16
[2010-02-01 10:38:45,610] DEBUG - LockItem.unlock() : 0 remain
[2010-02-01 10:38:45,610] INFO  - SyncLock.run(): finish id 0, count 0
[2010-02-01 10:38:47,912] DEBUG - SchemaLoader() : directory [test/schema/relax]
[2010-02-01 10:38:48,015] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Boolean.rng]
[2010-02-01 10:38:48,365] DEBUG - RelaxSchema.addBaseFields() : evaluating bool-test
[2010-02-01 10:38:48,368] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,375] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,406] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,406] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,407] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,408] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,444] DEBUG - RelaxSchema.recurse() : element BoolTest
[2010-02-01 10:38:48,485] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-02-01 10:38:48,485] DEBUG - RelaxSchema.recurse() : element Name
[2010-02-01 10:38:48,498] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-02-01 10:38:48,498] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,506] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-02-01 10:38:48,506] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,539] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Complex.rng]
[2010-02-01 10:38:48,546] DEBUG - FileResolver.resolveEntity() : looking for [Levelthree.rng]
[2010-02-01 10:38:48,560] DEBUG - RelaxSchema.addBaseFields() : evaluating levelone
[2010-02-01 10:38:48,561] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,561] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,561] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,561] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,562] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,562] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,564] DEBUG - RelaxSchema.recurse() : element Levelone
[2010-02-01 10:38:48,564] DEBUG - RelaxSchema.addBaseFields() : evaluating leveltwo
[2010-02-01 10:38:48,564] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,565] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,565] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,565] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,565] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,566] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,566] DEBUG - RelaxClass() : ancestor count for [Leveltwo] = 1
[2010-02-01 10:38:48,566] DEBUG - RelaxSchema.recurse() : element Leveltwo
[2010-02-01 10:38:48,568] DEBUG - RelaxClass() : ancestor count for [Levelthree.rng] = 2
[2010-02-01 10:38:48,571] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-02-01 10:38:48,571] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,574] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-02-01 10:38:48,574] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,580] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-02-01 10:38:48,580] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,583] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-02-01 10:38:48,583] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,587] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Favorite.rng]
[2010-02-01 10:38:48,596] DEBUG - RelaxSchema.addBaseFields() : evaluating favorite
[2010-02-01 10:38:48,596] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,597] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,597] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,597] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,597] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,598] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,598] DEBUG - RelaxSchema.recurse() : element Favorite
[2010-02-01 10:38:48,602] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-02-01 10:38:48,602] DEBUG - RelaxSchema.recurse() : element Name
[2010-02-01 10:38:48,612] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-02-01 10:38:48,612] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,613] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-02-01 10:38:48,613] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,617] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Levelthree.rng]
[2010-02-01 10:38:48,634] DEBUG - RelaxSchema.addBaseFields() : evaluating levelthree
[2010-02-01 10:38:48,634] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,634] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,634] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,635] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,635] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,635] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,635] DEBUG - RelaxSchema.recurse() : element Levelthree
[2010-02-01 10:38:48,637] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-02-01 10:38:48,637] DEBUG - RelaxSchema.recurse() : element Name
[2010-02-01 10:38:48,640] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-02-01 10:38:48,640] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,643] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-02-01 10:38:48,643] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,647] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Mixed.rng]
[2010-02-01 10:38:48,663] DEBUG - RelaxSchema.addBaseFields() : evaluating mixed-kids
[2010-02-01 10:38:48,663] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,664] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,665] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,665] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,666] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,666] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,667] DEBUG - RelaxSchema.recurse() : element MixedKids
[2010-02-01 10:38:48,668] DEBUG - RelaxClass() : ancestor count for [Title] = 1
[2010-02-01 10:38:48,668] DEBUG - RelaxSchema.recurse() : element Title
[2010-02-01 10:38:48,677] DEBUG - RelaxClass() : ancestor count for [interleave.rng] = 1
[2010-02-01 10:38:48,681] DEBUG - RelaxSchema.ref() : follow [kid-one]
[2010-02-01 10:38:48,686] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-one
[2010-02-01 10:38:48,686] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,686] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,686] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,686] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,687] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,687] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,688] DEBUG - RelaxClass() : ancestor count for [KidOne] = 1
[2010-02-01 10:38:48,688] DEBUG - RelaxSchema.recurse() : element KidOne
[2010-02-01 10:38:48,690] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-02-01 10:38:48,690] DEBUG - RelaxSchema.recurse() : element Title
[2010-02-01 10:38:48,704] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-02-01 10:38:48,704] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,715] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-02-01 10:38:48,715] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,718] DEBUG - RelaxSchema.ref() : follow [kid-two]
[2010-02-01 10:38:48,720] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-two
[2010-02-01 10:38:48,720] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,720] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,720] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,721] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,721] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,721] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,722] DEBUG - RelaxClass() : ancestor count for [KidTwo] = 1
[2010-02-01 10:38:48,722] DEBUG - RelaxSchema.recurse() : element KidTwo
[2010-02-01 10:38:48,723] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-02-01 10:38:48,723] DEBUG - RelaxSchema.recurse() : element Title
[2010-02-01 10:38:48,725] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-02-01 10:38:48,725] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,729] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-02-01 10:38:48,729] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,730] DEBUG - RelaxSchema.ref() : follow [kid-three]
[2010-02-01 10:38:48,731] DEBUG - RelaxSchema.addBaseFields() : evaluating kid-three
[2010-02-01 10:38:48,731] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,731] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,732] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,732] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,732] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,733] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,733] DEBUG - RelaxClass() : ancestor count for [KidThree] = 1
[2010-02-01 10:38:48,733] DEBUG - RelaxSchema.recurse() : element KidThree
[2010-02-01 10:38:48,734] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-02-01 10:38:48,734] DEBUG - RelaxSchema.recurse() : element Title
[2010-02-01 10:38:48,736] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-02-01 10:38:48,736] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,737] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-02-01 10:38:48,737] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,739] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-02-01 10:38:48,739] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,740] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-02-01 10:38:48,740] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,746] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Sort.rng]
[2010-02-01 10:38:48,750] DEBUG - FileResolver.resolveEntity() : looking for [SortChild.rng]
[2010-02-01 10:38:48,758] DEBUG - RelaxSchema.addBaseFields() : evaluating sort
[2010-02-01 10:38:48,758] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,759] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,760] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,760] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,760] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,761] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,761] DEBUG - RelaxSchema.recurse() : element Sort
[2010-02-01 10:38:48,761] DEBUG - RelaxClass() : ancestor count for [Sort1] = 1
[2010-02-01 10:38:48,761] DEBUG - RelaxSchema.recurse() : element Sort1
[2010-02-01 10:38:48,763] DEBUG - RelaxClass() : ancestor count for [Sort2] = 1
[2010-02-01 10:38:48,763] DEBUG - RelaxSchema.recurse() : element Sort2
[2010-02-01 10:38:48,764] DEBUG - RelaxClass() : ancestor count for [SortChild.rng] = 1
[2010-02-01 10:38:48,766] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-02-01 10:38:48,766] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,769] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-02-01 10:38:48,769] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,771] INFO  - RelaxSchema.parse() : parse [test/schema/relax/SortChild.rng]
[2010-02-01 10:38:48,779] DEBUG - RelaxSchema.addBaseFields() : evaluating sort-child
[2010-02-01 10:38:48,779] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,779] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,781] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,781] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,782] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,782] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,782] DEBUG - RelaxSchema.recurse() : element SortChild
[2010-02-01 10:38:48,783] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-02-01 10:38:48,783] DEBUG - RelaxSchema.recurse() : element Name
[2010-02-01 10:38:48,785] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-02-01 10:38:48,785] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,785] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-02-01 10:38:48,785] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,787] INFO  - RelaxSchema.parse() : parse [test/schema/relax/Test.rng]
[2010-02-01 10:38:48,796] DEBUG - FileResolver.resolveEntity() : looking for [Favorite.rng]
[2010-02-01 10:38:48,798] DEBUG - FileResolver.resolveEntity() : looking for [Favorite.rng]
[2010-02-01 10:38:48,807] DEBUG - RelaxSchema.addBaseFields() : evaluating address-book
[2010-02-01 10:38:48,807] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,808] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,808] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,809] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,809] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,810] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,810] DEBUG - RelaxSchema.recurse() : element AddressBook
[2010-02-01 10:38:48,811] DEBUG - RelaxClass() : ancestor count for [Name] = 1
[2010-02-01 10:38:48,811] DEBUG - RelaxSchema.recurse() : element Name
[2010-02-01 10:38:48,815] DEBUG - RelaxClass() : ancestor count for [Email] = 1
[2010-02-01 10:38:48,815] DEBUG - RelaxSchema.recurse() : element Email
[2010-02-01 10:38:48,817] DEBUG - RelaxClass() : ancestor count for [Enabled] = 1
[2010-02-01 10:38:48,817] DEBUG - RelaxSchema.recurse() : element Enabled
[2010-02-01 10:38:48,819] DEBUG - RelaxSchema.ref() : follow [address]
[2010-02-01 10:38:48,820] DEBUG - RelaxSchema.addBaseFields() : evaluating address
[2010-02-01 10:38:48,820] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,820] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,821] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,821] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,822] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,822] DEBUG - RelaxClass() : ancestor count for [Address] = 1
[2010-02-01 10:38:48,822] DEBUG - RelaxSchema.recurse() : element Address
[2010-02-01 10:38:48,827] DEBUG - RelaxClass() : ancestor count for [Street] = 2
[2010-02-01 10:38:48,827] DEBUG - RelaxSchema.recurse() : element Street
[2010-02-01 10:38:48,828] DEBUG - RelaxClass() : ancestor count for [City] = 2
[2010-02-01 10:38:48,828] DEBUG - RelaxSchema.recurse() : element City
[2010-02-01 10:38:48,829] DEBUG - RelaxClass() : ancestor count for [State] = 2
[2010-02-01 10:38:48,829] DEBUG - RelaxSchema.recurse() : element State
[2010-02-01 10:38:48,830] DEBUG - RelaxClass() : ancestor count for [ZipCode] = 2
[2010-02-01 10:38:48,830] DEBUG - RelaxSchema.recurse() : element ZipCode
[2010-02-01 10:38:48,836] DEBUG - RelaxClass() : ancestor count for [Region] = 2
[2010-02-01 10:38:48,836] DEBUG - RelaxSchema.recurse() : element Region
[2010-02-01 10:38:48,838] DEBUG - RelaxClass() : ancestor count for [Region] = 2
[2010-02-01 10:38:48,838] DEBUG - RelaxSchema.recurse() : element Region
[2010-02-01 10:38:48,839] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-02-01 10:38:48,839] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,840] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-02-01 10:38:48,840] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,841] DEBUG - RelaxSchema.ref() : follow [status]
[2010-02-01 10:38:48,842] DEBUG - RelaxClass() : ancestor count for [Status] = 1
[2010-02-01 10:38:48,842] DEBUG - RelaxSchema.recurse() : element Status
[2010-02-01 10:38:48,843] DEBUG - RelaxSchema.ref() : follow [statistics]
[2010-02-01 10:38:48,843] DEBUG - RelaxSchema.addBaseFields() : evaluating statistics
[2010-02-01 10:38:48,844] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,844] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,844] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,844] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,844] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,846] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,847] DEBUG - RelaxClass() : ancestor count for [Statistics] = 1
[2010-02-01 10:38:48,847] DEBUG - RelaxSchema.recurse() : element Statistics
[2010-02-01 10:38:48,848] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-02-01 10:38:48,848] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,849] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-02-01 10:38:48,849] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,850] DEBUG - RelaxClass() : ancestor count for [Favorite.rng] = 1
[2010-02-01 10:38:48,850] DEBUG - RelaxClass() : ancestor count for [Favorite.rng] = 1
[2010-02-01 10:38:48,851] DEBUG - RelaxSchema.addBaseFields() : evaluating remover
[2010-02-01 10:38:48,851] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,851] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,851] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,853] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,853] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,854] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,855] DEBUG - RelaxClass() : ancestor count for [Remover] = 1
[2010-02-01 10:38:48,855] DEBUG - RelaxSchema.recurse() : element Remover
[2010-02-01 10:38:48,855] DEBUG - RelaxClass() : ancestor count for [Title] = 2
[2010-02-01 10:38:48,855] DEBUG - RelaxSchema.recurse() : element Title
[2010-02-01 10:38:48,857] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 2
[2010-02-01 10:38:48,857] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,858] DEBUG - RelaxClass() : ancestor count for [Created] = 2
[2010-02-01 10:38:48,858] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,859] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-02-01 10:38:48,859] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,860] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-02-01 10:38:48,860] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,872] DEBUG - RelaxSchema.addBaseFields() : evaluating cache
[2010-02-01 10:38:48,872] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,872] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,872] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,872] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,873] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,873] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,874] DEBUG - RelaxSchema.recurse() : element Cache
[2010-02-01 10:38:48,874] DEBUG - RelaxClass() : ancestor count for [Oid] = 1
[2010-02-01 10:38:48,874] DEBUG - RelaxSchema.recurse() : element Oid
[2010-02-01 10:38:48,882] DEBUG - RelaxClass() : ancestor count for [Otype] = 1
[2010-02-01 10:38:48,882] DEBUG - RelaxSchema.recurse() : element Otype
[2010-02-01 10:38:48,884] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-02-01 10:38:48,884] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,885] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-02-01 10:38:48,885] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,889] DEBUG - RelaxSchema.addBaseFields() : evaluating interleave
[2010-02-01 10:38:48,889] DEBUG - RelaxSchema.addBaseFields() : check field id
[2010-02-01 10:38:48,889] DEBUG - RelaxSchema.addBaseFields() : add field id
[2010-02-01 10:38:48,890] DEBUG - RelaxSchema.addBaseFields() : check field lastUpdated
[2010-02-01 10:38:48,890] DEBUG - RelaxSchema.addBaseFields() : add field lastUpdated
[2010-02-01 10:38:48,890] DEBUG - RelaxSchema.addBaseFields() : check field created
[2010-02-01 10:38:48,890] DEBUG - RelaxSchema.addBaseFields() : add field created
[2010-02-01 10:38:48,891] DEBUG - RelaxSchema.recurse() : element Interleave
[2010-02-01 10:38:48,891] DEBUG - RelaxClass() : ancestor count for [Ordering] = 1
[2010-02-01 10:38:48,891] DEBUG - RelaxSchema.recurse() : element Ordering
[2010-02-01 10:38:48,893] DEBUG - RelaxClass() : ancestor count for [LastUpdated] = 1
[2010-02-01 10:38:48,893] DEBUG - RelaxSchema.recurse() : element LastUpdated
[2010-02-01 10:38:48,894] DEBUG - RelaxClass() : ancestor count for [Created] = 1
[2010-02-01 10:38:48,894] DEBUG - RelaxSchema.recurse() : element Created
[2010-02-01 10:38:48,901] DEBUG - DomainClass.resolveExternalRefs() : ext [Levelthree.rng]
[2010-02-01 10:38:48,908] DEBUG - DomainClass.resolveExternalRefs() : ext [interleave.rng]
[2010-02-01 10:38:48,909] DEBUG - DomainClass.resolveExternalRefs() : ext [SortChild.rng]
[2010-02-01 10:38:48,910] DEBUG - DomainClass.resolveExternalRefs() : ext [Favorite.rng]
[2010-02-01 10:38:48,920] INFO  - SchemaLoader.load() : load class [BoolTest]
[2010-02-01 10:38:49,596] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class BoolTest { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="bool-test"><optional><attribute name="available"><data type="boolean"/></attribute></optional><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Boolean.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['available','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        available(nullable : true,)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <available nullable ="true"/>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Boolean available
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "BoolTest".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:49,828] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [BoolTest]
[2010-02-01 10:38:49,828] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [BoolTest]
[2010-02-01 10:38:49,829] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:49,880] DEBUG - PersistenceLoader.addBaseClass() : load BoolTest
[2010-02-01 10:38:49,880] INFO  - SchemaLoader.load() : load class [Levelthree]
[2010-02-01 10:38:50,056] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Levelthree { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="levelthree"><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Levelthree.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['Leveltwo',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Levelthree".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:50,116] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Levelthree]
[2010-02-01 10:38:50,117] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Levelthree]
[2010-02-01 10:38:50,117] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:50,221] DEBUG - PersistenceLoader.addBaseClass() : load Levelthree
[2010-02-01 10:38:50,223] INFO  - SchemaLoader.load() : load class [Leveltwo]
[2010-02-01 10:38:50,374] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Leveltwo { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['levelthree','lastUpdated','created',]

    static final Collection<String> children = ['levelthree',]

    static final Collection<String> parents = ['Levelone',]

    // one-to-many
    static hasMany = [levelthree : Levelthree,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        levelthree(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <levelthree nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Long id
    Date lastUpdated
    Date created

    List    levelthree

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Leveltwo".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:50,409] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Leveltwo]
[2010-02-01 10:38:50,409] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Leveltwo]
[2010-02-01 10:38:50,409] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 1 properties
[2010-02-01 10:38:50,432] DEBUG - PersistenceLoader.addBaseClass() : load Leveltwo
[2010-02-01 10:38:50,432] INFO  - SchemaLoader.load() : load class [Levelone]
[2010-02-01 10:38:50,638] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Levelone { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="levelone"><oneOrMore><element name="leveltwo"><oneOrMore><externalRef href="Levelthree.rng"/></oneOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></oneOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Complex.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['leveltwo','lastUpdated','created',]

    static final Collection<String> children = ['leveltwo',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [leveltwo : Leveltwo,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        leveltwo(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <leveltwo nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Long id
    Date lastUpdated
    Date created

    List    leveltwo

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Levelone".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:50,677] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Levelone]
[2010-02-01 10:38:50,677] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Levelone]
[2010-02-01 10:38:50,677] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 1 properties
[2010-02-01 10:38:50,705] DEBUG - PersistenceLoader.addBaseClass() : load Levelone
[2010-02-01 10:38:50,705] INFO  - SchemaLoader.load() : load class [Favorite]
[2010-02-01 10:38:50,895] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Favorite { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="favorite" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><attribute name="user-id"><data type="integer"/></attribute><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Favorite.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['userId','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        userId(nullable : false,)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <userId nullable ="false"/>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer userId
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Favorite".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:50,919] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Favorite]
[2010-02-01 10:38:50,919] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Favorite]
[2010-02-01 10:38:50,919] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:50,938] DEBUG - PersistenceLoader.addBaseClass() : load Favorite
[2010-02-01 10:38:50,938] INFO  - SchemaLoader.load() : load class [Interleave]
[2010-02-01 10:38:51,037] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Interleave { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'
            ordering type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><start><element name="interleave"><element name="ordering"><data type="string"><param name="maxLength">100000</param></data></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "interleave.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['ordering','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        ordering(maxSize : 100000,nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <ordering maxSize ="100000"nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String ordering
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Interleave".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:51,063] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Interleave]
[2010-02-01 10:38:51,063] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Interleave]
[2010-02-01 10:38:51,063] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:51,082] DEBUG - PersistenceLoader.addBaseClass() : load Interleave
[2010-02-01 10:38:51,082] INFO  - SchemaLoader.load() : load class [KidOne]
[2010-02-01 10:38:51,222] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidOne { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidOne".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:51,246] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidOne]
[2010-02-01 10:38:51,246] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidOne]
[2010-02-01 10:38:51,246] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:51,261] DEBUG - PersistenceLoader.addBaseClass() : load KidOne
[2010-02-01 10:38:51,261] INFO  - SchemaLoader.load() : load class [KidTwo]
[2010-02-01 10:38:51,484] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidTwo { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidTwo".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:51,507] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidTwo]
[2010-02-01 10:38:51,507] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidTwo]
[2010-02-01 10:38:51,507] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:51,523] DEBUG - PersistenceLoader.addBaseClass() : load KidTwo
[2010-02-01 10:38:51,523] INFO  - SchemaLoader.load() : load class [KidThree]
[2010-02-01 10:38:51,627] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class KidThree { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['MixedKids',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "KidThree".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:51,653] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [KidThree]
[2010-02-01 10:38:51,653] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [KidThree]
[2010-02-01 10:38:51,653] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:51,667] DEBUG - PersistenceLoader.addBaseClass() : load KidThree
[2010-02-01 10:38:51,667] INFO  - SchemaLoader.load() : load class [MixedKids]
[2010-02-01 10:38:51,766] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class MixedKids { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><define name="kid-one"><element name="kid-one"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="kid-two"><element name="kid-two"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="kid-three"><element name="kid-three"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><start><element name="mixed-kids"><element name="title"><text/></element><interleave><zeroOrMore><ref name="kid-one"/></zeroOrMore><zeroOrMore><ref name="kid-two"/></zeroOrMore></interleave><zeroOrMore><ref name="kid-three"/></zeroOrMore><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Mixed.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','interleave','kidOne','kidTwo','kidThree','lastUpdated','created',]

    static final Collection<String> children = ['interleave','kidOne','kidTwo','kidThree',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [kidOne : KidOne,kidTwo : KidTwo,kidThree : KidThree,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        interleave(nullable : true,)
        kidOne(nullable : true,)
        kidTwo(nullable : true,)
        kidThree(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <interleave nullable ="true"/>
            <kidOne nullable ="true"/>
            <kidTwo nullable ="true"/>
            <kidThree nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    Interleave interleave


    // fields
    String title
    Long id
    Date lastUpdated
    Date created

    List    kidOne
    List    kidTwo
    List    kidThree

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "MixedKids".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:51,803] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [MixedKids]
[2010-02-01 10:38:51,803] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [MixedKids]
[2010-02-01 10:38:51,803] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 3 properties
[2010-02-01 10:38:51,828] DEBUG - PersistenceLoader.addBaseClass() : load MixedKids
[2010-02-01 10:38:51,828] INFO  - SchemaLoader.load() : load class [SortChild]
[2010-02-01 10:38:51,994] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class SortChild { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="sort-child" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><element name="name"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "SortChild.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['name','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['Sort',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        name(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <name nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String name
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "SortChild".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:52,021] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [SortChild]
[2010-02-01 10:38:52,022] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [SortChild]
[2010-02-01 10:38:52,022] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:52,038] DEBUG - PersistenceLoader.addBaseClass() : load SortChild
[2010-02-01 10:38:52,038] INFO  - SchemaLoader.load() : load class [Sort]
[2010-02-01 10:38:52,119] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Sort { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<element xmlns="http://relaxng.org/ns/structure/1.0" name="sort" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><element name="sort1"><text/></element><element name="sort2"><text/></element><optional><externalRef href="SortChild.rng"/></optional><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Sort.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['sort1','sort2','sortChild','lastUpdated','created',]

    static final Collection<String> children = ['sortChild',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        sort1(nullable : false,)
        sort2(nullable : false,)
        sortChild(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <sort1 nullable ="false"/>
            <sort2 nullable ="false"/>
            <sortChild nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    SortChild sortChild


    // fields
    String sort1
    String sort2
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Sort".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:52,145] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Sort]
[2010-02-01 10:38:52,145] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Sort]
[2010-02-01 10:38:52,145] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:52,157] DEBUG - PersistenceLoader.addBaseClass() : load Sort
[2010-02-01 10:38:52,157] INFO  - SchemaLoader.load() : load class [Address]
[2010-02-01 10:38:52,267] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Address { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id','type',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['street','city','state','zipCode','region','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        id(nullable : true,)
        type(nullable : false,inList : ["home","work",], )
        street(nullable : false,)
        city(nullable : false,)
        state(nullable : false,)
        zipCode(nullable : false,)
        region(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <id nullable ="true"/>
            <type nullable ="false"inList ="["home"""work""]" />
            <street nullable ="false"/>
            <city nullable ="false"/>
            <state nullable ="false"/>
            <zipCode nullable ="false"/>
            <region nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer id
    String type
    String[] street
    String city
    String state
    Integer zipCode
    String[] region
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Address".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:52,291] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Address]
[2010-02-01 10:38:52,291] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Address]
[2010-02-01 10:38:52,291] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:52,304] DEBUG - PersistenceLoader.addBaseClass() : load Address
[2010-02-01 10:38:52,304] INFO  - SchemaLoader.load() : load class [Statistics]
[2010-02-01 10:38:52,378] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Statistics { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['accessed','size','id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        accessed(nullable : false,)
        size(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <accessed nullable ="false"/>
            <size nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    Integer accessed
    Long size
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Statistics".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:52,487] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Statistics]
[2010-02-01 10:38:52,487] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Statistics]
[2010-02-01 10:38:52,487] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:52,499] DEBUG - PersistenceLoader.addBaseClass() : load Statistics
[2010-02-01 10:38:52,499] INFO  - SchemaLoader.load() : load class [Remover]
[2010-02-01 10:38:52,572] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class Remover { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName

    // primitives that should be attributes
    static final Collection<String> attributes = ['id',]

    // primitives that should be empty
    static final Collection<String> empty = []

    static final Collection<String> elements = ['title','lastUpdated','created',]

    static final Collection<String> children = []

    static final Collection<String> parents = ['AddressBook',]

    // one-to-many
    static hasMany = [:]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        title(nullable : false,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <title nullable ="false"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one


    // fields
    String title
    Long id
    Date lastUpdated
    Date created


    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "Remover".hashCode() + id.hashCode()
    }

}

[2010-02-01 10:38:52,597] DEBUG - DomainObjectLoader.injectVersionProperty() :  adding property [version] to class [Remover]
[2010-02-01 10:38:52,597] DEBUG - DomainObjectLoader.injectToStringMethod() : adding toString() method to class [Remover]
[2010-02-01 10:38:52,597] DEBUG - DomainObjectLoader.injectAssociationProperties() : adding 0 properties
[2010-02-01 10:38:52,609] DEBUG - PersistenceLoader.addBaseClass() : load Remover
[2010-02-01 10:38:52,609] INFO  - SchemaLoader.load() : load class [AddressBook]
[2010-02-01 10:38:52,692] DEBUG - DomainClass.buildTemplate() : build

import org.chi.persistence.DomainObjectLoader.DomainClass

/**
 * this represents the template for domain class objects.
 */
@DomainClass
class AddressBook { 

    static mapping = { 
        dynamicUpdate true
        cache include: "non-lazy" 
        columns {
            xmlcache type:'text'

        }
    }

    // the schema used to create the class
    // if this is null, consider it at child
    static final String schema = '''<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"><define name="address"><element name="address"><optional><attribute name="id"><data type="integer"/></attribute></optional><attribute name="type"><choice><value>home</value><value>work</value></choice></attribute><oneOrMore><element name="street"><text/></element></oneOrMore><element name="city"><text/></element><element name="state"><text/></element><element name="zip-code"><data type="integer"/></element><optional><element name="region"><text/></element><element name="region"><text/></element></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><define name="status"><element name="status"><choice><value>new</value><value>reviewed</value></choice></element></define><define name="statistics"><element name="statistics"><attribute name="accessed"><data type="integer"/></attribute><attribute name="size"><data type="long"/></attribute><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></define><start><element name="address-book"><optional><attribute name="address-count"><text/></attribute></optional><element name="name"><data type="string"><param name="maxLength">100</param></data></element><optional><element name="email"><text/></element></optional><optional><element name="enabled"><empty/></element></optional><zeroOrMore><ref name="address"/></zeroOrMore><optional><ref name="status"/></optional><ref name="statistics"/><externalRef href="Favorite.rng"/><externalRef href="Favorite.rng"/><optional><element name="remover"><element name="title"><text/></element><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></optional><optional><attribute name="id"><data type="long"/></attribute></optional><optional><element name="last-updated"><data type="dateTime"/></element></optional><optional><element name="created"><data type="dateTime"/></element></optional></element></start></grammar>'''

    // the original schema name
    // if this is null, consider it at child
    static final String schemaName = "Test.rng"

    // primitives that should be attributes
    static final Collection<String> attributes = ['addressCount','id',]

    // primitives that should be empty
    static final Collection<String> empty = ['enabled',]

    static final Collection<String> elements = ['name','email','enabled','address','status','statistics','favorite','remover','lastUpdated','created',]

    static final Collection<String> children = ['address','statistics','favorite','remover',]

    static final Collection<String> parents = []

    // one-to-many
    static hasMany = [address : Address,favorite : Favorite,]
    
    // constraints
    static constraints = {
        xmlcache(maxSize: 1000000)
        addressCount(nullable : true,)
        name(maxSize : 100,nullable : false,)
        email(nullable : true,)
        enabled(nullable : false,)
        address(nullable : true,)
        status(nullable : true,inList : ["new","reviewed",], )
        statistics(nullable : false,)
        favorite(nullable : false,)
        remover(nullable : true,)
        id(nullable : true,)
        lastUpdated(nullable : true,)
        created(nullable : true,)

    }

    // validation string
    static String validationStr = '''
        <validation>
            <addressCount nullable ="true"/>
            <name maxSize ="100"nullable ="false"/>
            <email nullable ="true"/>
            <enabled nullable ="false"/>
            <address nullable ="true"/>
            <status nullable ="true"inList ="["new"""reviewed""]" />
            <statistics nullable ="false"/>
            <favorite nullable ="false"/>
            <remover nullable ="true"/>
            <id nullable ="true"/>
            <lastUpdated nullable ="true"/>
            <created nullable ="true"/>

        </validation>
    '''

    // interleave ordering convenience
    private o
    def addOrder(type, object) { 
        if (o == null) o = []
        o.add([type, object])
    }
    def order(o) { this.o = o }
    def order() { return o }

    // new object flag
    private _new = false
    def markNew() { _new = true }
    def isNew() { return _new }

    // one-to-one
    Statistics statistics
    Remover remover


    // fields
    String addressCount
    String name
    String email
    Boolean enabled
    String status
    Long id
    Date lastUpdated
    Date created

    List    address
    List    favorite

    // cache
    String xmlcache = " "

    Date getCreated() {
        if (created == null) created = new Date()
        return created
    }

    Date getLastUpdated() {
        if (lastUpdated == null) lastUpdated = new Date()
        return lastUpdated
    }

    void updated() {
        lastUpdated = null
    }

    void finishorder() {
        if (! o) return
        addOrder("lastUpdated", getLastUpdated())
        addOrder("created", getCreated())
    }

    @Override
    boolean equals(Object obj) {
        if (! obj) return false
        return obj.class.equals(this.class) && obj.id.equals(id)
    }

    @Override
    int hashCode() {
        return "AddressBook".hashCode() + id.hashCode()
    }

}

